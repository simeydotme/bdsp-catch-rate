
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function set_custom_element_data(node, prop, value) {
        if (prop in node) {
            node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;
        }
        else {
            attr(node, prop, value);
        }
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
            'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }
    class HtmlTag {
        constructor() {
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                this.e = element(target.nodeName);
                this.t = target;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function beforeUpdate(fn) {
        get_current_component().$$.before_update.push(fn);
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.3' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    var data = { bulbasaur:{ pokemonid:"bulbasaur",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"poison",
        stats:{ hp:45,
          attack:49,
          defense:49,
          spatk:65,
          spdef:65,
          speed:45 },
        species:"Seed",
        height:0.7,
        weight:6.9,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      ivysaur:{ pokemonid:"ivysaur",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"poison",
        stats:{ hp:60,
          attack:62,
          defense:63,
          spatk:80,
          spdef:80,
          speed:60 },
        species:"Seed",
        height:1,
        weight:13,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1,
          spdef:1 } },
      venusaur:{ pokemonid:"venusaur",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"poison",
        stats:{ hp:80,
          attack:82,
          defense:83,
          spatk:100,
          spdef:100,
          speed:80 },
        species:"Seed",
        height:2,
        weight:100,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":236,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2,
          spdef:1 } },
      "venusaur-mega":{ pokemonid:"venusaur",
        formid:"mega",
        formname:"Mega Venusaur",
        gen:6,
        release:"x-y",
        type1:"grass",
        type2:"poison",
        stats:{ hp:80,
          attack:100,
          defense:123,
          spatk:122,
          spdef:120,
          speed:80 },
        species:"Seed",
        height:2.4,
        weight:155.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":281,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2,
          spdef:1 } },
      charmander:{ pokemonid:"charmander",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:null,
        stats:{ hp:39,
          attack:52,
          defense:43,
          spatk:60,
          spdef:50,
          speed:65 },
        species:"Lizard",
        height:0.6,
        weight:8.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      charmeleon:{ pokemonid:"charmeleon",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:null,
        stats:{ hp:58,
          attack:64,
          defense:58,
          spatk:80,
          spdef:65,
          speed:80 },
        species:"Flame",
        height:1.1,
        weight:19,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1,
          speed:1 } },
      charizard:{ pokemonid:"charizard",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:"flying",
        stats:{ hp:78,
          attack:84,
          defense:78,
          spatk:109,
          spdef:85,
          speed:100 },
        species:"Flame",
        height:1.7,
        weight:90.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":240,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      "charizard-mega-x":{ pokemonid:"charizard",
        formid:"mega-x",
        formname:"Mega Charizard X",
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:"dragon",
        stats:{ hp:78,
          attack:130,
          defense:111,
          spatk:130,
          spdef:85,
          speed:100 },
        species:"Flame",
        height:1.7,
        weight:110.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":285,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      "charizard-mega-y":{ pokemonid:"charizard",
        formid:"mega-y",
        formname:"Mega Charizard Y",
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:"flying",
        stats:{ hp:78,
          attack:104,
          defense:78,
          spatk:159,
          spdef:115,
          speed:100 },
        species:"Flame",
        height:1.7,
        weight:100.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":285,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      squirtle:{ pokemonid:"squirtle",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:44,
          attack:48,
          defense:65,
          spatk:50,
          spdef:64,
          speed:43 },
        species:"Tiny Turtle",
        height:0.5,
        weight:9,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      wartortle:{ pokemonid:"wartortle",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:59,
          attack:63,
          defense:80,
          spatk:65,
          spdef:80,
          speed:58 },
        species:"Turtle",
        height:1,
        weight:22.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1,
          spdef:1 } },
      blastoise:{ pokemonid:"blastoise",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:79,
          attack:83,
          defense:100,
          spatk:85,
          spdef:105,
          speed:78 },
        species:"Shellfish",
        height:1.6,
        weight:85.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:3 } },
      "blastoise-mega":{ pokemonid:"blastoise",
        formid:"mega",
        formname:"Mega Blastoise",
        gen:6,
        release:"x-y",
        type1:"water",
        type2:null,
        stats:{ hp:79,
          attack:103,
          defense:120,
          spatk:135,
          spdef:115,
          speed:78 },
        species:"Shellfish",
        height:1.6,
        weight:101.1,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":284,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:3 } },
      caterpie:{ pokemonid:"caterpie",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:null,
        stats:{ hp:45,
          attack:30,
          defense:35,
          spatk:20,
          spdef:20,
          speed:45 },
        species:"Worm",
        height:0.3,
        weight:2.9,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":39,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      metapod:{ pokemonid:"metapod",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:null,
        stats:{ hp:50,
          attack:20,
          defense:55,
          spatk:25,
          spdef:25,
          speed:30 },
        species:"Cocoon",
        height:0.7,
        weight:9.9,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":72,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      butterfree:{ pokemonid:"butterfree",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:"flying",
        stats:{ hp:60,
          attack:45,
          defense:50,
          spatk:90,
          spdef:80,
          speed:70 },
        species:"Butterfly",
        height:1.1,
        weight:32,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":178,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2,
          spdef:1 } },
      weedle:{ pokemonid:"weedle",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:"poison",
        stats:{ hp:40,
          attack:35,
          defense:30,
          spatk:20,
          spdef:20,
          speed:50 },
        species:"Hairy Bug",
        height:0.3,
        weight:3.2,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":39,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      kakuna:{ pokemonid:"kakuna",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:"poison",
        stats:{ hp:45,
          attack:25,
          defense:50,
          spatk:25,
          spdef:25,
          speed:35 },
        species:"Cocoon",
        height:0.6,
        weight:10,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":72,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      beedrill:{ pokemonid:"beedrill",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:"poison",
        stats:{ hp:65,
          attack:90,
          defense:40,
          spatk:45,
          spdef:80,
          speed:75 },
        species:"Poison Bee",
        height:1,
        weight:29.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":178,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2,
          spdef:1 } },
      "beedrill-mega":{ pokemonid:"beedrill",
        formid:"mega",
        formname:"Mega Beedrill",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"bug",
        type2:"poison",
        stats:{ hp:65,
          attack:150,
          defense:40,
          spatk:15,
          spdef:80,
          speed:145 },
        species:"Poison Bee",
        height:1.4,
        weight:40.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":223,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2,
          spdef:1 } },
      pidgey:{ pokemonid:"pidgey",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:"flying",
        stats:{ hp:40,
          attack:45,
          defense:40,
          spatk:35,
          spdef:35,
          speed:56 },
        species:"Tiny Bird",
        height:0.3,
        weight:1.8,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":50,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      pidgeotto:{ pokemonid:"pidgeotto",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:"flying",
        stats:{ hp:63,
          attack:60,
          defense:55,
          spatk:50,
          spdef:50,
          speed:71 },
        species:"Bird",
        height:1.1,
        weight:30,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":122,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      pidgeot:{ pokemonid:"pidgeot",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:"flying",
        stats:{ hp:83,
          attack:80,
          defense:75,
          spatk:70,
          spdef:70,
          speed:101 },
        species:"Bird",
        height:1.5,
        weight:39.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":216,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      "pidgeot-mega":{ pokemonid:"pidgeot",
        formid:"mega",
        formname:"Mega Pidgeot",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"normal",
        type2:"flying",
        stats:{ hp:83,
          attack:80,
          defense:80,
          spatk:135,
          spdef:80,
          speed:121 },
        species:"Bird",
        height:2.2,
        weight:50.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":261,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      rattata:{ pokemonid:"rattata",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:30,
          attack:56,
          defense:35,
          spatk:25,
          spdef:35,
          speed:72 },
        species:"Mouse",
        height:0.3,
        weight:3.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":51,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      "rattata-alolan":{ pokemonid:"rattata",
        formid:"alolan",
        formname:"Alolan Rattata",
        gen:7,
        release:"sun-moon",
        type1:"dark",
        type2:"normal",
        stats:{ hp:30,
          attack:56,
          defense:35,
          spatk:25,
          spdef:35,
          speed:72 },
        species:"Mouse",
        height:0.3,
        weight:3.8,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":51,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      raticate:{ pokemonid:"raticate",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:55,
          attack:81,
          defense:60,
          spatk:50,
          spdef:70,
          speed:97 },
        species:"Mouse",
        height:0.7,
        weight:18.5,
        gender:"4:4",
        "catch-rate":127,
        "base-exp":145,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "raticate-alolan":{ pokemonid:"raticate",
        formid:"alolan",
        formname:"Alolan Raticate",
        gen:7,
        release:"sun-moon",
        type1:"dark",
        type2:"normal",
        stats:{ hp:75,
          attack:71,
          defense:70,
          spatk:40,
          spdef:80,
          speed:77 },
        species:"Mouse",
        height:0.7,
        weight:25.5,
        gender:"4:4",
        "catch-rate":127,
        "base-exp":145,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      spearow:{ pokemonid:"spearow",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:"flying",
        stats:{ hp:40,
          attack:60,
          defense:30,
          spatk:31,
          spdef:31,
          speed:70 },
        species:"Tiny Bird",
        height:0.3,
        weight:2,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":52,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      fearow:{ pokemonid:"fearow",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:"flying",
        stats:{ hp:65,
          attack:90,
          defense:65,
          spatk:61,
          spdef:61,
          speed:100 },
        species:"Beak",
        height:1.2,
        weight:38,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":155,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      ekans:{ pokemonid:"ekans",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:null,
        stats:{ hp:35,
          attack:60,
          defense:44,
          spatk:40,
          spdef:54,
          speed:55 },
        species:"Snake",
        height:2,
        weight:6.9,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      arbok:{ pokemonid:"arbok",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:null,
        stats:{ hp:60,
          attack:95,
          defense:69,
          spatk:65,
          spdef:79,
          speed:80 },
        species:"Cobra",
        height:3.5,
        weight:65,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":157,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      pikachu:{ pokemonid:"pikachu",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"electric",
        type2:null,
        stats:{ hp:35,
          attack:55,
          defense:40,
          spatk:50,
          spdef:50,
          speed:90 },
        species:"Mouse",
        height:0.4,
        weight:6,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":112,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "pikachu-lets-go":{ pokemonid:"pikachu",
        formid:"lets-go",
        formname:"Partner Pikachu",
        gen:7,
        release:"lets-go-pikachu-eevee",
        type1:"electric",
        type2:null,
        stats:{ hp:45,
          attack:80,
          defense:50,
          spatk:75,
          spdef:60,
          speed:120 },
        species:"Mouse",
        height:0.4,
        weight:6,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":112,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      raichu:{ pokemonid:"raichu",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"electric",
        type2:null,
        stats:{ hp:60,
          attack:90,
          defense:55,
          spatk:90,
          spdef:80,
          speed:110 },
        species:"Mouse",
        height:0.8,
        weight:30,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":218,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:3 } },
      "raichu-alolan":{ pokemonid:"raichu",
        formid:"alolan",
        formname:"Alolan Raichu",
        gen:7,
        release:"sun-moon",
        type1:"electric",
        type2:"psychic",
        stats:{ hp:60,
          attack:85,
          defense:50,
          spatk:95,
          spdef:85,
          speed:110 },
        species:"Mouse",
        height:0.7,
        weight:21,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":218,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:3 } },
      sandshrew:{ pokemonid:"sandshrew",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ground",
        type2:null,
        stats:{ hp:50,
          attack:75,
          defense:85,
          spatk:20,
          spdef:30,
          speed:40 },
        species:"Mouse",
        height:0.6,
        weight:12,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      "sandshrew-alolan":{ pokemonid:"sandshrew",
        formid:"alolan",
        formname:"Alolan Sandshrew",
        gen:7,
        release:"sun-moon",
        type1:"ice",
        type2:"steel",
        stats:{ hp:50,
          attack:75,
          defense:90,
          spatk:10,
          spdef:35,
          speed:40 },
        species:"Mouse",
        height:0.7,
        weight:40,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      sandslash:{ pokemonid:"sandslash",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ground",
        type2:null,
        stats:{ hp:75,
          attack:100,
          defense:110,
          spatk:45,
          spdef:55,
          speed:65 },
        species:"Mouse",
        height:1,
        weight:29.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":158,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "sandslash-alolan":{ pokemonid:"sandslash",
        formid:"alolan",
        formname:"Alolan Sandslash",
        gen:7,
        release:"sun-moon",
        type1:"ice",
        type2:"steel",
        stats:{ hp:75,
          attack:100,
          defense:120,
          spatk:25,
          spdef:65,
          speed:65 },
        species:"Mouse",
        height:1.2,
        weight:55,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":158,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "nidoran-f":{ pokemonid:"nidoran-f",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:null,
        stats:{ hp:55,
          attack:47,
          defense:52,
          spatk:40,
          spdef:40,
          speed:41 },
        species:"Poison Pin",
        height:0.4,
        weight:7,
        gender:"8:0",
        "catch-rate":235,
        "base-exp":55,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:1 } },
      nidorina:{ pokemonid:"nidorina",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:null,
        stats:{ hp:70,
          attack:62,
          defense:67,
          spatk:55,
          spdef:55,
          speed:56 },
        species:"Poison Pin",
        height:0.8,
        weight:20,
        gender:"8:0",
        "catch-rate":120,
        "base-exp":128,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:2 } },
      nidoqueen:{ pokemonid:"nidoqueen",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:"ground",
        stats:{ hp:90,
          attack:92,
          defense:87,
          spatk:75,
          spdef:85,
          speed:76 },
        species:"Drill",
        height:1.3,
        weight:60,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":227,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:3 } },
      "nidoran-m":{ pokemonid:"nidoran-m",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:null,
        stats:{ hp:46,
          attack:57,
          defense:40,
          spatk:40,
          spdef:40,
          speed:50 },
        species:"Poison Pin",
        height:0.5,
        weight:9,
        gender:0,
        "catch-rate":235,
        "base-exp":55,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      nidorino:{ pokemonid:"nidorino",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:null,
        stats:{ hp:61,
          attack:72,
          defense:57,
          spatk:55,
          spdef:55,
          speed:65 },
        species:"Poison Pin",
        height:0.9,
        weight:19.5,
        gender:0,
        "catch-rate":120,
        "base-exp":128,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      nidoking:{ pokemonid:"nidoking",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:"ground",
        stats:{ hp:81,
          attack:102,
          defense:77,
          spatk:85,
          spdef:75,
          speed:85 },
        species:"Drill",
        height:1.4,
        weight:62,
        gender:0,
        "catch-rate":45,
        "base-exp":227,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      clefairy:{ pokemonid:"clefairy",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fairy",
        type2:null,
        stats:{ hp:70,
          attack:45,
          defense:48,
          spatk:60,
          spdef:65,
          speed:35 },
        species:"Fairy",
        height:0.6,
        weight:7.5,
        gender:"6:2",
        "catch-rate":150,
        "base-exp":113,
        "egg-cycles":10,
        friendship:140,
        "growth-rate":"fast",
        "ev-yield":{ hp:2 } },
      clefable:{ pokemonid:"clefable",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fairy",
        type2:null,
        stats:{ hp:95,
          attack:70,
          defense:73,
          spatk:95,
          spdef:90,
          speed:60 },
        species:"Fairy",
        height:1.3,
        weight:40,
        gender:"6:2",
        "catch-rate":25,
        "base-exp":217,
        "egg-cycles":10,
        friendship:140,
        "growth-rate":"fast",
        "ev-yield":{ hp:3 } },
      vulpix:{ pokemonid:"vulpix",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:null,
        stats:{ hp:38,
          attack:41,
          defense:40,
          spatk:50,
          spdef:65,
          speed:65 },
        species:"Fox",
        height:0.6,
        weight:9.9,
        gender:"6:2",
        "catch-rate":190,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      "vulpix-alolan":{ pokemonid:"vulpix",
        formid:"alolan",
        formname:"Alolan Vulpix",
        gen:7,
        release:"sun-moon",
        type1:"ice",
        type2:null,
        stats:{ hp:38,
          attack:41,
          defense:40,
          spatk:50,
          spdef:65,
          speed:65 },
        species:"Fox",
        height:0.6,
        weight:9.9,
        gender:"6:2",
        "catch-rate":190,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      ninetales:{ pokemonid:"ninetales",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:null,
        stats:{ hp:73,
          attack:76,
          defense:75,
          spatk:81,
          spdef:100,
          speed:100 },
        species:"Fox",
        height:1.1,
        weight:19.9,
        gender:"6:2",
        "catch-rate":75,
        "base-exp":177,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1,
          speed:1 } },
      "ninetales-alolan":{ pokemonid:"ninetales",
        formid:"alolan",
        formname:"Alolan Ninetales",
        gen:7,
        release:"sun-moon",
        type1:"ice",
        type2:"fairy",
        stats:{ hp:73,
          attack:67,
          defense:75,
          spatk:81,
          spdef:100,
          speed:109 },
        species:"Fox",
        height:1.1,
        weight:19.9,
        gender:"6:2",
        "catch-rate":75,
        "base-exp":177,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      jigglypuff:{ pokemonid:"jigglypuff",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:"fairy",
        stats:{ hp:115,
          attack:45,
          defense:20,
          spatk:45,
          spdef:25,
          speed:20 },
        species:"Balloon",
        height:0.5,
        weight:5.5,
        gender:"6:2",
        "catch-rate":170,
        "base-exp":95,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:2 } },
      wigglytuff:{ pokemonid:"wigglytuff",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:"fairy",
        stats:{ hp:140,
          attack:70,
          defense:45,
          spatk:85,
          spdef:50,
          speed:45 },
        species:"Balloon",
        height:1,
        weight:12,
        gender:"6:2",
        "catch-rate":50,
        "base-exp":196,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:3 } },
      zubat:{ pokemonid:"zubat",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:"flying",
        stats:{ hp:40,
          attack:45,
          defense:35,
          spatk:30,
          spdef:40,
          speed:55 },
        species:"Bat",
        height:0.8,
        weight:7.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":49,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      golbat:{ pokemonid:"golbat",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:"flying",
        stats:{ hp:75,
          attack:80,
          defense:70,
          spatk:65,
          spdef:75,
          speed:90 },
        species:"Bat",
        height:1.6,
        weight:55,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":159,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      oddish:{ pokemonid:"oddish",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"poison",
        stats:{ hp:45,
          attack:50,
          defense:55,
          spatk:75,
          spdef:65,
          speed:30 },
        species:"Weed",
        height:0.5,
        weight:5.4,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      gloom:{ pokemonid:"gloom",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"poison",
        stats:{ hp:60,
          attack:65,
          defense:70,
          spatk:85,
          spdef:75,
          speed:40 },
        species:"Weed",
        height:0.8,
        weight:8.6,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":138,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      vileplume:{ pokemonid:"vileplume",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"poison",
        stats:{ hp:75,
          attack:80,
          defense:85,
          spatk:110,
          spdef:90,
          speed:50 },
        species:"Flower",
        height:1.2,
        weight:18.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":221,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      paras:{ pokemonid:"paras",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:"grass",
        stats:{ hp:35,
          attack:70,
          defense:55,
          spatk:45,
          spdef:55,
          speed:25 },
        species:"Mushroom",
        height:0.3,
        weight:5.4,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":57,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      parasect:{ pokemonid:"parasect",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:"grass",
        stats:{ hp:60,
          attack:95,
          defense:80,
          spatk:60,
          spdef:80,
          speed:30 },
        species:"Mushroom",
        height:1,
        weight:29.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2,
          defense:1 } },
      venonat:{ pokemonid:"venonat",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:"poison",
        stats:{ hp:60,
          attack:55,
          defense:50,
          spatk:40,
          spdef:55,
          speed:45 },
        species:"Insect",
        height:1,
        weight:30,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      venomoth:{ pokemonid:"venomoth",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:"poison",
        stats:{ hp:70,
          attack:65,
          defense:60,
          spatk:90,
          spdef:75,
          speed:90 },
        species:"Poison Moth",
        height:1.5,
        weight:12.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":158,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1,
          speed:1 } },
      diglett:{ pokemonid:"diglett",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ground",
        type2:null,
        stats:{ hp:10,
          attack:55,
          defense:25,
          spatk:35,
          spdef:45,
          speed:95 },
        species:"Mole",
        height:0.2,
        weight:0.8,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":53,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      "diglett-alolan":{ pokemonid:"diglett",
        formid:"alolan",
        formname:"Alolan Diglett",
        gen:7,
        release:"sun-moon",
        type1:"ground",
        type2:"steel",
        stats:{ hp:10,
          attack:55,
          defense:30,
          spatk:35,
          spdef:45,
          speed:90 },
        species:"Mole",
        height:0.2,
        weight:1,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":53,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      dugtrio:{ pokemonid:"dugtrio",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ground",
        type2:null,
        stats:{ hp:35,
          attack:100,
          defense:50,
          spatk:50,
          spdef:70,
          speed:120 },
        species:"Mole",
        height:0.7,
        weight:33.3,
        gender:"4:4",
        "catch-rate":50,
        "base-exp":149,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "dugtrio-alolan":{ pokemonid:"dugtrio",
        formid:"alolan",
        formname:"Alolan Dugtrio",
        gen:7,
        release:"sun-moon",
        type1:"ground",
        type2:"steel",
        stats:{ hp:35,
          attack:100,
          defense:60,
          spatk:50,
          spdef:70,
          speed:110 },
        species:"Mole",
        height:0.7,
        weight:66.6,
        gender:"4:4",
        "catch-rate":50,
        "base-exp":149,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      meowth:{ pokemonid:"meowth",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:40,
          attack:45,
          defense:35,
          spatk:40,
          spdef:40,
          speed:90 },
        species:"Scratch Cat",
        height:0.4,
        weight:4.2,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      "meowth-alolan":{ pokemonid:"meowth",
        formid:"alolan",
        formname:"Alolan Meowth",
        gen:7,
        release:"sun-moon",
        type1:"dark",
        type2:null,
        stats:{ hp:40,
          attack:35,
          defense:35,
          spatk:50,
          spdef:40,
          speed:90 },
        species:"Scratch Cat",
        height:0.4,
        weight:4.2,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      "meowth-galarian":{ pokemonid:"meowth",
        formid:"galarian",
        formname:"Galarian Meowth",
        gen:8,
        release:"sword-shield",
        type1:"steel",
        type2:null,
        stats:{ hp:50,
          attack:65,
          defense:55,
          spatk:40,
          spdef:40,
          speed:40 },
        species:"Scratch Cat",
        height:0.4,
        weight:7.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      persian:{ pokemonid:"persian",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:65,
          attack:70,
          defense:60,
          spatk:65,
          spdef:65,
          speed:115 },
        species:"Classy Cat",
        height:1,
        weight:32,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":154,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "persian-alolan":{ pokemonid:"persian",
        formid:"alolan",
        formname:"Alolan Persian",
        gen:7,
        release:"sun-moon",
        type1:"dark",
        type2:null,
        stats:{ hp:65,
          attack:60,
          defense:60,
          spatk:75,
          spdef:65,
          speed:115 },
        species:"Classy Cat",
        height:1.1,
        weight:33,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":154,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      psyduck:{ pokemonid:"psyduck",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:50,
          attack:52,
          defense:48,
          spatk:65,
          spdef:50,
          speed:55 },
        species:"Duck",
        height:0.8,
        weight:19.6,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      golduck:{ pokemonid:"golduck",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:80,
          attack:82,
          defense:78,
          spatk:95,
          spdef:80,
          speed:85 },
        species:"Duck",
        height:1.7,
        weight:76.6,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      mankey:{ pokemonid:"mankey",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fighting",
        type2:null,
        stats:{ hp:40,
          attack:80,
          defense:35,
          spatk:35,
          spdef:45,
          speed:70 },
        species:"Pig Monkey",
        height:0.5,
        weight:28,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      primeape:{ pokemonid:"primeape",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fighting",
        type2:null,
        stats:{ hp:65,
          attack:105,
          defense:60,
          spatk:60,
          spdef:70,
          speed:95 },
        species:"Pig Monkey",
        height:1,
        weight:32,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":159,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      growlithe:{ pokemonid:"growlithe",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:null,
        stats:{ hp:55,
          attack:70,
          defense:45,
          spatk:70,
          spdef:50,
          speed:60 },
        species:"Puppy",
        height:0.7,
        weight:19,
        gender:"2:6",
        "catch-rate":190,
        "base-exp":70,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      arcanine:{ pokemonid:"arcanine",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:null,
        stats:{ hp:90,
          attack:110,
          defense:80,
          spatk:100,
          spdef:80,
          speed:95 },
        species:"Legendary",
        height:1.9,
        weight:155,
        gender:"2:6",
        "catch-rate":75,
        "base-exp":194,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      poliwag:{ pokemonid:"poliwag",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:40,
          attack:50,
          defense:40,
          spatk:40,
          spdef:40,
          speed:90 },
        species:"Tadpole",
        height:0.6,
        weight:12.4,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      poliwhirl:{ pokemonid:"poliwhirl",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:65,
          attack:65,
          defense:65,
          spatk:50,
          spdef:50,
          speed:90 },
        species:"Tadpole",
        height:1,
        weight:20,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":135,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      poliwrath:{ pokemonid:"poliwrath",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:"fighting",
        stats:{ hp:90,
          attack:95,
          defense:95,
          spatk:70,
          spdef:90,
          speed:70 },
        species:"Tadpole",
        height:1.3,
        weight:54,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":230,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:3 } },
      abra:{ pokemonid:"abra",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"psychic",
        type2:null,
        stats:{ hp:25,
          attack:20,
          defense:15,
          spatk:105,
          spdef:55,
          speed:90 },
        species:"Psi",
        height:0.9,
        weight:19.5,
        gender:"2:6",
        "catch-rate":200,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      kadabra:{ pokemonid:"kadabra",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"psychic",
        type2:null,
        stats:{ hp:40,
          attack:35,
          defense:30,
          spatk:120,
          spdef:70,
          speed:105 },
        species:"Psi",
        height:1.3,
        weight:56.5,
        gender:"2:6",
        "catch-rate":100,
        "base-exp":140,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      alakazam:{ pokemonid:"alakazam",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"psychic",
        type2:null,
        stats:{ hp:55,
          attack:50,
          defense:45,
          spatk:135,
          spdef:95,
          speed:120 },
        species:"Psi",
        height:1.5,
        weight:48,
        gender:"2:6",
        "catch-rate":50,
        "base-exp":225,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      "alakazam-mega":{ pokemonid:"alakazam",
        formid:"mega",
        formname:"Mega Alakazam",
        gen:6,
        release:"x-y",
        type1:"psychic",
        type2:null,
        stats:{ hp:55,
          attack:50,
          defense:65,
          spatk:175,
          spdef:105,
          speed:150 },
        species:"Psi",
        height:1.2,
        weight:48,
        gender:"2:6",
        "catch-rate":50,
        "base-exp":270,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      machop:{ pokemonid:"machop",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fighting",
        type2:null,
        stats:{ hp:70,
          attack:80,
          defense:50,
          spatk:35,
          spdef:35,
          speed:35 },
        species:"Superpower",
        height:0.8,
        weight:19.5,
        gender:"2:6",
        "catch-rate":180,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      machoke:{ pokemonid:"machoke",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fighting",
        type2:null,
        stats:{ hp:80,
          attack:100,
          defense:70,
          spatk:50,
          spdef:60,
          speed:45 },
        species:"Superpower",
        height:1.5,
        weight:70.5,
        gender:"2:6",
        "catch-rate":90,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      machamp:{ pokemonid:"machamp",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fighting",
        type2:null,
        stats:{ hp:90,
          attack:130,
          defense:80,
          spatk:65,
          spdef:85,
          speed:55 },
        species:"Superpower",
        height:1.6,
        weight:130,
        gender:"2:6",
        "catch-rate":45,
        "base-exp":227,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      bellsprout:{ pokemonid:"bellsprout",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"poison",
        stats:{ hp:50,
          attack:75,
          defense:35,
          spatk:70,
          spdef:30,
          speed:40 },
        species:"Flower",
        height:0.7,
        weight:4,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      weepinbell:{ pokemonid:"weepinbell",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"poison",
        stats:{ hp:65,
          attack:90,
          defense:50,
          spatk:85,
          spdef:45,
          speed:55 },
        species:"Flycatcher",
        height:1,
        weight:6.4,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":137,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      victreebel:{ pokemonid:"victreebel",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"poison",
        stats:{ hp:80,
          attack:105,
          defense:65,
          spatk:100,
          spdef:70,
          speed:70 },
        species:"Flycatcher",
        height:1.7,
        weight:15.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":221,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      tentacool:{ pokemonid:"tentacool",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:"poison",
        stats:{ hp:40,
          attack:40,
          defense:35,
          spatk:50,
          spdef:100,
          speed:70 },
        species:"Jellyfish",
        height:0.9,
        weight:45.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":67,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spdef:1 } },
      tentacruel:{ pokemonid:"tentacruel",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:"poison",
        stats:{ hp:80,
          attack:70,
          defense:65,
          spatk:80,
          spdef:120,
          speed:100 },
        species:"Jellyfish",
        height:1.6,
        weight:55,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":180,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spdef:2 } },
      geodude:{ pokemonid:"geodude",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"rock",
        type2:"ground",
        stats:{ hp:40,
          attack:80,
          defense:100,
          spatk:30,
          spdef:30,
          speed:20 },
        species:"Rock",
        height:0.4,
        weight:20,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":60,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      "geodude-alolan":{ pokemonid:"geodude",
        formid:"alolan",
        formname:"Alolan Geodude",
        gen:7,
        release:"sun-moon",
        type1:"rock",
        type2:"electric",
        stats:{ hp:40,
          attack:80,
          defense:100,
          spatk:30,
          spdef:30,
          speed:20 },
        species:"Rock",
        height:0.4,
        weight:20.3,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":60,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      graveler:{ pokemonid:"graveler",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"rock",
        type2:"ground",
        stats:{ hp:55,
          attack:95,
          defense:115,
          spatk:45,
          spdef:45,
          speed:35 },
        species:"Rock",
        height:1,
        weight:105,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":137,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:2 } },
      "graveler-alolan":{ pokemonid:"graveler",
        formid:"alolan",
        formname:"Alolan Graveler",
        gen:7,
        release:"sun-moon",
        type1:"rock",
        type2:"electric",
        stats:{ hp:55,
          attack:95,
          defense:115,
          spatk:45,
          spdef:45,
          speed:35 },
        species:"Rock",
        height:1,
        weight:110,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":137,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:2 } },
      golem:{ pokemonid:"golem",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"rock",
        type2:"ground",
        stats:{ hp:80,
          attack:120,
          defense:130,
          spatk:55,
          spdef:65,
          speed:45 },
        species:"Megaton",
        height:1.4,
        weight:300,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":223,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:3 } },
      "golem-alolan":{ pokemonid:"golem",
        formid:"alolan",
        formname:"Alolan Golem",
        gen:7,
        release:"sun-moon",
        type1:"rock",
        type2:"electric",
        stats:{ hp:80,
          attack:120,
          defense:130,
          spatk:55,
          spdef:65,
          speed:45 },
        species:"Megaton",
        height:1.7,
        weight:316,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":223,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:3 } },
      ponyta:{ pokemonid:"ponyta",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:null,
        stats:{ hp:50,
          attack:85,
          defense:55,
          spatk:65,
          spdef:65,
          speed:90 },
        species:"Fire Horse",
        height:1,
        weight:30,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":82,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      "ponyta-galarian":{ pokemonid:"ponyta",
        formid:"galarian",
        formname:"Galarian Ponyta",
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:null,
        stats:{ hp:50,
          attack:85,
          defense:55,
          spatk:65,
          spdef:65,
          speed:90 },
        species:"Unique Horn",
        height:0.8,
        weight:24,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      rapidash:{ pokemonid:"rapidash",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:null,
        stats:{ hp:65,
          attack:100,
          defense:70,
          spatk:80,
          spdef:80,
          speed:105 },
        species:"Fire Horse",
        height:1.7,
        weight:95,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "rapidash-galarian":{ pokemonid:"rapidash",
        formid:"galarian",
        formname:"Galarian Rapidash",
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:"fairy",
        stats:{ hp:65,
          attack:100,
          defense:70,
          spatk:80,
          spdef:80,
          speed:105 },
        species:"Unique Horn",
        height:1.7,
        weight:80,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      slowpoke:{ pokemonid:"slowpoke",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:"psychic",
        stats:{ hp:90,
          attack:65,
          defense:65,
          spatk:40,
          spdef:40,
          speed:15 },
        species:"Dopey",
        height:1.2,
        weight:36,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      "slowpoke-galarian":{ pokemonid:"slowpoke",
        formid:"galarian",
        formname:"Galarian Slowpoke",
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:null,
        stats:{ hp:90,
          attack:65,
          defense:65,
          spatk:40,
          spdef:40,
          speed:15 },
        species:"Dopey",
        height:1.2,
        weight:36,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      slowbro:{ pokemonid:"slowbro",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:"psychic",
        stats:{ hp:95,
          attack:75,
          defense:110,
          spatk:100,
          spdef:80,
          speed:30 },
        species:"Hermit Crab",
        height:1.6,
        weight:78.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "slowbro-mega":{ pokemonid:"slowbro",
        formid:"mega",
        formname:"Mega Slowbro",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"water",
        type2:"psychic",
        stats:{ hp:95,
          attack:75,
          defense:180,
          spatk:130,
          spdef:80,
          speed:30 },
        species:"Hermit Crab",
        height:2,
        weight:120,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":207,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "slowbro-galarian":{ pokemonid:"slowbro",
        formid:"galarian",
        formname:"Galarian Slowbro",
        gen:8,
        release:"sword-shield",
        type1:"poison",
        type2:"psychic",
        stats:{ hp:95,
          attack:100,
          defense:95,
          spatk:100,
          spdef:70,
          speed:30 },
        species:"Hermit Crab",
        height:1.6,
        weight:70.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      magnemite:{ pokemonid:"magnemite",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"electric",
        type2:"steel",
        stats:{ hp:25,
          attack:35,
          defense:70,
          spatk:95,
          spdef:55,
          speed:45 },
        species:"Magnet",
        height:0.3,
        weight:6,
        gender:"genderless",
        "catch-rate":190,
        "base-exp":65,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      magneton:{ pokemonid:"magneton",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"electric",
        type2:"steel",
        stats:{ hp:50,
          attack:60,
          defense:95,
          spatk:120,
          spdef:70,
          speed:70 },
        species:"Magnet",
        height:1,
        weight:60,
        gender:"genderless",
        "catch-rate":60,
        "base-exp":163,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      farfetchd:{ pokemonid:"farfetchd",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:"flying",
        stats:{ hp:52,
          attack:90,
          defense:55,
          spatk:58,
          spdef:62,
          speed:60 },
        species:"Wild Duck",
        height:0.8,
        weight:15,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":132,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      "farfetchd-galarian":{ pokemonid:"farfetchd",
        formid:"galarian",
        formname:"Galarian Farfetch'd",
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:null,
        stats:{ hp:52,
          attack:95,
          defense:55,
          spatk:58,
          spdef:62,
          speed:55 },
        species:"Wild Duck",
        height:0.8,
        weight:42,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      doduo:{ pokemonid:"doduo",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:"flying",
        stats:{ hp:35,
          attack:85,
          defense:45,
          spatk:35,
          spdef:35,
          speed:75 },
        species:"Twin Bird",
        height:1.4,
        weight:39.2,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      dodrio:{ pokemonid:"dodrio",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:"flying",
        stats:{ hp:60,
          attack:110,
          defense:70,
          spatk:60,
          spdef:60,
          speed:110 },
        species:"Triple Bird",
        height:1.8,
        weight:85.2,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":165,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      seel:{ pokemonid:"seel",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:65,
          attack:45,
          defense:55,
          spatk:45,
          spdef:70,
          speed:45 },
        species:"Sea Lion",
        height:1.1,
        weight:90,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":65,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      dewgong:{ pokemonid:"dewgong",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:"ice",
        stats:{ hp:90,
          attack:70,
          defense:80,
          spatk:70,
          spdef:95,
          speed:70 },
        species:"Sea Lion",
        height:1.7,
        weight:120,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":166,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      grimer:{ pokemonid:"grimer",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:null,
        stats:{ hp:80,
          attack:80,
          defense:50,
          spatk:40,
          spdef:50,
          speed:25 },
        species:"Sludge",
        height:0.9,
        weight:30,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":65,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      "grimer-alolan":{ pokemonid:"grimer",
        formid:"alolan",
        formname:"Alolan Grimer",
        gen:7,
        release:"sun-moon",
        type1:"poison",
        type2:"dark",
        stats:{ hp:80,
          attack:80,
          defense:50,
          spatk:40,
          spdef:50,
          speed:25 },
        species:"Sludge",
        height:0.7,
        weight:42,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":65,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      muk:{ pokemonid:"muk",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:null,
        stats:{ hp:105,
          attack:105,
          defense:75,
          spatk:65,
          spdef:100,
          speed:50 },
        species:"Sludge",
        height:1.2,
        weight:30,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1,
          attack:1 } },
      "muk-alolan":{ pokemonid:"muk",
        formid:"alolan",
        formname:"Alolan Muk",
        gen:7,
        release:"sun-moon",
        type1:"poison",
        type2:"dark",
        stats:{ hp:105,
          attack:105,
          defense:75,
          spatk:65,
          spdef:100,
          speed:50 },
        species:"Sludge",
        height:1,
        weight:52,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1,
          attack:1 } },
      shellder:{ pokemonid:"shellder",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:30,
          attack:65,
          defense:100,
          spatk:45,
          spdef:25,
          speed:40 },
        species:"Bivalve",
        height:0.3,
        weight:4,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:1 } },
      cloyster:{ pokemonid:"cloyster",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:"ice",
        stats:{ hp:50,
          attack:95,
          defense:180,
          spatk:85,
          spdef:45,
          speed:70 },
        species:"Bivalve",
        height:1.5,
        weight:132.5,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":184,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      gastly:{ pokemonid:"gastly",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ghost",
        type2:"poison",
        stats:{ hp:30,
          attack:35,
          defense:30,
          spatk:100,
          spdef:35,
          speed:80 },
        species:"Gas",
        height:1.3,
        weight:0.1,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      haunter:{ pokemonid:"haunter",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ghost",
        type2:"poison",
        stats:{ hp:45,
          attack:50,
          defense:45,
          spatk:115,
          spdef:55,
          speed:95 },
        species:"Gas",
        height:1.6,
        weight:0.1,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      gengar:{ pokemonid:"gengar",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ghost",
        type2:"poison",
        stats:{ hp:60,
          attack:65,
          defense:60,
          spatk:130,
          spdef:75,
          speed:110 },
        species:"Shadow",
        height:1.5,
        weight:40.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":225,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      "gengar-mega":{ pokemonid:"gengar",
        formid:"mega",
        formname:"Mega Gengar",
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"poison",
        stats:{ hp:60,
          attack:65,
          defense:80,
          spatk:170,
          spdef:95,
          speed:130 },
        species:"Shadow",
        height:1.4,
        weight:40.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      onix:{ pokemonid:"onix",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"rock",
        type2:"ground",
        stats:{ hp:35,
          attack:45,
          defense:160,
          spatk:30,
          spdef:45,
          speed:70 },
        species:"Rock Snake",
        height:8.8,
        weight:210,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":77,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      drowzee:{ pokemonid:"drowzee",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"psychic",
        type2:null,
        stats:{ hp:60,
          attack:48,
          defense:45,
          spatk:43,
          spdef:90,
          speed:42 },
        species:"Hypnosis",
        height:1,
        weight:32.4,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      hypno:{ pokemonid:"hypno",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"psychic",
        type2:null,
        stats:{ hp:85,
          attack:73,
          defense:70,
          spatk:73,
          spdef:115,
          speed:67 },
        species:"Hypnosis",
        height:1.6,
        weight:75.6,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":169,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      krabby:{ pokemonid:"krabby",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:30,
          attack:105,
          defense:90,
          spatk:25,
          spdef:25,
          speed:50 },
        species:"River Crab",
        height:0.4,
        weight:6.5,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":65,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      kingler:{ pokemonid:"kingler",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:55,
          attack:130,
          defense:115,
          spatk:50,
          spdef:50,
          speed:75 },
        species:"Pincer",
        height:1.3,
        weight:60,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":166,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      voltorb:{ pokemonid:"voltorb",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"electric",
        type2:null,
        stats:{ hp:40,
          attack:30,
          defense:50,
          spatk:55,
          spdef:55,
          speed:100 },
        species:"Ball",
        height:0.5,
        weight:10.4,
        gender:"genderless",
        "catch-rate":190,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      electrode:{ pokemonid:"electrode",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"electric",
        type2:null,
        stats:{ hp:60,
          attack:50,
          defense:70,
          spatk:80,
          spdef:80,
          speed:150 },
        species:"Ball",
        height:1.2,
        weight:66.6,
        gender:"genderless",
        "catch-rate":60,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      exeggcute:{ pokemonid:"exeggcute",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"psychic",
        stats:{ hp:60,
          attack:40,
          defense:80,
          spatk:60,
          spdef:45,
          speed:40 },
        species:"Egg",
        height:0.4,
        weight:2.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":65,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:1 } },
      exeggutor:{ pokemonid:"exeggutor",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:"psychic",
        stats:{ hp:95,
          attack:95,
          defense:85,
          spatk:125,
          spdef:75,
          speed:55 },
        species:"Coconut",
        height:2,
        weight:120,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":186,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spatk:2 } },
      "exeggutor-alolan":{ pokemonid:"exeggutor",
        formid:"alolan",
        formname:"Alolan Exeggutor",
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:"dragon",
        stats:{ hp:95,
          attack:105,
          defense:85,
          spatk:125,
          spdef:75,
          speed:45 },
        species:"Coconut",
        height:10.9,
        weight:415.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":186,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spatk:2 } },
      cubone:{ pokemonid:"cubone",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ground",
        type2:null,
        stats:{ hp:50,
          attack:50,
          defense:95,
          spatk:40,
          spdef:50,
          speed:35 },
        species:"Lonely",
        height:0.4,
        weight:6.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      marowak:{ pokemonid:"marowak",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ground",
        type2:null,
        stats:{ hp:60,
          attack:80,
          defense:110,
          spatk:50,
          spdef:80,
          speed:45 },
        species:"Bone Keeper",
        height:1,
        weight:45,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":149,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "marowak-alolan":{ pokemonid:"marowak",
        formid:"alolan",
        formname:"Alolan Marowak",
        gen:7,
        release:"sun-moon",
        type1:"fire",
        type2:"ghost",
        stats:{ hp:60,
          attack:80,
          defense:110,
          spatk:50,
          spdef:80,
          speed:45 },
        species:"Bone Keeper",
        height:1,
        weight:34,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":149,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      hitmonlee:{ pokemonid:"hitmonlee",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fighting",
        type2:null,
        stats:{ hp:50,
          attack:120,
          defense:53,
          spatk:35,
          spdef:110,
          speed:87 },
        species:"Kicking",
        height:1.5,
        weight:49.8,
        gender:0,
        "catch-rate":45,
        "base-exp":159,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      hitmonchan:{ pokemonid:"hitmonchan",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fighting",
        type2:null,
        stats:{ hp:50,
          attack:105,
          defense:79,
          spatk:35,
          spdef:110,
          speed:76 },
        species:"Punching",
        height:1.4,
        weight:50.2,
        gender:0,
        "catch-rate":45,
        "base-exp":159,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      lickitung:{ pokemonid:"lickitung",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:90,
          attack:55,
          defense:75,
          spatk:60,
          spdef:75,
          speed:30 },
        species:"Licking",
        height:1.2,
        weight:65.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":77,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      koffing:{ pokemonid:"koffing",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:null,
        stats:{ hp:40,
          attack:65,
          defense:95,
          spatk:60,
          spdef:45,
          speed:35 },
        species:"Poison Gas",
        height:0.6,
        weight:1,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":68,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      weezing:{ pokemonid:"weezing",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"poison",
        type2:null,
        stats:{ hp:65,
          attack:90,
          defense:120,
          spatk:85,
          spdef:70,
          speed:60 },
        species:"Poison Gas",
        height:1.2,
        weight:9.5,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "weezing-galarian":{ pokemonid:"weezing",
        formid:"galarian",
        formname:"Galarian Weezing",
        gen:8,
        release:"sword-shield",
        type1:"poison",
        type2:"fairy",
        stats:{ hp:65,
          attack:90,
          defense:120,
          spatk:85,
          spdef:70,
          speed:60 },
        species:"Poison Gas",
        height:3,
        weight:16,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      rhyhorn:{ pokemonid:"rhyhorn",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ground",
        type2:"rock",
        stats:{ hp:80,
          attack:85,
          defense:95,
          spatk:30,
          spdef:30,
          speed:25 },
        species:"Spikes",
        height:1,
        weight:115,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":69,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:1 } },
      rhydon:{ pokemonid:"rhydon",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ground",
        type2:"rock",
        stats:{ hp:105,
          attack:130,
          defense:120,
          spatk:45,
          spdef:45,
          speed:40 },
        species:"Drill",
        height:1.9,
        weight:120,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":170,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      chansey:{ pokemonid:"chansey",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:250,
          attack:5,
          defense:5,
          spatk:35,
          spdef:105,
          speed:50 },
        species:"Egg",
        height:1.1,
        weight:34.6,
        gender:"8:0",
        "catch-rate":30,
        "base-exp":395,
        "egg-cycles":40,
        friendship:140,
        "growth-rate":"fast",
        "ev-yield":{ hp:2 } },
      tangela:{ pokemonid:"tangela",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"grass",
        type2:null,
        stats:{ hp:65,
          attack:55,
          defense:115,
          spatk:100,
          spdef:40,
          speed:60 },
        species:"Vine",
        height:1,
        weight:35,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":87,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      kangaskhan:{ pokemonid:"kangaskhan",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:105,
          attack:95,
          defense:80,
          spatk:40,
          spdef:80,
          speed:90 },
        species:"Parent",
        height:2.2,
        weight:80,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      "kangaskhan-mega":{ pokemonid:"kangaskhan",
        formid:"mega",
        formname:"Mega Kangaskhan",
        gen:6,
        release:"x-y",
        type1:"normal",
        type2:null,
        stats:{ hp:105,
          attack:125,
          defense:100,
          spatk:60,
          spdef:100,
          speed:100 },
        species:"Parent",
        height:2.2,
        weight:100,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":207,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      horsea:{ pokemonid:"horsea",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:30,
          attack:40,
          defense:70,
          spatk:70,
          spdef:25,
          speed:60 },
        species:"Dragon",
        height:0.4,
        weight:8,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":59,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      seadra:{ pokemonid:"seadra",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:55,
          attack:65,
          defense:95,
          spatk:95,
          spdef:45,
          speed:85 },
        species:"Dragon",
        height:1.2,
        weight:25,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":154,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1,
          spatk:1 } },
      goldeen:{ pokemonid:"goldeen",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:45,
          attack:67,
          defense:60,
          spatk:35,
          spdef:50,
          speed:63 },
        species:"Goldfish",
        height:0.6,
        weight:15,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      seaking:{ pokemonid:"seaking",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:80,
          attack:92,
          defense:65,
          spatk:65,
          spdef:80,
          speed:68 },
        species:"Goldfish",
        height:1.3,
        weight:39,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":158,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      staryu:{ pokemonid:"staryu",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:30,
          attack:45,
          defense:55,
          spatk:70,
          spdef:55,
          speed:85 },
        species:"Star Shape",
        height:0.8,
        weight:34.5,
        gender:"genderless",
        "catch-rate":225,
        "base-exp":68,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:1 } },
      starmie:{ pokemonid:"starmie",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:"psychic",
        stats:{ hp:60,
          attack:75,
          defense:85,
          spatk:100,
          spdef:85,
          speed:115 },
        species:"Mysterious",
        height:1.1,
        weight:80,
        gender:"genderless",
        "catch-rate":60,
        "base-exp":182,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:2 } },
      "mr-mime":{ pokemonid:"mr-mime",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"psychic",
        type2:"fairy",
        stats:{ hp:40,
          attack:45,
          defense:65,
          spatk:100,
          spdef:120,
          speed:90 },
        species:"Barrier",
        height:1.3,
        weight:54.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":161,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      "mr-mime-galarian":{ pokemonid:"mr-mime",
        formid:"galarian",
        formname:"Galarian Mr. Mime",
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:"ice",
        stats:{ hp:50,
          attack:65,
          defense:65,
          spatk:90,
          spdef:90,
          speed:100 },
        species:"Dancing",
        height:1.4,
        weight:56.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      scyther:{ pokemonid:"scyther",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:"flying",
        stats:{ hp:70,
          attack:110,
          defense:80,
          spatk:55,
          spdef:80,
          speed:105 },
        species:"Mantis",
        height:1.5,
        weight:56,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":100,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      jynx:{ pokemonid:"jynx",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ice",
        type2:"psychic",
        stats:{ hp:65,
          attack:50,
          defense:35,
          spatk:115,
          spdef:95,
          speed:95 },
        species:"Human Shape",
        height:1.4,
        weight:40.6,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":159,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      electabuzz:{ pokemonid:"electabuzz",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"electric",
        type2:null,
        stats:{ hp:65,
          attack:83,
          defense:57,
          spatk:95,
          spdef:85,
          speed:105 },
        species:"Electric",
        height:1.1,
        weight:30,
        gender:"2:6",
        "catch-rate":45,
        "base-exp":172,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      magmar:{ pokemonid:"magmar",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:null,
        stats:{ hp:65,
          attack:95,
          defense:57,
          spatk:100,
          spdef:85,
          speed:93 },
        species:"Spitfire",
        height:1.3,
        weight:44.5,
        gender:"2:6",
        "catch-rate":45,
        "base-exp":173,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      pinsir:{ pokemonid:"pinsir",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"bug",
        type2:null,
        stats:{ hp:65,
          attack:125,
          defense:100,
          spatk:55,
          spdef:70,
          speed:85 },
        species:"Stag Beetle",
        height:1.5,
        weight:55,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":175,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      "pinsir-mega":{ pokemonid:"pinsir",
        formid:"mega",
        formname:"Mega Pinsir",
        gen:6,
        release:"x-y",
        type1:"bug",
        type2:"flying",
        stats:{ hp:65,
          attack:155,
          defense:120,
          spatk:65,
          spdef:90,
          speed:105 },
        species:"Stag Beetle",
        height:1.7,
        weight:59,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":210,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      tauros:{ pokemonid:"tauros",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:75,
          attack:100,
          defense:95,
          spatk:40,
          spdef:70,
          speed:110 },
        species:"Wild Bull",
        height:1.4,
        weight:88.4,
        gender:0,
        "catch-rate":45,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          speed:1 } },
      magikarp:{ pokemonid:"magikarp",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:20,
          attack:10,
          defense:55,
          spatk:15,
          spdef:20,
          speed:80 },
        species:"Fish",
        height:0.9,
        weight:10,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":40,
        "egg-cycles":5,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:1 } },
      gyarados:{ pokemonid:"gyarados",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:"flying",
        stats:{ hp:95,
          attack:125,
          defense:79,
          spatk:60,
          spdef:100,
          speed:81 },
        species:"Atrocious",
        height:6.5,
        weight:235,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":189,
        "egg-cycles":5,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      "gyarados-mega":{ pokemonid:"gyarados",
        formid:"mega",
        formname:"Mega Gyarados",
        gen:6,
        release:"x-y",
        type1:"water",
        type2:"dark",
        stats:{ hp:95,
          attack:155,
          defense:109,
          spatk:70,
          spdef:130,
          speed:81 },
        species:"Atrocious",
        height:6.5,
        weight:305,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":224,
        "egg-cycles":5,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      lapras:{ pokemonid:"lapras",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:"ice",
        stats:{ hp:130,
          attack:85,
          defense:80,
          spatk:85,
          spdef:95,
          speed:60 },
        species:"Transport",
        height:2.5,
        weight:220,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":187,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:2 } },
      ditto:{ pokemonid:"ditto",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:48,
          attack:48,
          defense:48,
          spatk:48,
          spdef:48,
          speed:48 },
        species:"Transform",
        height:0.3,
        weight:4,
        gender:"genderless",
        "catch-rate":35,
        "base-exp":101,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      eevee:{ pokemonid:"eevee",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:55,
          attack:55,
          defense:50,
          spatk:45,
          spdef:65,
          speed:55 },
        species:"Evolution",
        height:0.3,
        weight:6.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":65,
        "egg-cycles":35,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      "eevee-lets-go":{ pokemonid:"eevee",
        formid:"lets-go",
        formname:"Partner Eevee",
        gen:7,
        release:"lets-go-pikachu-eevee",
        type1:"normal",
        type2:null,
        stats:{ hp:65,
          attack:75,
          defense:70,
          spatk:65,
          spdef:85,
          speed:75 },
        species:"Evolution",
        height:0.3,
        weight:6.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":65,
        "egg-cycles":35,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      vaporeon:{ pokemonid:"vaporeon",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"water",
        type2:null,
        stats:{ hp:130,
          attack:65,
          defense:60,
          spatk:110,
          spdef:95,
          speed:65 },
        species:"Bubble Jet",
        height:1,
        weight:29,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":184,
        "egg-cycles":35,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      jolteon:{ pokemonid:"jolteon",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"electric",
        type2:null,
        stats:{ hp:65,
          attack:65,
          defense:60,
          spatk:110,
          spdef:95,
          speed:130 },
        species:"Lightning",
        height:0.8,
        weight:24.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":184,
        "egg-cycles":35,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      flareon:{ pokemonid:"flareon",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:null,
        stats:{ hp:65,
          attack:130,
          defense:60,
          spatk:95,
          spdef:110,
          speed:65 },
        species:"Flame",
        height:0.9,
        weight:25,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":184,
        "egg-cycles":35,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      porygon:{ pokemonid:"porygon",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:65,
          attack:60,
          defense:70,
          spatk:85,
          spdef:75,
          speed:40 },
        species:"Virtual",
        height:0.8,
        weight:36.5,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":79,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      omanyte:{ pokemonid:"omanyte",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"rock",
        type2:"water",
        stats:{ hp:35,
          attack:40,
          defense:100,
          spatk:90,
          spdef:55,
          speed:35 },
        species:"Spiral",
        height:0.4,
        weight:7.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":71,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      omastar:{ pokemonid:"omastar",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"rock",
        type2:"water",
        stats:{ hp:70,
          attack:60,
          defense:125,
          spatk:115,
          spdef:70,
          speed:55 },
        species:"Spiral",
        height:1,
        weight:35,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":173,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      kabuto:{ pokemonid:"kabuto",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"rock",
        type2:"water",
        stats:{ hp:30,
          attack:80,
          defense:90,
          spatk:55,
          spdef:45,
          speed:55 },
        species:"Shellfish",
        height:0.5,
        weight:11.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":71,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      kabutops:{ pokemonid:"kabutops",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"rock",
        type2:"water",
        stats:{ hp:60,
          attack:115,
          defense:105,
          spatk:65,
          spdef:70,
          speed:80 },
        species:"Shellfish",
        height:1.3,
        weight:40.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":173,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      aerodactyl:{ pokemonid:"aerodactyl",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"rock",
        type2:"flying",
        stats:{ hp:80,
          attack:105,
          defense:65,
          spatk:60,
          spdef:75,
          speed:130 },
        species:"Fossil",
        height:1.8,
        weight:59,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":180,
        "egg-cycles":35,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:2 } },
      "aerodactyl-mega":{ pokemonid:"aerodactyl",
        formid:"mega",
        formname:"Mega Aerodactyl",
        gen:6,
        release:"x-y",
        type1:"rock",
        type2:"flying",
        stats:{ hp:80,
          attack:135,
          defense:85,
          spatk:70,
          spdef:95,
          speed:150 },
        species:"Fossil",
        height:2.1,
        weight:79,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":215,
        "egg-cycles":35,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:2 } },
      snorlax:{ pokemonid:"snorlax",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"normal",
        type2:null,
        stats:{ hp:160,
          attack:110,
          defense:65,
          spatk:65,
          spdef:110,
          speed:30 },
        species:"Sleeping",
        height:2.1,
        weight:460,
        gender:"1:7",
        "catch-rate":25,
        "base-exp":189,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:2 } },
      articuno:{ pokemonid:"articuno",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"ice",
        type2:"flying",
        stats:{ hp:90,
          attack:85,
          defense:100,
          spatk:95,
          spdef:125,
          speed:85 },
        species:"Freeze",
        height:1.7,
        weight:55.4,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      "articuno-galarian":{ pokemonid:"articuno",
        formid:"galarian",
        formname:"Galarian Articuno",
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:"flying",
        stats:{ hp:90,
          attack:85,
          defense:85,
          spatk:125,
          spdef:100,
          speed:95 },
        species:"Cruel",
        height:1.7,
        weight:50.9,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      zapdos:{ pokemonid:"zapdos",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"electric",
        type2:"flying",
        stats:{ hp:90,
          attack:90,
          defense:85,
          spatk:125,
          spdef:90,
          speed:100 },
        species:"Electric",
        height:1.6,
        weight:52.6,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "zapdos-galarian":{ pokemonid:"zapdos",
        formid:"galarian",
        formname:"Galarian Zapdos",
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:"flying",
        stats:{ hp:90,
          attack:125,
          defense:90,
          spatk:85,
          spdef:90,
          speed:100 },
        species:"Strong Legs",
        height:1.6,
        weight:58.2,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      moltres:{ pokemonid:"moltres",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"fire",
        type2:"flying",
        stats:{ hp:90,
          attack:100,
          defense:90,
          spatk:125,
          spdef:85,
          speed:90 },
        species:"Flame",
        height:2,
        weight:60,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "moltres-galarian":{ pokemonid:"moltres",
        formid:"galarian",
        formname:"Galarian Moltres",
        gen:8,
        release:"sword-shield",
        type1:"dark",
        type2:"flying",
        stats:{ hp:90,
          attack:85,
          defense:90,
          spatk:100,
          spdef:125,
          speed:90 },
        species:"Malevolent",
        height:2,
        weight:66,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      dratini:{ pokemonid:"dratini",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"dragon",
        type2:null,
        stats:{ hp:41,
          attack:64,
          defense:45,
          spatk:50,
          spdef:50,
          speed:50 },
        species:"Dragon",
        height:1.8,
        weight:3.3,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":60,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      dragonair:{ pokemonid:"dragonair",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"dragon",
        type2:null,
        stats:{ hp:61,
          attack:84,
          defense:65,
          spatk:70,
          spdef:70,
          speed:70 },
        species:"Dragon",
        height:4,
        weight:16.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      dragonite:{ pokemonid:"dragonite",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"dragon",
        type2:"flying",
        stats:{ hp:91,
          attack:134,
          defense:95,
          spatk:100,
          spdef:100,
          speed:80 },
        species:"Dragon",
        height:2.2,
        weight:210,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      mewtwo:{ pokemonid:"mewtwo",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"psychic",
        type2:null,
        stats:{ hp:106,
          attack:110,
          defense:90,
          spatk:154,
          spdef:90,
          speed:130 },
        species:"Genetic",
        height:2,
        weight:122,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "mewtwo-mega-x":{ pokemonid:"mewtwo",
        formid:"mega-x",
        formname:"Mega Mewtwo X",
        gen:6,
        release:"x-y",
        type1:"psychic",
        type2:"fighting",
        stats:{ hp:106,
          attack:190,
          defense:100,
          spatk:154,
          spdef:100,
          speed:130 },
        species:"Genetic",
        height:2.3,
        weight:127,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":351,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "mewtwo-mega-y":{ pokemonid:"mewtwo",
        formid:"mega-y",
        formname:"Mega Mewtwo Y",
        gen:6,
        release:"x-y",
        type1:"psychic",
        type2:null,
        stats:{ hp:106,
          attack:150,
          defense:70,
          spatk:194,
          spdef:120,
          speed:140 },
        species:"Genetic",
        height:1.5,
        weight:33,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":351,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      mew:{ pokemonid:"mew",
        formid:null,
        formname:null,
        gen:1,
        release:"red-blue",
        type1:"psychic",
        type2:null,
        stats:{ hp:100,
          attack:100,
          defense:100,
          spatk:100,
          spdef:100,
          speed:100 },
        species:"New Species",
        height:0.4,
        weight:4,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:3 } },
      chikorita:{ pokemonid:"chikorita",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"grass",
        type2:null,
        stats:{ hp:45,
          attack:49,
          defense:65,
          spatk:49,
          spdef:65,
          speed:45 },
        species:"Leaf",
        height:0.9,
        weight:6.4,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:1 } },
      bayleef:{ pokemonid:"bayleef",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"grass",
        type2:null,
        stats:{ hp:60,
          attack:62,
          defense:80,
          spatk:63,
          spdef:80,
          speed:60 },
        species:"Leaf",
        height:1.2,
        weight:15.8,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1,
          spdef:1 } },
      meganium:{ pokemonid:"meganium",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"grass",
        type2:null,
        stats:{ hp:80,
          attack:82,
          defense:100,
          spatk:83,
          spdef:100,
          speed:80 },
        species:"Herb",
        height:1.8,
        weight:100.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":236,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1,
          spdef:2 } },
      cyndaquil:{ pokemonid:"cyndaquil",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fire",
        type2:null,
        stats:{ hp:39,
          attack:52,
          defense:43,
          spatk:60,
          spdef:50,
          speed:65 },
        species:"Fire Mouse",
        height:0.5,
        weight:7.9,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      quilava:{ pokemonid:"quilava",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fire",
        type2:null,
        stats:{ hp:58,
          attack:64,
          defense:58,
          spatk:80,
          spdef:65,
          speed:80 },
        species:"Volcano",
        height:0.9,
        weight:19,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1,
          speed:1 } },
      typhlosion:{ pokemonid:"typhlosion",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fire",
        type2:null,
        stats:{ hp:78,
          attack:84,
          defense:78,
          spatk:109,
          spdef:85,
          speed:100 },
        species:"Volcano",
        height:1.7,
        weight:79.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":240,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      totodile:{ pokemonid:"totodile",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:null,
        stats:{ hp:50,
          attack:65,
          defense:64,
          spatk:44,
          spdef:48,
          speed:43 },
        species:"Big Jaw",
        height:0.6,
        weight:9.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      croconaw:{ pokemonid:"croconaw",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:null,
        stats:{ hp:65,
          attack:80,
          defense:80,
          spatk:59,
          spdef:63,
          speed:58 },
        species:"Big Jaw",
        height:1.1,
        weight:25,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          defense:1 } },
      feraligatr:{ pokemonid:"feraligatr",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:null,
        stats:{ hp:85,
          attack:105,
          defense:100,
          spatk:79,
          spdef:83,
          speed:78 },
        species:"Big Jaw",
        height:2.3,
        weight:88.8,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2,
          defense:1 } },
      sentret:{ pokemonid:"sentret",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:35,
          attack:46,
          defense:34,
          spatk:35,
          spdef:45,
          speed:20 },
        species:"Scout",
        height:0.8,
        weight:6,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":43,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      furret:{ pokemonid:"furret",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:85,
          attack:76,
          defense:64,
          spatk:45,
          spdef:55,
          speed:90 },
        species:"Long Body",
        height:1.8,
        weight:32.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":145,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      hoothoot:{ pokemonid:"hoothoot",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:"flying",
        stats:{ hp:60,
          attack:30,
          defense:30,
          spatk:36,
          spdef:56,
          speed:50 },
        species:"Owl",
        height:0.7,
        weight:21.2,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":52,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      noctowl:{ pokemonid:"noctowl",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:"flying",
        stats:{ hp:100,
          attack:50,
          defense:50,
          spatk:86,
          spdef:96,
          speed:70 },
        species:"Owl",
        height:1.6,
        weight:40.8,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":158,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      ledyba:{ pokemonid:"ledyba",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"bug",
        type2:"flying",
        stats:{ hp:40,
          attack:20,
          defense:30,
          spatk:40,
          spdef:80,
          speed:55 },
        species:"Five Star",
        height:1,
        weight:10.8,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":53,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spdef:1 } },
      ledian:{ pokemonid:"ledian",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"bug",
        type2:"flying",
        stats:{ hp:55,
          attack:35,
          defense:50,
          spatk:55,
          spdef:110,
          speed:85 },
        species:"Five Star",
        height:1.4,
        weight:35.6,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":137,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spdef:2 } },
      spinarak:{ pokemonid:"spinarak",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"bug",
        type2:"poison",
        stats:{ hp:40,
          attack:60,
          defense:40,
          spatk:40,
          spdef:40,
          speed:30 },
        species:"String Spit",
        height:0.5,
        weight:8.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":50,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ attack:1 } },
      ariados:{ pokemonid:"ariados",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"bug",
        type2:"poison",
        stats:{ hp:70,
          attack:90,
          defense:70,
          spatk:60,
          spdef:70,
          speed:40 },
        species:"Long Leg",
        height:1.1,
        weight:33.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":140,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ attack:2 } },
      crobat:{ pokemonid:"crobat",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"poison",
        type2:"flying",
        stats:{ hp:85,
          attack:90,
          defense:80,
          spatk:70,
          spdef:80,
          speed:130 },
        species:"Bat",
        height:1.8,
        weight:75,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":241,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:3 } },
      chinchou:{ pokemonid:"chinchou",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"electric",
        stats:{ hp:75,
          attack:38,
          defense:38,
          spatk:56,
          spdef:56,
          speed:67 },
        species:"Angler",
        height:0.5,
        weight:12,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:1 } },
      lanturn:{ pokemonid:"lanturn",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"electric",
        stats:{ hp:125,
          attack:58,
          defense:58,
          spatk:76,
          spdef:76,
          speed:67 },
        species:"Light",
        height:1.2,
        weight:22.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":161,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:2 } },
      pichu:{ pokemonid:"pichu",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"electric",
        type2:null,
        stats:{ hp:20,
          attack:40,
          defense:15,
          spatk:35,
          spdef:35,
          speed:60 },
        species:"Tiny Mouse",
        height:0.3,
        weight:2,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":41,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      cleffa:{ pokemonid:"cleffa",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fairy",
        type2:null,
        stats:{ hp:50,
          attack:25,
          defense:28,
          spatk:45,
          spdef:55,
          speed:15 },
        species:"Star Shape",
        height:0.3,
        weight:3,
        gender:"6:2",
        "catch-rate":150,
        "base-exp":44,
        "egg-cycles":10,
        friendship:140,
        "growth-rate":"fast",
        "ev-yield":{ spdef:1 } },
      igglybuff:{ pokemonid:"igglybuff",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:"fairy",
        stats:{ hp:90,
          attack:30,
          defense:15,
          spatk:40,
          spdef:20,
          speed:15 },
        species:"Balloon",
        height:0.3,
        weight:1,
        gender:"6:2",
        "catch-rate":170,
        "base-exp":42,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:1 } },
      togepi:{ pokemonid:"togepi",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fairy",
        type2:null,
        stats:{ hp:35,
          attack:20,
          defense:65,
          spatk:40,
          spdef:65,
          speed:20 },
        species:"Spike Ball",
        height:0.3,
        weight:1.5,
        gender:"1:7",
        "catch-rate":190,
        "base-exp":49,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spdef:1 } },
      togetic:{ pokemonid:"togetic",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fairy",
        type2:"flying",
        stats:{ hp:55,
          attack:40,
          defense:85,
          spatk:80,
          spdef:105,
          speed:40 },
        species:"Happiness",
        height:0.6,
        weight:3.2,
        gender:"1:7",
        "catch-rate":75,
        "base-exp":142,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spdef:2 } },
      natu:{ pokemonid:"natu",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"psychic",
        type2:"flying",
        stats:{ hp:40,
          attack:50,
          defense:45,
          spatk:70,
          spdef:45,
          speed:70 },
        species:"Tiny Bird",
        height:0.2,
        weight:2,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      xatu:{ pokemonid:"xatu",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"psychic",
        type2:"flying",
        stats:{ hp:65,
          attack:75,
          defense:70,
          spatk:95,
          spdef:70,
          speed:95 },
        species:"Mystic",
        height:1.5,
        weight:15,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":165,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1,
          speed:1 } },
      mareep:{ pokemonid:"mareep",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"electric",
        type2:null,
        stats:{ hp:55,
          attack:40,
          defense:40,
          spatk:65,
          spdef:45,
          speed:35 },
        species:"Wool",
        height:0.6,
        weight:7.8,
        gender:"4:4",
        "catch-rate":235,
        "base-exp":56,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      flaaffy:{ pokemonid:"flaaffy",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"electric",
        type2:null,
        stats:{ hp:70,
          attack:55,
          defense:55,
          spatk:80,
          spdef:60,
          speed:45 },
        species:"Wool",
        height:0.8,
        weight:13.3,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":128,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      ampharos:{ pokemonid:"ampharos",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"electric",
        type2:null,
        stats:{ hp:90,
          attack:75,
          defense:85,
          spatk:115,
          spdef:90,
          speed:55 },
        species:"Light",
        height:1.4,
        weight:61.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":230,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      "ampharos-mega":{ pokemonid:"ampharos",
        formid:"mega",
        formname:"Mega Ampharos",
        gen:6,
        release:"x-y",
        type1:"electric",
        type2:"dragon",
        stats:{ hp:90,
          attack:95,
          defense:105,
          spatk:165,
          spdef:110,
          speed:45 },
        species:"Light",
        height:1.4,
        weight:61.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":275,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      bellossom:{ pokemonid:"bellossom",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"grass",
        type2:null,
        stats:{ hp:75,
          attack:80,
          defense:95,
          spatk:90,
          spdef:100,
          speed:50 },
        species:"Flower",
        height:0.4,
        weight:5.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":221,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:3 } },
      marill:{ pokemonid:"marill",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"fairy",
        stats:{ hp:70,
          attack:20,
          defense:50,
          spatk:20,
          spdef:50,
          speed:40 },
        species:"Aqua Mouse",
        height:0.4,
        weight:8.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":88,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:2 } },
      azumarill:{ pokemonid:"azumarill",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"fairy",
        stats:{ hp:100,
          attack:50,
          defense:80,
          spatk:60,
          spdef:80,
          speed:50 },
        species:"Aqua Rabbit",
        height:0.8,
        weight:28.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":189,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:3 } },
      sudowoodo:{ pokemonid:"sudowoodo",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"rock",
        type2:null,
        stats:{ hp:70,
          attack:100,
          defense:115,
          spatk:30,
          spdef:65,
          speed:30 },
        species:"Imitation",
        height:1.2,
        weight:38,
        gender:"4:4",
        "catch-rate":65,
        "base-exp":144,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      politoed:{ pokemonid:"politoed",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:null,
        stats:{ hp:90,
          attack:75,
          defense:75,
          spatk:90,
          spdef:100,
          speed:70 },
        species:"Frog",
        height:1.1,
        weight:33.9,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":225,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:3 } },
      hoppip:{ pokemonid:"hoppip",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"grass",
        type2:"flying",
        stats:{ hp:35,
          attack:35,
          defense:40,
          spatk:35,
          spdef:55,
          speed:50 },
        species:"Cottonweed",
        height:0.4,
        weight:0.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":50,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:1 } },
      skiploom:{ pokemonid:"skiploom",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"grass",
        type2:"flying",
        stats:{ hp:55,
          attack:45,
          defense:50,
          spatk:45,
          spdef:65,
          speed:80 },
        species:"Cottonweed",
        height:0.6,
        weight:1,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":119,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      jumpluff:{ pokemonid:"jumpluff",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"grass",
        type2:"flying",
        stats:{ hp:75,
          attack:55,
          defense:70,
          spatk:55,
          spdef:95,
          speed:110 },
        species:"Cottonweed",
        height:0.8,
        weight:3,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":207,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      aipom:{ pokemonid:"aipom",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:55,
          attack:70,
          defense:55,
          spatk:40,
          spdef:55,
          speed:85 },
        species:"Long Tail",
        height:0.8,
        weight:11.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":72,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ speed:1 } },
      sunkern:{ pokemonid:"sunkern",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"grass",
        type2:null,
        stats:{ hp:30,
          attack:30,
          defense:30,
          spatk:30,
          spdef:30,
          speed:30 },
        species:"Seed",
        height:0.3,
        weight:1.8,
        gender:"4:4",
        "catch-rate":235,
        "base-exp":36,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      sunflora:{ pokemonid:"sunflora",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"grass",
        type2:null,
        stats:{ hp:75,
          attack:75,
          defense:55,
          spatk:105,
          spdef:85,
          speed:30 },
        species:"Sun",
        height:0.8,
        weight:8.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":149,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      yanma:{ pokemonid:"yanma",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"bug",
        type2:"flying",
        stats:{ hp:65,
          attack:65,
          defense:45,
          spatk:75,
          spdef:45,
          speed:95 },
        species:"Clear Wing",
        height:1.2,
        weight:38,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":78,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      wooper:{ pokemonid:"wooper",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"ground",
        stats:{ hp:55,
          attack:45,
          defense:45,
          spatk:25,
          spdef:25,
          speed:15 },
        species:"Water Fish",
        height:0.4,
        weight:8.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":42,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      quagsire:{ pokemonid:"quagsire",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"ground",
        stats:{ hp:95,
          attack:85,
          defense:85,
          spatk:65,
          spdef:65,
          speed:35 },
        species:"Water Fish",
        height:1.4,
        weight:75,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":151,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      espeon:{ pokemonid:"espeon",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"psychic",
        type2:null,
        stats:{ hp:65,
          attack:65,
          defense:60,
          spatk:130,
          spdef:95,
          speed:110 },
        species:"Sun",
        height:0.9,
        weight:26.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":184,
        "egg-cycles":35,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      umbreon:{ pokemonid:"umbreon",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"dark",
        type2:null,
        stats:{ hp:95,
          attack:65,
          defense:110,
          spatk:60,
          spdef:130,
          speed:65 },
        species:"Moonlight",
        height:1,
        weight:27,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":184,
        "egg-cycles":35,
        friendship:35,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      murkrow:{ pokemonid:"murkrow",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"dark",
        type2:"flying",
        stats:{ hp:60,
          attack:85,
          defense:42,
          spatk:85,
          spdef:42,
          speed:91 },
        species:"Darkness",
        height:0.5,
        weight:2.1,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":81,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      slowking:{ pokemonid:"slowking",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"psychic",
        stats:{ hp:95,
          attack:75,
          defense:80,
          spatk:100,
          spdef:110,
          speed:30 },
        species:"Royal",
        height:2,
        weight:79.5,
        gender:"4:4",
        "catch-rate":70,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      "slowking-galarian":{ pokemonid:"slowking",
        formid:"galarian",
        formname:"Galarian Slowking",
        gen:8,
        release:"sword-shield",
        type1:"poison",
        type2:"psychic",
        stats:{ hp:95,
          attack:65,
          defense:80,
          spatk:110,
          spdef:110,
          speed:30 },
        species:"Hexpert",
        height:1.8,
        weight:79.5,
        gender:"4:4",
        "catch-rate":70,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      misdreavus:{ pokemonid:"misdreavus",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"ghost",
        type2:null,
        stats:{ hp:60,
          attack:60,
          defense:60,
          spatk:85,
          spdef:85,
          speed:85 },
        species:"Screech",
        height:0.7,
        weight:1,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":87,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"fast",
        "ev-yield":{ spdef:1 } },
      unown:{ pokemonid:"unown",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"psychic",
        type2:null,
        stats:{ hp:48,
          attack:72,
          defense:48,
          spatk:72,
          spdef:48,
          speed:48 },
        species:"Symbol",
        height:0.5,
        weight:5,
        gender:"genderless",
        "catch-rate":225,
        "base-exp":118,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1,
          spatk:1 } },
      wobbuffet:{ pokemonid:"wobbuffet",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"psychic",
        type2:null,
        stats:{ hp:190,
          attack:33,
          defense:58,
          spatk:33,
          spdef:58,
          speed:33 },
        species:"Patient",
        height:1.3,
        weight:28.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      girafarig:{ pokemonid:"girafarig",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:"psychic",
        stats:{ hp:70,
          attack:80,
          defense:65,
          spatk:90,
          spdef:65,
          speed:85 },
        species:"Long Neck",
        height:1.5,
        weight:41.5,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":159,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      pineco:{ pokemonid:"pineco",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"bug",
        type2:null,
        stats:{ hp:50,
          attack:65,
          defense:90,
          spatk:35,
          spdef:35,
          speed:15 },
        species:"Bagworm",
        height:0.6,
        weight:7.2,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      forretress:{ pokemonid:"forretress",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"bug",
        type2:"steel",
        stats:{ hp:75,
          attack:90,
          defense:140,
          spatk:60,
          spdef:60,
          speed:40 },
        species:"Bagworm",
        height:1.2,
        weight:125.8,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":163,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      dunsparce:{ pokemonid:"dunsparce",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:100,
          attack:70,
          defense:70,
          spatk:65,
          spdef:65,
          speed:45 },
        species:"Land Snake",
        height:1.5,
        weight:14,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":145,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      gligar:{ pokemonid:"gligar",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"ground",
        type2:"flying",
        stats:{ hp:65,
          attack:75,
          defense:105,
          spatk:35,
          spdef:65,
          speed:85 },
        species:"FlyScorpion",
        height:1.1,
        weight:64.8,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":86,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      steelix:{ pokemonid:"steelix",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"steel",
        type2:"ground",
        stats:{ hp:75,
          attack:85,
          defense:200,
          spatk:55,
          spdef:65,
          speed:30 },
        species:"Iron Snake",
        height:9.2,
        weight:400,
        gender:"4:4",
        "catch-rate":25,
        "base-exp":179,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "steelix-mega":{ pokemonid:"steelix",
        formid:"mega",
        formname:"Mega Steelix",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"steel",
        type2:"ground",
        stats:{ hp:75,
          attack:125,
          defense:230,
          spatk:55,
          spdef:95,
          speed:30 },
        species:"Iron Snake",
        height:10.5,
        weight:740,
        gender:"4:4",
        "catch-rate":25,
        "base-exp":214,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      snubbull:{ pokemonid:"snubbull",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fairy",
        type2:null,
        stats:{ hp:60,
          attack:80,
          defense:50,
          spatk:40,
          spdef:40,
          speed:30 },
        species:"Fairy",
        height:0.6,
        weight:7.8,
        gender:"6:2",
        "catch-rate":190,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ attack:1 } },
      granbull:{ pokemonid:"granbull",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fairy",
        type2:null,
        stats:{ hp:90,
          attack:120,
          defense:75,
          spatk:60,
          spdef:60,
          speed:45 },
        species:"Fairy",
        height:1.4,
        weight:48.7,
        gender:"6:2",
        "catch-rate":75,
        "base-exp":158,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ attack:2 } },
      qwilfish:{ pokemonid:"qwilfish",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"poison",
        stats:{ hp:65,
          attack:95,
          defense:85,
          spatk:55,
          spdef:55,
          speed:85 },
        species:"Balloon",
        height:0.5,
        weight:3.9,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":88,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      scizor:{ pokemonid:"scizor",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"bug",
        type2:"steel",
        stats:{ hp:70,
          attack:130,
          defense:100,
          spatk:55,
          spdef:80,
          speed:65 },
        species:"Pincer",
        height:1.8,
        weight:118,
        gender:"4:4",
        "catch-rate":25,
        "base-exp":175,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      "scizor-mega":{ pokemonid:"scizor",
        formid:"mega",
        formname:"Mega Scizor",
        gen:6,
        release:"x-y",
        type1:"bug",
        type2:"steel",
        stats:{ hp:70,
          attack:150,
          defense:140,
          spatk:65,
          spdef:100,
          speed:75 },
        species:"Pincer",
        height:2,
        weight:125,
        gender:"4:4",
        "catch-rate":25,
        "base-exp":210,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      shuckle:{ pokemonid:"shuckle",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"bug",
        type2:"rock",
        stats:{ hp:20,
          attack:10,
          defense:230,
          spatk:10,
          spdef:230,
          speed:5 },
        species:"Mold",
        height:0.6,
        weight:20.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":177,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1,
          spdef:1 } },
      heracross:{ pokemonid:"heracross",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"bug",
        type2:"fighting",
        stats:{ hp:80,
          attack:125,
          defense:75,
          spatk:40,
          spdef:95,
          speed:85 },
        species:"Single Horn",
        height:1.5,
        weight:54,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":175,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      "heracross-mega":{ pokemonid:"heracross",
        formid:"mega",
        formname:"Mega Heracross",
        gen:6,
        release:"x-y",
        type1:"bug",
        type2:"fighting",
        stats:{ hp:80,
          attack:185,
          defense:115,
          spatk:40,
          spdef:105,
          speed:75 },
        species:"Single Horn",
        height:1.7,
        weight:62.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":210,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      sneasel:{ pokemonid:"sneasel",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"dark",
        type2:"ice",
        stats:{ hp:55,
          attack:95,
          defense:55,
          spatk:35,
          spdef:75,
          speed:115 },
        species:"Sharp Claw",
        height:0.9,
        weight:28,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":86,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      teddiursa:{ pokemonid:"teddiursa",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:60,
          attack:80,
          defense:50,
          spatk:50,
          spdef:50,
          speed:40 },
        species:"Little Bear",
        height:0.6,
        weight:8.8,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      ursaring:{ pokemonid:"ursaring",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:90,
          attack:130,
          defense:75,
          spatk:75,
          spdef:75,
          speed:55 },
        species:"Hibernator",
        height:1.8,
        weight:125.8,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      slugma:{ pokemonid:"slugma",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fire",
        type2:null,
        stats:{ hp:40,
          attack:40,
          defense:40,
          spatk:70,
          spdef:40,
          speed:20 },
        species:"Lava",
        height:0.7,
        weight:35,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":50,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      magcargo:{ pokemonid:"magcargo",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fire",
        type2:"rock",
        stats:{ hp:60,
          attack:50,
          defense:120,
          spatk:90,
          spdef:80,
          speed:30 },
        species:"Lava",
        height:0.8,
        weight:55,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":151,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      swinub:{ pokemonid:"swinub",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"ice",
        type2:"ground",
        stats:{ hp:50,
          attack:50,
          defense:40,
          spatk:30,
          spdef:30,
          speed:50 },
        species:"Pig",
        height:0.4,
        weight:6.5,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":50,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      piloswine:{ pokemonid:"piloswine",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"ice",
        type2:"ground",
        stats:{ hp:100,
          attack:100,
          defense:80,
          spatk:60,
          spdef:60,
          speed:50 },
        species:"Swine",
        height:1.1,
        weight:55.8,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":158,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:1,
          attack:1 } },
      corsola:{ pokemonid:"corsola",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"rock",
        stats:{ hp:65,
          attack:55,
          defense:95,
          spatk:65,
          spdef:95,
          speed:35 },
        species:"Coral",
        height:0.6,
        weight:5,
        gender:"6:2",
        "catch-rate":60,
        "base-exp":144,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ defense:1,
          spdef:1 } },
      "corsola-galarian":{ pokemonid:"corsola",
        formid:"galarian",
        formname:"Galarian Corsola",
        gen:8,
        release:"sword-shield",
        type1:"ghost",
        type2:null,
        stats:{ hp:60,
          attack:55,
          defense:100,
          spatk:65,
          spdef:100,
          speed:30 },
        species:"Coral",
        height:0.6,
        weight:0.5,
        gender:"6:2",
        "catch-rate":60,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"fast",
        "ev-yield":{ spdef:1 } },
      remoraid:{ pokemonid:"remoraid",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:null,
        stats:{ hp:35,
          attack:65,
          defense:35,
          spatk:65,
          spdef:35,
          speed:65 },
        species:"Jet",
        height:0.6,
        weight:12,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      octillery:{ pokemonid:"octillery",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:null,
        stats:{ hp:75,
          attack:105,
          defense:75,
          spatk:105,
          spdef:75,
          speed:45 },
        species:"Jet",
        height:0.9,
        weight:28.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1,
          spatk:1 } },
      delibird:{ pokemonid:"delibird",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"ice",
        type2:"flying",
        stats:{ hp:45,
          attack:55,
          defense:45,
          spatk:65,
          spdef:45,
          speed:75 },
        species:"Delivery",
        height:0.9,
        weight:16,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":116,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ speed:1 } },
      mantine:{ pokemonid:"mantine",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"flying",
        stats:{ hp:85,
          attack:40,
          defense:70,
          spatk:80,
          spdef:140,
          speed:70 },
        species:"Kite",
        height:2.1,
        weight:220,
        gender:"4:4",
        "catch-rate":25,
        "base-exp":170,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spdef:2 } },
      skarmory:{ pokemonid:"skarmory",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"steel",
        type2:"flying",
        stats:{ hp:65,
          attack:80,
          defense:140,
          spatk:40,
          spdef:70,
          speed:70 },
        species:"Armor Bird",
        height:1.7,
        weight:50.5,
        gender:"4:4",
        "catch-rate":25,
        "base-exp":163,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      houndour:{ pokemonid:"houndour",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"dark",
        type2:"fire",
        stats:{ hp:45,
          attack:60,
          defense:30,
          spatk:80,
          spdef:50,
          speed:65 },
        species:"Dark",
        height:0.6,
        weight:10.8,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":66,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:1 } },
      houndoom:{ pokemonid:"houndoom",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"dark",
        type2:"fire",
        stats:{ hp:75,
          attack:90,
          defense:50,
          spatk:110,
          spdef:80,
          speed:95 },
        species:"Dark",
        height:1.4,
        weight:35,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":175,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:2 } },
      "houndoom-mega":{ pokemonid:"houndoom",
        formid:"mega",
        formname:"Mega Houndoom",
        gen:6,
        release:"x-y",
        type1:"dark",
        type2:"fire",
        stats:{ hp:75,
          attack:90,
          defense:90,
          spatk:140,
          spdef:90,
          speed:115 },
        species:"Dark",
        height:1.9,
        weight:49.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":210,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:2 } },
      kingdra:{ pokemonid:"kingdra",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:"dragon",
        stats:{ hp:75,
          attack:95,
          defense:95,
          spatk:95,
          spdef:95,
          speed:85 },
        species:"Dragon",
        height:1.8,
        weight:152,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":243,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1,
          spatk:1,
          spdef:1 } },
      phanpy:{ pokemonid:"phanpy",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"ground",
        type2:null,
        stats:{ hp:90,
          attack:60,
          defense:60,
          spatk:40,
          spdef:40,
          speed:40 },
        species:"Long Nose",
        height:0.5,
        weight:33.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      donphan:{ pokemonid:"donphan",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"ground",
        type2:null,
        stats:{ hp:90,
          attack:120,
          defense:120,
          spatk:60,
          spdef:60,
          speed:50 },
        species:"Armor",
        height:1.1,
        weight:120,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1,
          defense:1 } },
      porygon2:{ pokemonid:"porygon2",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:85,
          attack:80,
          defense:90,
          spatk:105,
          spdef:95,
          speed:60 },
        species:"Virtual",
        height:0.6,
        weight:32.5,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":180,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      stantler:{ pokemonid:"stantler",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:73,
          attack:95,
          defense:62,
          spatk:85,
          spdef:65,
          speed:85 },
        species:"Big Horn",
        height:1.4,
        weight:71.2,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":163,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      smeargle:{ pokemonid:"smeargle",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:55,
          attack:20,
          defense:35,
          spatk:20,
          spdef:45,
          speed:75 },
        species:"Painter",
        height:1.2,
        weight:58,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":88,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ speed:1 } },
      tyrogue:{ pokemonid:"tyrogue",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fighting",
        type2:null,
        stats:{ hp:35,
          attack:35,
          defense:35,
          spatk:35,
          spdef:35,
          speed:35 },
        species:"Scuffle",
        height:0.7,
        weight:21,
        gender:0,
        "catch-rate":75,
        "base-exp":42,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      hitmontop:{ pokemonid:"hitmontop",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fighting",
        type2:null,
        stats:{ hp:50,
          attack:95,
          defense:95,
          spatk:35,
          spdef:110,
          speed:70 },
        species:"Handstand",
        height:1.4,
        weight:48,
        gender:0,
        "catch-rate":45,
        "base-exp":159,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      smoochum:{ pokemonid:"smoochum",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"ice",
        type2:"psychic",
        stats:{ hp:45,
          attack:30,
          defense:15,
          spatk:85,
          spdef:65,
          speed:65 },
        species:"Kiss",
        height:0.4,
        weight:6,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":61,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      elekid:{ pokemonid:"elekid",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"electric",
        type2:null,
        stats:{ hp:45,
          attack:63,
          defense:37,
          spatk:65,
          spdef:55,
          speed:95 },
        species:"Electric",
        height:0.6,
        weight:23.5,
        gender:"2:6",
        "catch-rate":45,
        "base-exp":72,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      magby:{ pokemonid:"magby",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fire",
        type2:null,
        stats:{ hp:45,
          attack:75,
          defense:37,
          spatk:70,
          spdef:55,
          speed:83 },
        species:"Live Coal",
        height:0.7,
        weight:21.4,
        gender:"2:6",
        "catch-rate":45,
        "base-exp":73,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      miltank:{ pokemonid:"miltank",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:95,
          attack:80,
          defense:105,
          spatk:40,
          spdef:70,
          speed:100 },
        species:"Milk Cow",
        height:1.2,
        weight:75.5,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      blissey:{ pokemonid:"blissey",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"normal",
        type2:null,
        stats:{ hp:255,
          attack:10,
          defense:10,
          spatk:75,
          spdef:135,
          speed:55 },
        species:"Happiness",
        height:1.5,
        weight:46.8,
        gender:"8:0",
        "catch-rate":30,
        "base-exp":608,
        "egg-cycles":40,
        friendship:140,
        "growth-rate":"fast",
        "ev-yield":{ hp:3 } },
      raikou:{ pokemonid:"raikou",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"electric",
        type2:null,
        stats:{ hp:90,
          attack:85,
          defense:75,
          spatk:115,
          spdef:100,
          speed:115 },
        species:"Thunder",
        height:1.9,
        weight:178,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:1,
          speed:2 } },
      entei:{ pokemonid:"entei",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fire",
        type2:null,
        stats:{ hp:115,
          attack:115,
          defense:85,
          spatk:90,
          spdef:75,
          speed:100 },
        species:"Volcano",
        height:2.1,
        weight:198,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ hp:1,
          attack:2 } },
      suicune:{ pokemonid:"suicune",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"water",
        type2:null,
        stats:{ hp:100,
          attack:75,
          defense:115,
          spatk:90,
          spdef:115,
          speed:85 },
        species:"Aurora",
        height:2,
        weight:187,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:1,
          spdef:2 } },
      larvitar:{ pokemonid:"larvitar",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"rock",
        type2:"ground",
        stats:{ hp:50,
          attack:64,
          defense:50,
          spatk:45,
          spdef:50,
          speed:41 },
        species:"Rock Skin",
        height:0.6,
        weight:72,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":60,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      pupitar:{ pokemonid:"pupitar",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"rock",
        type2:"ground",
        stats:{ hp:70,
          attack:84,
          defense:70,
          spatk:65,
          spdef:70,
          speed:51 },
        species:"Hard Shell",
        height:1.2,
        weight:152,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":144,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      tyranitar:{ pokemonid:"tyranitar",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"rock",
        type2:"dark",
        stats:{ hp:100,
          attack:134,
          defense:110,
          spatk:95,
          spdef:100,
          speed:61 },
        species:"Armor",
        height:2,
        weight:202,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "tyranitar-mega":{ pokemonid:"tyranitar",
        formid:"mega",
        formname:"Mega Tyranitar",
        gen:6,
        release:"x-y",
        type1:"rock",
        type2:"dark",
        stats:{ hp:100,
          attack:164,
          defense:150,
          spatk:95,
          spdef:120,
          speed:71 },
        species:"Armor",
        height:2.5,
        weight:255,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":315,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      lugia:{ pokemonid:"lugia",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"psychic",
        type2:"flying",
        stats:{ hp:106,
          attack:90,
          defense:130,
          spatk:90,
          spdef:154,
          speed:110 },
        species:"Diving",
        height:5.2,
        weight:216,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      "ho-oh":{ pokemonid:"ho-oh",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"fire",
        type2:"flying",
        stats:{ hp:106,
          attack:130,
          defense:90,
          spatk:110,
          spdef:154,
          speed:90 },
        species:"Rainbow",
        height:3.8,
        weight:199,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      celebi:{ pokemonid:"celebi",
        formid:null,
        formname:null,
        gen:2,
        release:"gold-silver",
        type1:"psychic",
        type2:"grass",
        stats:{ hp:100,
          attack:100,
          defense:100,
          spatk:100,
          spdef:100,
          speed:100 },
        species:"Time Travel",
        height:0.6,
        weight:5,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:3 } },
      treecko:{ pokemonid:"treecko",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:null,
        stats:{ hp:40,
          attack:45,
          defense:35,
          spatk:65,
          spdef:55,
          speed:70 },
        species:"Wood Gecko",
        height:0.5,
        weight:5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      grovyle:{ pokemonid:"grovyle",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:null,
        stats:{ hp:50,
          attack:65,
          defense:45,
          spatk:85,
          spdef:65,
          speed:95 },
        species:"Wood Gecko",
        height:0.9,
        weight:21.6,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      sceptile:{ pokemonid:"sceptile",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:null,
        stats:{ hp:70,
          attack:85,
          defense:65,
          spatk:105,
          spdef:85,
          speed:120 },
        species:"Forest",
        height:1.7,
        weight:52.2,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      "sceptile-mega":{ pokemonid:"sceptile",
        formid:"mega",
        formname:"Mega Sceptile",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"grass",
        type2:"dragon",
        stats:{ hp:70,
          attack:110,
          defense:75,
          spatk:145,
          spdef:85,
          speed:145 },
        species:"Forest",
        height:1.9,
        weight:55.2,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":284,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      torchic:{ pokemonid:"torchic",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"fire",
        type2:null,
        stats:{ hp:45,
          attack:60,
          defense:40,
          spatk:70,
          spdef:50,
          speed:45 },
        species:"Chick",
        height:0.4,
        weight:2.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      combusken:{ pokemonid:"combusken",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"fire",
        type2:"fighting",
        stats:{ hp:60,
          attack:85,
          defense:60,
          spatk:85,
          spdef:60,
          speed:55 },
        species:"Young Fowl",
        height:0.9,
        weight:19.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          spatk:1 } },
      blaziken:{ pokemonid:"blaziken",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"fire",
        type2:"fighting",
        stats:{ hp:80,
          attack:120,
          defense:70,
          spatk:110,
          spdef:70,
          speed:80 },
        species:"Blaze",
        height:1.9,
        weight:52,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      "blaziken-mega":{ pokemonid:"blaziken",
        formid:"mega",
        formname:"Mega Blaziken",
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:"fighting",
        stats:{ hp:80,
          attack:160,
          defense:80,
          spatk:130,
          spdef:80,
          speed:100 },
        species:"Blaze",
        height:1.9,
        weight:52,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":284,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      mudkip:{ pokemonid:"mudkip",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:50,
          attack:70,
          defense:50,
          spatk:50,
          spdef:50,
          speed:40 },
        species:"Mud Fish",
        height:0.4,
        weight:7.6,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      marshtomp:{ pokemonid:"marshtomp",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"ground",
        stats:{ hp:70,
          attack:85,
          defense:70,
          spatk:60,
          spdef:70,
          speed:50 },
        species:"Mud Fish",
        height:0.7,
        weight:28,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      swampert:{ pokemonid:"swampert",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"ground",
        stats:{ hp:100,
          attack:110,
          defense:90,
          spatk:85,
          spdef:90,
          speed:60 },
        species:"Mud Fish",
        height:1.5,
        weight:81.9,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":241,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      "swampert-mega":{ pokemonid:"swampert",
        formid:"mega",
        formname:"Mega Swampert",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"water",
        type2:"ground",
        stats:{ hp:100,
          attack:150,
          defense:110,
          spatk:95,
          spdef:110,
          speed:70 },
        species:"Mud Fish",
        height:1.9,
        weight:102,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":286,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      poochyena:{ pokemonid:"poochyena",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dark",
        type2:null,
        stats:{ hp:35,
          attack:55,
          defense:35,
          spatk:30,
          spdef:30,
          speed:35 },
        species:"Bite",
        height:0.5,
        weight:13.6,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":56,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      mightyena:{ pokemonid:"mightyena",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dark",
        type2:null,
        stats:{ hp:70,
          attack:90,
          defense:70,
          spatk:60,
          spdef:60,
          speed:70 },
        species:"Bite",
        height:1,
        weight:37,
        gender:"4:4",
        "catch-rate":127,
        "base-exp":147,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      zigzagoon:{ pokemonid:"zigzagoon",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:38,
          attack:30,
          defense:41,
          spatk:30,
          spdef:41,
          speed:60 },
        species:"TinyRaccoon",
        height:0.4,
        weight:17.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":56,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      "zigzagoon-galarian":{ pokemonid:"zigzagoon",
        formid:"galarian",
        formname:"Galarian Zigzagoon",
        gen:8,
        release:"sword-shield",
        type1:"dark",
        type2:"normal",
        stats:{ hp:38,
          attack:30,
          defense:41,
          spatk:30,
          spdef:41,
          speed:60 },
        species:"Tiny Raccoon",
        height:0.4,
        weight:17.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      linoone:{ pokemonid:"linoone",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:78,
          attack:70,
          defense:61,
          spatk:50,
          spdef:61,
          speed:100 },
        species:"Rushing",
        height:0.5,
        weight:32.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":147,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "linoone-galarian":{ pokemonid:"linoone",
        formid:"galarian",
        formname:"Galarian Linoone",
        gen:8,
        release:"sword-shield",
        type1:"dark",
        type2:"normal",
        stats:{ hp:78,
          attack:70,
          defense:61,
          spatk:50,
          spdef:61,
          speed:100 },
        species:"Rushing",
        height:0.5,
        weight:32.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      wurmple:{ pokemonid:"wurmple",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:null,
        stats:{ hp:45,
          attack:45,
          defense:35,
          spatk:20,
          spdef:30,
          speed:20 },
        species:"Worm",
        height:0.3,
        weight:3.6,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":56,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      silcoon:{ pokemonid:"silcoon",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:null,
        stats:{ hp:50,
          attack:35,
          defense:55,
          spatk:25,
          spdef:25,
          speed:15 },
        species:"Cocoon",
        height:0.6,
        weight:10,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":72,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      beautifly:{ pokemonid:"beautifly",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:"flying",
        stats:{ hp:60,
          attack:70,
          defense:50,
          spatk:100,
          spdef:50,
          speed:65 },
        species:"Butterfly",
        height:1,
        weight:28.4,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":178,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:3 } },
      cascoon:{ pokemonid:"cascoon",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:null,
        stats:{ hp:50,
          attack:35,
          defense:55,
          spatk:25,
          spdef:25,
          speed:15 },
        species:"Cocoon",
        height:0.7,
        weight:11.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":72,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      dustox:{ pokemonid:"dustox",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:"poison",
        stats:{ hp:60,
          attack:50,
          defense:70,
          spatk:50,
          spdef:90,
          speed:65 },
        species:"Poison Moth",
        height:1.2,
        weight:31.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":173,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:3 } },
      lotad:{ pokemonid:"lotad",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"grass",
        stats:{ hp:40,
          attack:30,
          defense:30,
          spatk:40,
          spdef:50,
          speed:30 },
        species:"Water Weed",
        height:0.5,
        weight:2.6,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":44,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:1 } },
      lombre:{ pokemonid:"lombre",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"grass",
        stats:{ hp:60,
          attack:50,
          defense:50,
          spatk:60,
          spdef:70,
          speed:50 },
        species:"Jolly",
        height:1.2,
        weight:32.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":119,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:2 } },
      ludicolo:{ pokemonid:"ludicolo",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"grass",
        stats:{ hp:80,
          attack:70,
          defense:70,
          spatk:90,
          spdef:100,
          speed:70 },
        species:"Carefree",
        height:1.5,
        weight:55,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":216,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:3 } },
      seedot:{ pokemonid:"seedot",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:null,
        stats:{ hp:40,
          attack:40,
          defense:50,
          spatk:30,
          spdef:30,
          speed:30 },
        species:"Acorn",
        height:0.5,
        weight:4,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":44,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      nuzleaf:{ pokemonid:"nuzleaf",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:"dark",
        stats:{ hp:70,
          attack:70,
          defense:40,
          spatk:60,
          spdef:40,
          speed:60 },
        species:"Wily",
        height:1,
        weight:28,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":119,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      shiftry:{ pokemonid:"shiftry",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:"dark",
        stats:{ hp:90,
          attack:100,
          defense:60,
          spatk:90,
          spdef:60,
          speed:80 },
        species:"Wicked",
        height:1.3,
        weight:59.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":216,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      taillow:{ pokemonid:"taillow",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:"flying",
        stats:{ hp:40,
          attack:55,
          defense:30,
          spatk:30,
          spdef:30,
          speed:85 },
        species:"TinySwallow",
        height:0.3,
        weight:2.3,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":54,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      swellow:{ pokemonid:"swellow",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:"flying",
        stats:{ hp:60,
          attack:85,
          defense:60,
          spatk:75,
          spdef:50,
          speed:125 },
        species:"Swallow",
        height:0.7,
        weight:19.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":159,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      wingull:{ pokemonid:"wingull",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"flying",
        stats:{ hp:40,
          attack:30,
          defense:30,
          spatk:55,
          spdef:30,
          speed:85 },
        species:"Seagull",
        height:0.6,
        weight:9.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":54,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      pelipper:{ pokemonid:"pelipper",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"flying",
        stats:{ hp:60,
          attack:50,
          defense:100,
          spatk:95,
          spdef:70,
          speed:65 },
        species:"Water Bird",
        height:1.2,
        weight:28,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":154,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      ralts:{ pokemonid:"ralts",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:"fairy",
        stats:{ hp:28,
          attack:25,
          defense:25,
          spatk:45,
          spdef:35,
          speed:40 },
        species:"Feeling",
        height:0.4,
        weight:6.6,
        gender:"4:4",
        "catch-rate":235,
        "base-exp":40,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:1 } },
      kirlia:{ pokemonid:"kirlia",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:"fairy",
        stats:{ hp:38,
          attack:35,
          defense:35,
          spatk:65,
          spdef:55,
          speed:50 },
        species:"Emotion",
        height:0.8,
        weight:20.2,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":97,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:2 } },
      gardevoir:{ pokemonid:"gardevoir",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:"fairy",
        stats:{ hp:68,
          attack:65,
          defense:65,
          spatk:125,
          spdef:115,
          speed:80 },
        species:"Embrace",
        height:1.6,
        weight:48.4,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":233,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "gardevoir-mega":{ pokemonid:"gardevoir",
        formid:"mega",
        formname:"Mega Gardevoir",
        gen:6,
        release:"x-y",
        type1:"psychic",
        type2:"fairy",
        stats:{ hp:68,
          attack:85,
          defense:65,
          spatk:165,
          spdef:135,
          speed:100 },
        species:"Embrace",
        height:1.6,
        weight:48.4,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":278,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      surskit:{ pokemonid:"surskit",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:"water",
        stats:{ hp:40,
          attack:30,
          defense:32,
          spatk:50,
          spdef:52,
          speed:65 },
        species:"Pond Skater",
        height:0.5,
        weight:1.7,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":54,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      masquerain:{ pokemonid:"masquerain",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:"flying",
        stats:{ hp:70,
          attack:60,
          defense:62,
          spatk:100,
          spdef:82,
          speed:80 },
        species:"Eyeball",
        height:0.8,
        weight:3.6,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":159,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1,
          spdef:1 } },
      shroomish:{ pokemonid:"shroomish",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:null,
        stats:{ hp:60,
          attack:40,
          defense:60,
          spatk:40,
          spdef:60,
          speed:35 },
        species:"Mushroom",
        height:0.4,
        weight:4.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":59,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ hp:1 } },
      breloom:{ pokemonid:"breloom",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:"fighting",
        stats:{ hp:60,
          attack:130,
          defense:80,
          spatk:60,
          spdef:60,
          speed:70 },
        species:"Mushroom",
        height:1.2,
        weight:39.2,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":161,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ attack:2 } },
      slakoth:{ pokemonid:"slakoth",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:60,
          attack:60,
          defense:60,
          spatk:35,
          spdef:35,
          speed:30 },
        species:"Slacker",
        height:0.8,
        weight:24,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":56,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:1 } },
      vigoroth:{ pokemonid:"vigoroth",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:80,
          attack:80,
          defense:80,
          spatk:55,
          spdef:55,
          speed:90 },
        species:"Wild Monkey",
        height:1.4,
        weight:46.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":154,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:2 } },
      slaking:{ pokemonid:"slaking",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:150,
          attack:160,
          defense:100,
          spatk:95,
          spdef:65,
          speed:100 },
        species:"Lazy",
        height:2,
        weight:130.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":252,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      nincada:{ pokemonid:"nincada",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:"ground",
        stats:{ hp:31,
          attack:45,
          defense:90,
          spatk:30,
          spdef:30,
          speed:40 },
        species:"Trainee",
        height:0.5,
        weight:5.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":53,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ defense:1 } },
      ninjask:{ pokemonid:"ninjask",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:"flying",
        stats:{ hp:61,
          attack:90,
          defense:45,
          spatk:50,
          spdef:50,
          speed:160 },
        species:"Ninja",
        height:0.8,
        weight:12,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":160,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ speed:2 } },
      shedinja:{ pokemonid:"shedinja",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:"ghost",
        stats:{ hp:1,
          attack:90,
          defense:45,
          spatk:30,
          spdef:30,
          speed:40 },
        species:"Shed",
        height:0.8,
        weight:1.2,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":83,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ hp:2 } },
      whismur:{ pokemonid:"whismur",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:64,
          attack:51,
          defense:23,
          spatk:51,
          spdef:23,
          speed:28 },
        species:"Whisper",
        height:0.6,
        weight:16.3,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":48,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:1 } },
      loudred:{ pokemonid:"loudred",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:84,
          attack:71,
          defense:43,
          spatk:71,
          spdef:43,
          speed:48 },
        species:"Big Voice",
        height:1,
        weight:40.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":126,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:2 } },
      exploud:{ pokemonid:"exploud",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:104,
          attack:91,
          defense:63,
          spatk:91,
          spdef:73,
          speed:68 },
        species:"Loud Noise",
        height:1.5,
        weight:84,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":221,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:3 } },
      makuhita:{ pokemonid:"makuhita",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"fighting",
        type2:null,
        stats:{ hp:72,
          attack:60,
          defense:30,
          spatk:20,
          spdef:30,
          speed:25 },
        species:"Guts",
        height:1,
        weight:86.4,
        gender:"2:6",
        "catch-rate":180,
        "base-exp":47,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ hp:1 } },
      hariyama:{ pokemonid:"hariyama",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"fighting",
        type2:null,
        stats:{ hp:144,
          attack:120,
          defense:60,
          spatk:40,
          spdef:60,
          speed:50 },
        species:"Arm Thrust",
        height:2.3,
        weight:253.8,
        gender:"2:6",
        "catch-rate":200,
        "base-exp":166,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ hp:2 } },
      azurill:{ pokemonid:"azurill",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:"fairy",
        stats:{ hp:50,
          attack:20,
          defense:40,
          spatk:20,
          spdef:40,
          speed:20 },
        species:"Polka Dot",
        height:0.2,
        weight:2,
        gender:"6:2",
        "catch-rate":150,
        "base-exp":38,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:1 } },
      nosepass:{ pokemonid:"nosepass",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"rock",
        type2:null,
        stats:{ hp:30,
          attack:45,
          defense:135,
          spatk:45,
          spdef:90,
          speed:30 },
        species:"Compass",
        height:1,
        weight:97,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":75,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      skitty:{ pokemonid:"skitty",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:50,
          attack:45,
          defense:45,
          spatk:35,
          spdef:35,
          speed:50 },
        species:"Kitten",
        height:0.6,
        weight:11,
        gender:"6:2",
        "catch-rate":255,
        "base-exp":52,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ speed:1 } },
      delcatty:{ pokemonid:"delcatty",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:70,
          attack:65,
          defense:65,
          spatk:55,
          spdef:55,
          speed:90 },
        species:"Prim",
        height:1.1,
        weight:32.6,
        gender:"6:2",
        "catch-rate":60,
        "base-exp":140,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:1,
          speed:1 } },
      sableye:{ pokemonid:"sableye",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dark",
        type2:"ghost",
        stats:{ hp:50,
          attack:75,
          defense:75,
          spatk:65,
          spdef:65,
          speed:50 },
        species:"Darkness",
        height:0.5,
        weight:11,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":133,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          defense:1 } },
      "sableye-mega":{ pokemonid:"sableye",
        formid:"mega",
        formname:"Mega Sableye",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"dark",
        type2:"ghost",
        stats:{ hp:50,
          attack:85,
          defense:125,
          spatk:85,
          spdef:115,
          speed:20 },
        species:"Darkness",
        height:0.5,
        weight:161,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":168,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          defense:1 } },
      mawile:{ pokemonid:"mawile",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"steel",
        type2:"fairy",
        stats:{ hp:50,
          attack:85,
          defense:85,
          spatk:55,
          spdef:55,
          speed:50 },
        species:"Deceiver",
        height:0.6,
        weight:11.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":133,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ attack:1,
          defense:1 } },
      "mawile-mega":{ pokemonid:"mawile",
        formid:"mega",
        formname:"Mega Mawile",
        gen:6,
        release:"x-y",
        type1:"steel",
        type2:"fairy",
        stats:{ hp:50,
          attack:105,
          defense:125,
          spatk:55,
          spdef:95,
          speed:50 },
        species:"Deceiver",
        height:1,
        weight:23.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ attack:1,
          defense:1 } },
      aron:{ pokemonid:"aron",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"steel",
        type2:"rock",
        stats:{ hp:50,
          attack:70,
          defense:100,
          spatk:40,
          spdef:40,
          speed:30 },
        species:"Iron Armor",
        height:0.4,
        weight:60,
        gender:"4:4",
        "catch-rate":180,
        "base-exp":66,
        "egg-cycles":35,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:1 } },
      lairon:{ pokemonid:"lairon",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"steel",
        type2:"rock",
        stats:{ hp:60,
          attack:90,
          defense:140,
          spatk:50,
          spdef:50,
          speed:40 },
        species:"Iron Armor",
        height:0.9,
        weight:120,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":151,
        "egg-cycles":35,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      aggron:{ pokemonid:"aggron",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"steel",
        type2:"rock",
        stats:{ hp:70,
          attack:110,
          defense:180,
          spatk:60,
          spdef:60,
          speed:50 },
        species:"Iron Armor",
        height:2.1,
        weight:360,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":35,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:3 } },
      "aggron-mega":{ pokemonid:"aggron",
        formid:"mega",
        formname:"Mega Aggron",
        gen:6,
        release:"x-y",
        type1:"steel",
        type2:null,
        stats:{ hp:70,
          attack:140,
          defense:230,
          spatk:60,
          spdef:80,
          speed:50 },
        species:"Iron Armor",
        height:2.2,
        weight:395,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":284,
        "egg-cycles":35,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:3 } },
      meditite:{ pokemonid:"meditite",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"fighting",
        type2:"psychic",
        stats:{ hp:30,
          attack:40,
          defense:55,
          spatk:40,
          spdef:55,
          speed:60 },
        species:"Meditate",
        height:0.6,
        weight:11.2,
        gender:"4:4",
        "catch-rate":180,
        "base-exp":56,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      medicham:{ pokemonid:"medicham",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"fighting",
        type2:"psychic",
        stats:{ hp:60,
          attack:60,
          defense:75,
          spatk:60,
          spdef:75,
          speed:80 },
        species:"Meditate",
        height:1.3,
        weight:31.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":144,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "medicham-mega":{ pokemonid:"medicham",
        formid:"mega",
        formname:"Mega Medicham",
        gen:6,
        release:"x-y",
        type1:"fighting",
        type2:"psychic",
        stats:{ hp:60,
          attack:100,
          defense:85,
          spatk:80,
          spdef:85,
          speed:100 },
        species:"Meditate",
        height:1.3,
        weight:31.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":179,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      electrike:{ pokemonid:"electrike",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"electric",
        type2:null,
        stats:{ hp:40,
          attack:45,
          defense:40,
          spatk:65,
          spdef:40,
          speed:65 },
        species:"Lightning",
        height:0.6,
        weight:15.2,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":59,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:1 } },
      manectric:{ pokemonid:"manectric",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"electric",
        type2:null,
        stats:{ hp:70,
          attack:75,
          defense:60,
          spatk:105,
          spdef:60,
          speed:105 },
        species:"Discharge",
        height:1.5,
        weight:40.2,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":166,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:2 } },
      "manectric-mega":{ pokemonid:"manectric",
        formid:"mega",
        formname:"Mega Manectric",
        gen:6,
        release:"x-y",
        type1:"electric",
        type2:null,
        stats:{ hp:70,
          attack:75,
          defense:80,
          spatk:135,
          spdef:80,
          speed:135 },
        species:"Discharge",
        height:1.8,
        weight:44,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":201,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:2 } },
      plusle:{ pokemonid:"plusle",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"electric",
        type2:null,
        stats:{ hp:60,
          attack:50,
          defense:40,
          spatk:85,
          spdef:75,
          speed:95 },
        species:"Cheering",
        height:0.4,
        weight:4.2,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      minun:{ pokemonid:"minun",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"electric",
        type2:null,
        stats:{ hp:60,
          attack:40,
          defense:50,
          spatk:75,
          spdef:85,
          speed:95 },
        species:"Cheering",
        height:0.4,
        weight:4.2,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      volbeat:{ pokemonid:"volbeat",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:null,
        stats:{ hp:65,
          attack:73,
          defense:75,
          spatk:47,
          spdef:85,
          speed:85 },
        species:"Firefly",
        height:0.7,
        weight:17.7,
        gender:0,
        "catch-rate":150,
        "base-exp":151,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ speed:1 } },
      illumise:{ pokemonid:"illumise",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"bug",
        type2:null,
        stats:{ hp:65,
          attack:47,
          defense:75,
          spatk:73,
          spdef:85,
          speed:85 },
        species:"Firefly",
        height:0.6,
        weight:17.7,
        gender:"8:0",
        "catch-rate":150,
        "base-exp":151,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ speed:1 } },
      roselia:{ pokemonid:"roselia",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:"poison",
        stats:{ hp:50,
          attack:60,
          defense:45,
          spatk:100,
          spdef:80,
          speed:65 },
        species:"Thorn",
        height:0.3,
        weight:2,
        gender:"4:4",
        "catch-rate":150,
        "base-exp":140,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      gulpin:{ pokemonid:"gulpin",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"poison",
        type2:null,
        stats:{ hp:70,
          attack:43,
          defense:53,
          spatk:43,
          spdef:53,
          speed:40 },
        species:"Stomach",
        height:0.4,
        weight:10.3,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ hp:1 } },
      swalot:{ pokemonid:"swalot",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"poison",
        type2:null,
        stats:{ hp:100,
          attack:73,
          defense:83,
          spatk:73,
          spdef:83,
          speed:55 },
        species:"Poison Bag",
        height:1.7,
        weight:80,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":163,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ hp:2 } },
      carvanha:{ pokemonid:"carvanha",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"dark",
        stats:{ hp:45,
          attack:90,
          defense:20,
          spatk:65,
          spdef:20,
          speed:65 },
        species:"Savage",
        height:0.8,
        weight:20.8,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":61,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      sharpedo:{ pokemonid:"sharpedo",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"dark",
        stats:{ hp:70,
          attack:120,
          defense:40,
          spatk:95,
          spdef:40,
          speed:95 },
        species:"Brutal",
        height:1.8,
        weight:88.8,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":161,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      "sharpedo-mega":{ pokemonid:"sharpedo",
        formid:"mega",
        formname:"Mega Sharpedo",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"water",
        type2:"dark",
        stats:{ hp:70,
          attack:140,
          defense:70,
          spatk:110,
          spdef:65,
          speed:105 },
        species:"Brutal",
        height:2.5,
        weight:130.3,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":196,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      wailmer:{ pokemonid:"wailmer",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:130,
          attack:70,
          defense:35,
          spatk:70,
          spdef:35,
          speed:60 },
        species:"Ball Whale",
        height:2,
        weight:130,
        gender:"4:4",
        "catch-rate":125,
        "base-exp":80,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ hp:1 } },
      wailord:{ pokemonid:"wailord",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:170,
          attack:90,
          defense:45,
          spatk:90,
          spdef:45,
          speed:60 },
        species:"Float Whale",
        height:14.5,
        weight:398,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":175,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ hp:2 } },
      numel:{ pokemonid:"numel",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"fire",
        type2:"ground",
        stats:{ hp:60,
          attack:60,
          defense:40,
          spatk:65,
          spdef:45,
          speed:35 },
        species:"Numb",
        height:0.7,
        weight:24,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      camerupt:{ pokemonid:"camerupt",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"fire",
        type2:"ground",
        stats:{ hp:70,
          attack:100,
          defense:70,
          spatk:105,
          spdef:75,
          speed:40 },
        species:"Eruption",
        height:1.9,
        weight:220,
        gender:"4:4",
        "catch-rate":150,
        "base-exp":161,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1,
          spatk:1 } },
      "camerupt-mega":{ pokemonid:"camerupt",
        formid:"mega",
        formname:"Mega Camerupt",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"fire",
        type2:"ground",
        stats:{ hp:70,
          attack:120,
          defense:100,
          spatk:145,
          spdef:105,
          speed:20 },
        species:"Eruption",
        height:2.5,
        weight:320.5,
        gender:"4:4",
        "catch-rate":150,
        "base-exp":196,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1,
          spatk:1 } },
      torkoal:{ pokemonid:"torkoal",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"fire",
        type2:null,
        stats:{ hp:70,
          attack:85,
          defense:140,
          spatk:85,
          spdef:70,
          speed:20 },
        species:"Coal",
        height:0.5,
        weight:80.4,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":165,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      spoink:{ pokemonid:"spoink",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:null,
        stats:{ hp:60,
          attack:25,
          defense:35,
          spatk:70,
          spdef:80,
          speed:60 },
        species:"Bounce",
        height:0.7,
        weight:30.6,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spdef:1 } },
      grumpig:{ pokemonid:"grumpig",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:null,
        stats:{ hp:80,
          attack:45,
          defense:65,
          spatk:90,
          spdef:110,
          speed:80 },
        species:"Manipulate",
        height:0.9,
        weight:71.5,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":165,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spdef:2 } },
      spinda:{ pokemonid:"spinda",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:60,
          attack:60,
          defense:60,
          spatk:60,
          spdef:60,
          speed:60 },
        species:"Spot Panda",
        height:1.1,
        weight:5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":126,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spatk:1 } },
      trapinch:{ pokemonid:"trapinch",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ground",
        type2:null,
        stats:{ hp:45,
          attack:100,
          defense:45,
          spatk:45,
          spdef:45,
          speed:10 },
        species:"Ant Pit",
        height:0.7,
        weight:15,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      vibrava:{ pokemonid:"vibrava",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ground",
        type2:"dragon",
        stats:{ hp:50,
          attack:70,
          defense:50,
          spatk:50,
          spdef:50,
          speed:70 },
        species:"Vibration",
        height:1.1,
        weight:15.3,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":119,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          speed:1 } },
      flygon:{ pokemonid:"flygon",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ground",
        type2:"dragon",
        stats:{ hp:80,
          attack:100,
          defense:80,
          spatk:80,
          spdef:80,
          speed:100 },
        species:"Mystic",
        height:2,
        weight:82,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":234,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          speed:2 } },
      cacnea:{ pokemonid:"cacnea",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:null,
        stats:{ hp:50,
          attack:85,
          defense:40,
          spatk:85,
          spdef:40,
          speed:35 },
        species:"Cactus",
        height:0.4,
        weight:51.3,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":67,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      cacturne:{ pokemonid:"cacturne",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:"dark",
        stats:{ hp:70,
          attack:115,
          defense:60,
          spatk:115,
          spdef:60,
          speed:55 },
        species:"Scarecrow",
        height:1.3,
        weight:77.4,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":166,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          spatk:1 } },
      swablu:{ pokemonid:"swablu",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:"flying",
        stats:{ hp:45,
          attack:40,
          defense:60,
          spatk:40,
          spdef:75,
          speed:50 },
        species:"Cotton Bird",
        height:0.4,
        weight:1.2,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ spdef:1 } },
      altaria:{ pokemonid:"altaria",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dragon",
        type2:"flying",
        stats:{ hp:75,
          attack:70,
          defense:90,
          spatk:70,
          spdef:105,
          speed:80 },
        species:"Humming",
        height:1.1,
        weight:20.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ spdef:2 } },
      "altaria-mega":{ pokemonid:"altaria",
        formid:"mega",
        formname:"Mega Altaria",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"dragon",
        type2:"fairy",
        stats:{ hp:75,
          attack:110,
          defense:110,
          spatk:110,
          spdef:105,
          speed:80 },
        species:"Humming",
        height:1.5,
        weight:20.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":207,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ spdef:2 } },
      zangoose:{ pokemonid:"zangoose",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:73,
          attack:115,
          defense:60,
          spatk:60,
          spdef:60,
          speed:90 },
        species:"Cat Ferret",
        height:1.3,
        weight:40.3,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":160,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ attack:2 } },
      seviper:{ pokemonid:"seviper",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"poison",
        type2:null,
        stats:{ hp:73,
          attack:100,
          defense:60,
          spatk:100,
          spdef:60,
          speed:65 },
        species:"Fang Snake",
        height:2.7,
        weight:52.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":160,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ attack:1,
          spatk:1 } },
      lunatone:{ pokemonid:"lunatone",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"rock",
        type2:"psychic",
        stats:{ hp:90,
          attack:55,
          defense:65,
          spatk:95,
          spdef:85,
          speed:70 },
        species:"Meteorite",
        height:1,
        weight:168,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":161,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spatk:2 } },
      solrock:{ pokemonid:"solrock",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"rock",
        type2:"psychic",
        stats:{ hp:90,
          attack:95,
          defense:85,
          spatk:55,
          spdef:65,
          speed:70 },
        species:"Meteorite",
        height:1.2,
        weight:154,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":161,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ attack:2 } },
      barboach:{ pokemonid:"barboach",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"ground",
        stats:{ hp:50,
          attack:48,
          defense:43,
          spatk:46,
          spdef:41,
          speed:60 },
        species:"Whiskers",
        height:0.4,
        weight:1.9,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      whiscash:{ pokemonid:"whiscash",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"ground",
        stats:{ hp:110,
          attack:78,
          defense:73,
          spatk:76,
          spdef:71,
          speed:60 },
        species:"Whiskers",
        height:0.9,
        weight:23.6,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":164,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      corphish:{ pokemonid:"corphish",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:43,
          attack:80,
          defense:65,
          spatk:50,
          spdef:35,
          speed:35 },
        species:"Ruffian",
        height:0.6,
        weight:11.5,
        gender:"4:4",
        "catch-rate":205,
        "base-exp":62,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ attack:1 } },
      crawdaunt:{ pokemonid:"crawdaunt",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"dark",
        stats:{ hp:63,
          attack:120,
          defense:85,
          spatk:90,
          spdef:55,
          speed:55 },
        species:"Rogue",
        height:1.1,
        weight:32.8,
        gender:"4:4",
        "catch-rate":155,
        "base-exp":164,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ attack:2 } },
      baltoy:{ pokemonid:"baltoy",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ground",
        type2:"psychic",
        stats:{ hp:40,
          attack:40,
          defense:55,
          spatk:40,
          spdef:70,
          speed:55 },
        species:"Clay Doll",
        height:0.5,
        weight:21.5,
        gender:"genderless",
        "catch-rate":255,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      claydol:{ pokemonid:"claydol",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ground",
        type2:"psychic",
        stats:{ hp:60,
          attack:70,
          defense:105,
          spatk:70,
          spdef:120,
          speed:75 },
        species:"Clay Doll",
        height:1.5,
        weight:108,
        gender:"genderless",
        "catch-rate":90,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      lileep:{ pokemonid:"lileep",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"rock",
        type2:"grass",
        stats:{ hp:66,
          attack:41,
          defense:77,
          spatk:61,
          spdef:87,
          speed:23 },
        species:"Sea Lily",
        height:1,
        weight:23.8,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":71,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ spdef:1 } },
      cradily:{ pokemonid:"cradily",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"rock",
        type2:"grass",
        stats:{ hp:86,
          attack:81,
          defense:97,
          spatk:81,
          spdef:107,
          speed:43 },
        species:"Barnacle",
        height:1.5,
        weight:60.4,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":173,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ spdef:2 } },
      anorith:{ pokemonid:"anorith",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"rock",
        type2:"bug",
        stats:{ hp:45,
          attack:95,
          defense:50,
          spatk:40,
          spdef:50,
          speed:75 },
        species:"Old Shrimp",
        height:0.7,
        weight:12.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":71,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ attack:1 } },
      armaldo:{ pokemonid:"armaldo",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"rock",
        type2:"bug",
        stats:{ hp:75,
          attack:125,
          defense:100,
          spatk:70,
          spdef:80,
          speed:45 },
        species:"Plate",
        height:1.5,
        weight:68.2,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":173,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ attack:2 } },
      feebas:{ pokemonid:"feebas",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:20,
          attack:15,
          defense:20,
          spatk:10,
          spdef:55,
          speed:80 },
        species:"Fish",
        height:0.6,
        weight:7.4,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":40,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ speed:1 } },
      milotic:{ pokemonid:"milotic",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:95,
          attack:60,
          defense:79,
          spatk:100,
          spdef:125,
          speed:81 },
        species:"Tender",
        height:6.2,
        weight:162,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":189,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ spdef:2 } },
      castform:{ pokemonid:"castform",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:70,
          attack:70,
          defense:70,
          spatk:70,
          spdef:70,
          speed:70 },
        species:"Weather",
        height:0.3,
        weight:0.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      "castform-sunny":{ pokemonid:"castform",
        formid:"sunny",
        formname:"Sunny Form",
        gen:3,
        release:"ruby-sapphire",
        type1:"fire",
        type2:null,
        stats:{ hp:70,
          attack:70,
          defense:70,
          spatk:70,
          spdef:70,
          speed:70 },
        species:"Weather",
        height:0.3,
        weight:0.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      "castform-rainy":{ pokemonid:"castform",
        formid:"rainy",
        formname:"Rainy Form",
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:70,
          attack:70,
          defense:70,
          spatk:70,
          spdef:70,
          speed:70 },
        species:"Weather",
        height:0.3,
        weight:0.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      "castform-snowy":{ pokemonid:"castform",
        formid:"snowy",
        formname:"Snowy Form",
        gen:3,
        release:"ruby-sapphire",
        type1:"ice",
        type2:null,
        stats:{ hp:70,
          attack:70,
          defense:70,
          spatk:70,
          spdef:70,
          speed:70 },
        species:"Weather",
        height:0.3,
        weight:0.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      kecleon:{ pokemonid:"kecleon",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"normal",
        type2:null,
        stats:{ hp:60,
          attack:90,
          defense:70,
          spatk:60,
          spdef:120,
          speed:40 },
        species:"Color Swap",
        height:1,
        weight:22,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":154,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:1 } },
      shuppet:{ pokemonid:"shuppet",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ghost",
        type2:null,
        stats:{ hp:44,
          attack:75,
          defense:35,
          spatk:63,
          spdef:33,
          speed:45 },
        species:"Puppet",
        height:0.6,
        weight:2.3,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":59,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"fast",
        "ev-yield":{ attack:1 } },
      banette:{ pokemonid:"banette",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ghost",
        type2:null,
        stats:{ hp:64,
          attack:115,
          defense:65,
          spatk:83,
          spdef:63,
          speed:65 },
        species:"Marionette",
        height:1.1,
        weight:12.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":159,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"fast",
        "ev-yield":{ attack:2 } },
      "banette-mega":{ pokemonid:"banette",
        formid:"mega",
        formname:"Mega Banette",
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:null,
        stats:{ hp:64,
          attack:165,
          defense:75,
          spatk:93,
          spdef:83,
          speed:75 },
        species:"Marionette",
        height:1.2,
        weight:13,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":194,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"fast",
        "ev-yield":{ attack:2 } },
      duskull:{ pokemonid:"duskull",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ghost",
        type2:null,
        stats:{ hp:20,
          attack:40,
          defense:90,
          spatk:30,
          spdef:90,
          speed:25 },
        species:"Requiem",
        height:0.8,
        weight:15,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":59,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"fast",
        "ev-yield":{ spdef:1 } },
      dusclops:{ pokemonid:"dusclops",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ghost",
        type2:null,
        stats:{ hp:40,
          attack:70,
          defense:130,
          spatk:60,
          spdef:130,
          speed:25 },
        species:"Beckon",
        height:1.6,
        weight:30.6,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":159,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"fast",
        "ev-yield":{ defense:1,
          spdef:1 } },
      tropius:{ pokemonid:"tropius",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"grass",
        type2:"flying",
        stats:{ hp:99,
          attack:68,
          defense:83,
          spatk:72,
          spdef:87,
          speed:51 },
        species:"Fruit",
        height:2,
        weight:100,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":161,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:2 } },
      chimecho:{ pokemonid:"chimecho",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:null,
        stats:{ hp:75,
          attack:50,
          defense:80,
          spatk:95,
          spdef:90,
          speed:65 },
        species:"Wind Chime",
        height:0.6,
        weight:1,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":159,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spatk:1,
          spdef:1 } },
      absol:{ pokemonid:"absol",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dark",
        type2:null,
        stats:{ hp:65,
          attack:130,
          defense:60,
          spatk:75,
          spdef:60,
          speed:75 },
        species:"Disaster",
        height:1.2,
        weight:47,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":163,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      "absol-mega":{ pokemonid:"absol",
        formid:"mega",
        formname:"Mega Absol",
        gen:6,
        release:"x-y",
        type1:"dark",
        type2:null,
        stats:{ hp:65,
          attack:150,
          defense:60,
          spatk:115,
          spdef:60,
          speed:115 },
        species:"Disaster",
        height:1.2,
        weight:49,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":198,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      wynaut:{ pokemonid:"wynaut",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:null,
        stats:{ hp:95,
          attack:23,
          defense:48,
          spatk:23,
          spdef:48,
          speed:23 },
        species:"Bright",
        height:0.6,
        weight:14,
        gender:"4:4",
        "catch-rate":125,
        "base-exp":52,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      snorunt:{ pokemonid:"snorunt",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ice",
        type2:null,
        stats:{ hp:50,
          attack:50,
          defense:50,
          spatk:50,
          spdef:50,
          speed:50 },
        species:"Snow Hat",
        height:0.7,
        weight:16.8,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      glalie:{ pokemonid:"glalie",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ice",
        type2:null,
        stats:{ hp:80,
          attack:80,
          defense:80,
          spatk:80,
          spdef:80,
          speed:80 },
        species:"Face",
        height:1.5,
        weight:256.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      "glalie-mega":{ pokemonid:"glalie",
        formid:"mega",
        formname:"Mega Glalie",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"ice",
        type2:null,
        stats:{ hp:80,
          attack:120,
          defense:80,
          spatk:120,
          spdef:80,
          speed:100 },
        species:"Face",
        height:2.1,
        weight:350.2,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":203,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      spheal:{ pokemonid:"spheal",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ice",
        type2:"water",
        stats:{ hp:70,
          attack:40,
          defense:50,
          spatk:55,
          spdef:50,
          speed:25 },
        species:"Clap",
        height:0.8,
        weight:39.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:1 } },
      sealeo:{ pokemonid:"sealeo",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ice",
        type2:"water",
        stats:{ hp:90,
          attack:60,
          defense:70,
          spatk:75,
          spdef:70,
          speed:45 },
        species:"Ball Roll",
        height:1.1,
        weight:87.6,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":144,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:2 } },
      walrein:{ pokemonid:"walrein",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ice",
        type2:"water",
        stats:{ hp:110,
          attack:80,
          defense:90,
          spatk:95,
          spdef:90,
          speed:65 },
        species:"Ice Break",
        height:1.4,
        weight:150.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:3 } },
      clamperl:{ pokemonid:"clamperl",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:35,
          attack:64,
          defense:85,
          spatk:74,
          spdef:55,
          speed:32 },
        species:"Bivalve",
        height:0.4,
        weight:52.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":69,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ defense:1 } },
      huntail:{ pokemonid:"huntail",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:55,
          attack:104,
          defense:105,
          spatk:94,
          spdef:75,
          speed:52 },
        species:"Deep Sea",
        height:1.7,
        weight:27,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":170,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ attack:1,
          defense:1 } },
      gorebyss:{ pokemonid:"gorebyss",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:55,
          attack:84,
          defense:105,
          spatk:114,
          spdef:75,
          speed:52 },
        species:"South Sea",
        height:1.8,
        weight:22.6,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":170,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ spatk:2 } },
      relicanth:{ pokemonid:"relicanth",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:"rock",
        stats:{ hp:100,
          attack:90,
          defense:130,
          spatk:45,
          spdef:65,
          speed:55 },
        species:"Longevity",
        height:1,
        weight:23.4,
        gender:"1:7",
        "catch-rate":25,
        "base-exp":170,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:1,
          defense:1 } },
      luvdisc:{ pokemonid:"luvdisc",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:43,
          attack:30,
          defense:55,
          spatk:40,
          spdef:65,
          speed:97 },
        species:"Rendezvous",
        height:0.6,
        weight:8.7,
        gender:"6:2",
        "catch-rate":225,
        "base-exp":116,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ speed:1 } },
      bagon:{ pokemonid:"bagon",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dragon",
        type2:null,
        stats:{ hp:45,
          attack:75,
          defense:60,
          spatk:40,
          spdef:30,
          speed:50 },
        species:"Rock Head",
        height:0.6,
        weight:42.1,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":60,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      shelgon:{ pokemonid:"shelgon",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dragon",
        type2:null,
        stats:{ hp:65,
          attack:95,
          defense:100,
          spatk:60,
          spdef:50,
          speed:50 },
        species:"Endurance",
        height:1.1,
        weight:110.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      salamence:{ pokemonid:"salamence",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dragon",
        type2:"flying",
        stats:{ hp:95,
          attack:135,
          defense:80,
          spatk:110,
          spdef:80,
          speed:100 },
        species:"Dragon",
        height:1.5,
        weight:102.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "salamence-mega":{ pokemonid:"salamence",
        formid:"mega",
        formname:"Mega Salamence",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"dragon",
        type2:"flying",
        stats:{ hp:95,
          attack:145,
          defense:130,
          spatk:120,
          spdef:90,
          speed:120 },
        species:"Dragon",
        height:1.8,
        weight:112.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":315,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      beldum:{ pokemonid:"beldum",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"steel",
        type2:"psychic",
        stats:{ hp:40,
          attack:55,
          defense:80,
          spatk:35,
          spdef:60,
          speed:30 },
        species:"Iron Ball",
        height:0.6,
        weight:95.2,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":60,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:1 } },
      metang:{ pokemonid:"metang",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"steel",
        type2:"psychic",
        stats:{ hp:60,
          attack:75,
          defense:100,
          spatk:55,
          spdef:80,
          speed:50 },
        species:"Iron Claw",
        height:1.2,
        weight:202.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":147,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      metagross:{ pokemonid:"metagross",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"steel",
        type2:"psychic",
        stats:{ hp:80,
          attack:135,
          defense:130,
          spatk:95,
          spdef:90,
          speed:70 },
        species:"Iron Leg",
        height:1.6,
        weight:550,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:3 } },
      "metagross-mega":{ pokemonid:"metagross",
        formid:"mega",
        formname:"Mega Metagross",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"steel",
        type2:"psychic",
        stats:{ hp:80,
          attack:145,
          defense:150,
          spatk:105,
          spdef:110,
          speed:110 },
        species:"Iron Leg",
        height:2.5,
        weight:942.9,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":315,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:3 } },
      regirock:{ pokemonid:"regirock",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"rock",
        type2:null,
        stats:{ hp:80,
          attack:100,
          defense:200,
          spatk:50,
          spdef:100,
          speed:50 },
        species:"Rock Peak",
        height:1.7,
        weight:230,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:3 } },
      regice:{ pokemonid:"regice",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ice",
        type2:null,
        stats:{ hp:80,
          attack:50,
          defense:100,
          spatk:100,
          spdef:200,
          speed:50 },
        species:"Iceberg",
        height:1.8,
        weight:175,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      registeel:{ pokemonid:"registeel",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"steel",
        type2:null,
        stats:{ hp:80,
          attack:75,
          defense:150,
          spatk:75,
          spdef:150,
          speed:50 },
        species:"Iron",
        height:1.9,
        weight:205,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:2,
          spdef:1 } },
      latias:{ pokemonid:"latias",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dragon",
        type2:"psychic",
        stats:{ hp:80,
          attack:80,
          defense:90,
          spatk:110,
          spdef:130,
          speed:110 },
        species:"Eon",
        height:1.4,
        weight:40,
        gender:"8:0",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:90,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      "latias-mega":{ pokemonid:"latias",
        formid:"mega",
        formname:"Mega Latias",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"dragon",
        type2:"psychic",
        stats:{ hp:80,
          attack:100,
          defense:120,
          spatk:140,
          spdef:150,
          speed:110 },
        species:"Eon",
        height:1.8,
        weight:52,
        gender:"8:0",
        "catch-rate":3,
        "base-exp":315,
        "egg-cycles":120,
        friendship:90,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      latios:{ pokemonid:"latios",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dragon",
        type2:"psychic",
        stats:{ hp:80,
          attack:90,
          defense:80,
          spatk:130,
          spdef:110,
          speed:110 },
        species:"Eon",
        height:2,
        weight:60,
        gender:0,
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:90,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "latios-mega":{ pokemonid:"latios",
        formid:"mega",
        formname:"Mega Latios",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"dragon",
        type2:"psychic",
        stats:{ hp:80,
          attack:130,
          defense:100,
          spatk:160,
          spdef:120,
          speed:110 },
        species:"Eon",
        height:2.3,
        weight:70,
        gender:0,
        "catch-rate":3,
        "base-exp":315,
        "egg-cycles":120,
        friendship:90,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      kyogre:{ pokemonid:"kyogre",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:100,
          attack:100,
          defense:90,
          spatk:150,
          spdef:140,
          speed:90 },
        species:"Sea Basin",
        height:4.5,
        weight:352,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":302,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "kyogre-primal":{ pokemonid:"kyogre",
        formid:"primal",
        formname:"Primal Kyogre",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"water",
        type2:null,
        stats:{ hp:100,
          attack:150,
          defense:90,
          spatk:180,
          spdef:160,
          speed:90 },
        species:"Sea Basin",
        height:9.8,
        weight:430,
        gender:"genderless",
        "catch-rate":5,
        "base-exp":347,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      groudon:{ pokemonid:"groudon",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"ground",
        type2:null,
        stats:{ hp:100,
          attack:150,
          defense:140,
          spatk:100,
          spdef:90,
          speed:90 },
        species:"Continent",
        height:3.5,
        weight:950,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":302,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "groudon-primal":{ pokemonid:"groudon",
        formid:"primal",
        formname:"Primal Groudon",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"ground",
        type2:"fire",
        stats:{ hp:100,
          attack:180,
          defense:160,
          spatk:150,
          spdef:90,
          speed:90 },
        species:"Continent",
        height:5,
        weight:999.7,
        gender:"genderless",
        "catch-rate":5,
        "base-exp":347,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      rayquaza:{ pokemonid:"rayquaza",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"dragon",
        type2:"flying",
        stats:{ hp:105,
          attack:150,
          defense:90,
          spatk:150,
          spdef:90,
          speed:95 },
        species:"Sky High",
        height:7,
        weight:206.5,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:2,
          spatk:1 } },
      "rayquaza-mega":{ pokemonid:"rayquaza",
        formid:"mega",
        formname:"Mega Rayquaza",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"dragon",
        type2:"flying",
        stats:{ hp:105,
          attack:180,
          defense:100,
          spatk:180,
          spdef:100,
          speed:115 },
        species:"Sky High",
        height:10.8,
        weight:392,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":351,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:2,
          spatk:1 } },
      jirachi:{ pokemonid:"jirachi",
        formid:null,
        formname:null,
        gen:3,
        release:"ruby-sapphire",
        type1:"steel",
        type2:"psychic",
        stats:{ hp:100,
          attack:100,
          defense:100,
          spatk:100,
          spdef:100,
          speed:100 },
        species:"Wish",
        height:0.3,
        weight:1.1,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      "deoxys-normal":{ pokemonid:"deoxys",
        formid:"normal",
        formname:"Normal Forme",
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:null,
        stats:{ hp:50,
          attack:150,
          defense:50,
          spatk:150,
          spdef:50,
          speed:150 },
        species:"DNA",
        height:1.7,
        weight:60.8,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          spatk:1,
          speed:1 } },
      "deoxys-attack":{ pokemonid:"deoxys",
        formid:"attack",
        formname:"Attack Forme",
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:null,
        stats:{ hp:50,
          attack:180,
          defense:20,
          spatk:180,
          spdef:20,
          speed:150 },
        species:"DNA",
        height:1.7,
        weight:60.8,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:2,
          spatk:1 } },
      "deoxys-defense":{ pokemonid:"deoxys",
        formid:"defense",
        formname:"Defense Forme",
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:null,
        stats:{ hp:50,
          attack:70,
          defense:160,
          spatk:70,
          spdef:160,
          speed:90 },
        species:"DNA",
        height:1.7,
        weight:60.8,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ defense:2,
          spdef:1 } },
      "deoxys-speed":{ pokemonid:"deoxys",
        formid:"speed",
        formname:"Speed Forme",
        gen:3,
        release:"ruby-sapphire",
        type1:"psychic",
        type2:null,
        stats:{ hp:50,
          attack:95,
          defense:90,
          spatk:95,
          spdef:90,
          speed:180 },
        species:"DNA",
        height:1.7,
        weight:60.8,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      turtwig:{ pokemonid:"turtwig",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:null,
        stats:{ hp:55,
          attack:68,
          defense:64,
          spatk:45,
          spdef:55,
          speed:31 },
        species:"Tiny Leaf",
        height:0.4,
        weight:10.2,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      grotle:{ pokemonid:"grotle",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:null,
        stats:{ hp:75,
          attack:89,
          defense:85,
          spatk:55,
          spdef:65,
          speed:36 },
        species:"Grove",
        height:1.1,
        weight:97,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          defense:1 } },
      torterra:{ pokemonid:"torterra",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:"ground",
        stats:{ hp:95,
          attack:109,
          defense:105,
          spatk:75,
          spdef:85,
          speed:56 },
        species:"Continent",
        height:2.2,
        weight:310,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":236,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2,
          defense:1 } },
      chimchar:{ pokemonid:"chimchar",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"fire",
        type2:null,
        stats:{ hp:44,
          attack:58,
          defense:44,
          spatk:58,
          spdef:44,
          speed:61 },
        species:"Chimp",
        height:0.5,
        weight:6.2,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      monferno:{ pokemonid:"monferno",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"fire",
        type2:"fighting",
        stats:{ hp:64,
          attack:78,
          defense:52,
          spatk:78,
          spdef:52,
          speed:81 },
        species:"Playful",
        height:0.9,
        weight:22,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1,
          speed:1 } },
      infernape:{ pokemonid:"infernape",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"fire",
        type2:"fighting",
        stats:{ hp:76,
          attack:104,
          defense:71,
          spatk:104,
          spdef:71,
          speed:108 },
        species:"Flame",
        height:1.2,
        weight:55,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":240,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          spatk:1,
          speed:1 } },
      piplup:{ pokemonid:"piplup",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:null,
        stats:{ hp:53,
          attack:51,
          defense:53,
          spatk:61,
          spdef:56,
          speed:40 },
        species:"Penguin",
        height:0.4,
        weight:5.2,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      prinplup:{ pokemonid:"prinplup",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:null,
        stats:{ hp:64,
          attack:66,
          defense:68,
          spatk:81,
          spdef:76,
          speed:50 },
        species:"Penguin",
        height:0.8,
        weight:23,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      empoleon:{ pokemonid:"empoleon",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:"steel",
        stats:{ hp:84,
          attack:86,
          defense:88,
          spatk:111,
          spdef:101,
          speed:60 },
        species:"Emperor",
        height:1.7,
        weight:84.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      starly:{ pokemonid:"starly",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:"flying",
        stats:{ hp:40,
          attack:55,
          defense:30,
          spatk:30,
          spdef:30,
          speed:60 },
        species:"Starling",
        height:0.3,
        weight:2,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":49,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      staravia:{ pokemonid:"staravia",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:"flying",
        stats:{ hp:55,
          attack:75,
          defense:50,
          spatk:40,
          spdef:40,
          speed:80 },
        species:"Starling",
        height:0.6,
        weight:15.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":119,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      staraptor:{ pokemonid:"staraptor",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:"flying",
        stats:{ hp:85,
          attack:120,
          defense:70,
          spatk:50,
          spdef:60,
          speed:100 },
        species:"Predator",
        height:1.2,
        weight:24.9,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":218,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      bidoof:{ pokemonid:"bidoof",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:59,
          attack:45,
          defense:40,
          spatk:35,
          spdef:40,
          speed:31 },
        species:"Plump Mouse",
        height:0.5,
        weight:20,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":50,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      bibarel:{ pokemonid:"bibarel",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:"water",
        stats:{ hp:79,
          attack:85,
          defense:60,
          spatk:55,
          spdef:60,
          speed:71 },
        species:"Beaver",
        height:1,
        weight:31.5,
        gender:"4:4",
        "catch-rate":127,
        "base-exp":144,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      kricketot:{ pokemonid:"kricketot",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"bug",
        type2:null,
        stats:{ hp:37,
          attack:25,
          defense:41,
          spatk:25,
          spdef:41,
          speed:25 },
        species:"Cricket",
        height:0.3,
        weight:2.2,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":39,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      kricketune:{ pokemonid:"kricketune",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"bug",
        type2:null,
        stats:{ hp:77,
          attack:85,
          defense:51,
          spatk:55,
          spdef:51,
          speed:65 },
        species:"Cricket",
        height:1,
        weight:25.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":134,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      shinx:{ pokemonid:"shinx",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:null,
        stats:{ hp:45,
          attack:65,
          defense:34,
          spatk:40,
          spdef:34,
          speed:45 },
        species:"Flash",
        height:0.5,
        weight:9.5,
        gender:"4:4",
        "catch-rate":235,
        "base-exp":53,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      luxio:{ pokemonid:"luxio",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:null,
        stats:{ hp:60,
          attack:85,
          defense:49,
          spatk:60,
          spdef:49,
          speed:60 },
        species:"Spark",
        height:0.9,
        weight:30.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":127,
        "egg-cycles":20,
        friendship:100,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      luxray:{ pokemonid:"luxray",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:null,
        stats:{ hp:80,
          attack:120,
          defense:79,
          spatk:95,
          spdef:79,
          speed:70 },
        species:"Gleam Eyes",
        height:1.4,
        weight:42,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":235,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      budew:{ pokemonid:"budew",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:"poison",
        stats:{ hp:40,
          attack:30,
          defense:35,
          spatk:50,
          spdef:70,
          speed:55 },
        species:"Bud",
        height:0.2,
        weight:1.2,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":56,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      roserade:{ pokemonid:"roserade",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:"poison",
        stats:{ hp:60,
          attack:70,
          defense:65,
          spatk:125,
          spdef:105,
          speed:90 },
        species:"Bouquet",
        height:0.9,
        weight:14.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":232,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      cranidos:{ pokemonid:"cranidos",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"rock",
        type2:null,
        stats:{ hp:67,
          attack:125,
          defense:40,
          spatk:30,
          spdef:30,
          speed:58 },
        species:"Head Butt",
        height:0.9,
        weight:31.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":70,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ attack:1 } },
      rampardos:{ pokemonid:"rampardos",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"rock",
        type2:null,
        stats:{ hp:97,
          attack:165,
          defense:60,
          spatk:65,
          spdef:50,
          speed:58 },
        species:"Head Butt",
        height:1.6,
        weight:102.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":173,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ attack:2 } },
      shieldon:{ pokemonid:"shieldon",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"rock",
        type2:"steel",
        stats:{ hp:30,
          attack:42,
          defense:118,
          spatk:42,
          spdef:88,
          speed:30 },
        species:"Shield",
        height:0.5,
        weight:57,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":70,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ defense:1 } },
      bastiodon:{ pokemonid:"bastiodon",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"rock",
        type2:"steel",
        stats:{ hp:60,
          attack:52,
          defense:168,
          spatk:47,
          spdef:138,
          speed:30 },
        species:"Shield",
        height:1.3,
        weight:149.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":173,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ defense:2 } },
      burmy:{ pokemonid:"burmy",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"bug",
        type2:null,
        stats:{ hp:40,
          attack:29,
          defense:45,
          spatk:29,
          spdef:45,
          speed:36 },
        species:"Bagworm",
        height:0.2,
        weight:3.4,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":45,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      "wormadam-plant":{ pokemonid:"wormadam",
        formid:"plant",
        formname:"Plant Cloak",
        gen:4,
        release:"diamond-pearl",
        type1:"bug",
        type2:"grass",
        stats:{ hp:60,
          attack:59,
          defense:85,
          spatk:79,
          spdef:105,
          speed:36 },
        species:"Bagworm",
        height:0.5,
        weight:6.5,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":148,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      "wormadam-sandy":{ pokemonid:"wormadam",
        formid:"sandy",
        formname:"Sandy Cloak",
        gen:4,
        release:"diamond-pearl",
        type1:"bug",
        type2:"ground",
        stats:{ hp:60,
          attack:79,
          defense:105,
          spatk:59,
          spdef:85,
          speed:36 },
        species:"Bagworm",
        height:0.5,
        weight:6.5,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":148,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "wormadam-trash":{ pokemonid:"wormadam",
        formid:"trash",
        formname:"Trash Cloak",
        gen:4,
        release:"diamond-pearl",
        type1:"bug",
        type2:"steel",
        stats:{ hp:60,
          attack:69,
          defense:95,
          spatk:69,
          spdef:95,
          speed:36 },
        species:"Bagworm",
        height:0.5,
        weight:6.5,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":148,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1,
          spdef:1 } },
      mothim:{ pokemonid:"mothim",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"bug",
        type2:"flying",
        stats:{ hp:70,
          attack:94,
          defense:50,
          spatk:94,
          spdef:50,
          speed:66 },
        species:"Moth",
        height:0.9,
        weight:23.3,
        gender:0,
        "catch-rate":45,
        "base-exp":148,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1,
          spatk:1 } },
      combee:{ pokemonid:"combee",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"bug",
        type2:"flying",
        stats:{ hp:30,
          attack:30,
          defense:42,
          spatk:30,
          spdef:42,
          speed:70 },
        species:"Tiny Bee",
        height:0.3,
        weight:5.5,
        gender:"1:7",
        "catch-rate":120,
        "base-exp":49,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      vespiquen:{ pokemonid:"vespiquen",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"bug",
        type2:"flying",
        stats:{ hp:70,
          attack:80,
          defense:102,
          spatk:80,
          spdef:102,
          speed:40 },
        species:"Beehive",
        height:1.2,
        weight:38.5,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":166,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1,
          spdef:1 } },
      pachirisu:{ pokemonid:"pachirisu",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:null,
        stats:{ hp:60,
          attack:45,
          defense:70,
          spatk:45,
          spdef:90,
          speed:95 },
        species:"EleSquirrel",
        height:0.4,
        weight:3.9,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":142,
        "egg-cycles":10,
        friendship:100,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      buizel:{ pokemonid:"buizel",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:null,
        stats:{ hp:55,
          attack:65,
          defense:35,
          spatk:60,
          spdef:30,
          speed:85 },
        species:"Sea Weasel",
        height:0.7,
        weight:29.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      floatzel:{ pokemonid:"floatzel",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:null,
        stats:{ hp:85,
          attack:105,
          defense:55,
          spatk:85,
          spdef:50,
          speed:115 },
        species:"Sea Weasel",
        height:1.1,
        weight:33.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":173,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      cherubi:{ pokemonid:"cherubi",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:null,
        stats:{ hp:45,
          attack:35,
          defense:45,
          spatk:62,
          spdef:53,
          speed:35 },
        species:"Cherry",
        height:0.4,
        weight:3.3,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":55,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      cherrim:{ pokemonid:"cherrim",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:null,
        stats:{ hp:70,
          attack:60,
          defense:70,
          spatk:87,
          spdef:78,
          speed:85 },
        species:"Blossom",
        height:0.5,
        weight:9.3,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":158,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      shellos:{ pokemonid:"shellos",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:null,
        stats:{ hp:76,
          attack:48,
          defense:48,
          spatk:57,
          spdef:62,
          speed:34 },
        species:"Sea Slug",
        height:0.3,
        weight:6.3,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":65,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      gastrodon:{ pokemonid:"gastrodon",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:"ground",
        stats:{ hp:111,
          attack:83,
          defense:68,
          spatk:92,
          spdef:82,
          speed:39 },
        species:"Sea Slug",
        height:0.9,
        weight:29.9,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":166,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      ambipom:{ pokemonid:"ambipom",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:75,
          attack:100,
          defense:66,
          spatk:60,
          spdef:66,
          speed:115 },
        species:"Long Tail",
        height:1.2,
        weight:20.3,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":169,
        "egg-cycles":20,
        friendship:100,
        "growth-rate":"fast",
        "ev-yield":{ speed:2 } },
      drifloon:{ pokemonid:"drifloon",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ghost",
        type2:"flying",
        stats:{ hp:90,
          attack:50,
          defense:34,
          spatk:60,
          spdef:44,
          speed:70 },
        species:"Balloon",
        height:0.4,
        weight:1.2,
        gender:"4:4",
        "catch-rate":125,
        "base-exp":70,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ hp:1 } },
      drifblim:{ pokemonid:"drifblim",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ghost",
        type2:"flying",
        stats:{ hp:150,
          attack:80,
          defense:44,
          spatk:90,
          spdef:54,
          speed:80 },
        species:"Blimp",
        height:1.2,
        weight:15,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":174,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"fluctuating",
        "ev-yield":{ hp:2 } },
      buneary:{ pokemonid:"buneary",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:55,
          attack:66,
          defense:44,
          spatk:44,
          spdef:56,
          speed:85 },
        species:"Rabbit",
        height:0.4,
        weight:5.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":70,
        "egg-cycles":20,
        friendship:0,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      lopunny:{ pokemonid:"lopunny",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:65,
          attack:76,
          defense:84,
          spatk:54,
          spdef:96,
          speed:105 },
        species:"Rabbit",
        height:1.2,
        weight:33.3,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":168,
        "egg-cycles":20,
        friendship:140,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "lopunny-mega":{ pokemonid:"lopunny",
        formid:"mega",
        formname:"Mega Lopunny",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"normal",
        type2:"fighting",
        stats:{ hp:65,
          attack:136,
          defense:94,
          spatk:54,
          spdef:96,
          speed:135 },
        species:"Rabbit",
        height:1.3,
        weight:28.3,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":203,
        "egg-cycles":20,
        friendship:140,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      mismagius:{ pokemonid:"mismagius",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ghost",
        type2:null,
        stats:{ hp:60,
          attack:60,
          defense:60,
          spatk:105,
          spdef:105,
          speed:105 },
        species:"Magical",
        height:0.9,
        weight:4.4,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":173,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"fast",
        "ev-yield":{ spatk:1,
          spdef:1 } },
      honchkrow:{ pokemonid:"honchkrow",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"dark",
        type2:"flying",
        stats:{ hp:100,
          attack:125,
          defense:52,
          spatk:105,
          spdef:52,
          speed:71 },
        species:"Big Boss",
        height:0.9,
        weight:27.3,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":177,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      glameow:{ pokemonid:"glameow",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:49,
          attack:55,
          defense:42,
          spatk:42,
          spdef:37,
          speed:85 },
        species:"Catty",
        height:0.5,
        weight:3.9,
        gender:"6:2",
        "catch-rate":190,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ speed:1 } },
      purugly:{ pokemonid:"purugly",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:71,
          attack:82,
          defense:64,
          spatk:64,
          spdef:59,
          speed:112 },
        species:"Tiger Cat",
        height:1,
        weight:43.8,
        gender:"6:2",
        "catch-rate":75,
        "base-exp":158,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ speed:2 } },
      chingling:{ pokemonid:"chingling",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"psychic",
        type2:null,
        stats:{ hp:45,
          attack:30,
          defense:50,
          spatk:65,
          spdef:50,
          speed:45 },
        species:"Bell",
        height:0.2,
        weight:0.6,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":57,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spatk:1 } },
      stunky:{ pokemonid:"stunky",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"poison",
        type2:"dark",
        stats:{ hp:63,
          attack:63,
          defense:47,
          spatk:41,
          spdef:41,
          speed:74 },
        species:"Skunk",
        height:0.4,
        weight:19.2,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      skuntank:{ pokemonid:"skuntank",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"poison",
        type2:"dark",
        stats:{ hp:103,
          attack:93,
          defense:67,
          spatk:71,
          spdef:61,
          speed:84 },
        species:"Skunk",
        height:1,
        weight:38,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      bronzor:{ pokemonid:"bronzor",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"steel",
        type2:"psychic",
        stats:{ hp:57,
          attack:24,
          defense:86,
          spatk:24,
          spdef:86,
          speed:23 },
        species:"Bronze",
        height:0.5,
        weight:60.5,
        gender:"genderless",
        "catch-rate":255,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      bronzong:{ pokemonid:"bronzong",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"steel",
        type2:"psychic",
        stats:{ hp:67,
          attack:89,
          defense:116,
          spatk:79,
          spdef:116,
          speed:33 },
        species:"Bronze Bell",
        height:1.3,
        weight:187,
        gender:"genderless",
        "catch-rate":90,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1,
          spdef:1 } },
      bonsly:{ pokemonid:"bonsly",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"rock",
        type2:null,
        stats:{ hp:50,
          attack:80,
          defense:95,
          spatk:10,
          spdef:45,
          speed:10 },
        species:"Bonsai",
        height:0.5,
        weight:15,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      "mime-jr":{ pokemonid:"mime-jr",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"psychic",
        type2:"fairy",
        stats:{ hp:20,
          attack:25,
          defense:45,
          spatk:70,
          spdef:90,
          speed:60 },
        species:"Mime",
        height:0.6,
        weight:13,
        gender:"4:4",
        "catch-rate":145,
        "base-exp":62,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      happiny:{ pokemonid:"happiny",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:100,
          attack:5,
          defense:5,
          spatk:15,
          spdef:65,
          speed:30 },
        species:"Playhouse",
        height:0.6,
        weight:24.4,
        gender:"8:0",
        "catch-rate":130,
        "base-exp":110,
        "egg-cycles":40,
        friendship:140,
        "growth-rate":"fast",
        "ev-yield":{ hp:1 } },
      chatot:{ pokemonid:"chatot",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:"flying",
        stats:{ hp:76,
          attack:65,
          defense:45,
          spatk:92,
          spdef:42,
          speed:91 },
        species:"Music Note",
        height:0.5,
        weight:1.9,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":144,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      spiritomb:{ pokemonid:"spiritomb",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ghost",
        type2:"dark",
        stats:{ hp:50,
          attack:92,
          defense:108,
          spatk:92,
          spdef:108,
          speed:35 },
        species:"Forbidden",
        height:1,
        weight:108,
        gender:"4:4",
        "catch-rate":100,
        "base-exp":170,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1,
          spdef:1 } },
      gible:{ pokemonid:"gible",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"dragon",
        type2:"ground",
        stats:{ hp:58,
          attack:70,
          defense:45,
          spatk:40,
          spdef:45,
          speed:42 },
        species:"Land Shark",
        height:0.7,
        weight:20.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":60,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      gabite:{ pokemonid:"gabite",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"dragon",
        type2:"ground",
        stats:{ hp:68,
          attack:90,
          defense:65,
          spatk:50,
          spdef:55,
          speed:82 },
        species:"Cave",
        height:1.4,
        weight:56,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":144,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      garchomp:{ pokemonid:"garchomp",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"dragon",
        type2:"ground",
        stats:{ hp:108,
          attack:130,
          defense:95,
          spatk:80,
          spdef:85,
          speed:102 },
        species:"Mach",
        height:1.9,
        weight:95,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "garchomp-mega":{ pokemonid:"garchomp",
        formid:"mega",
        formname:"Mega Garchomp",
        gen:6,
        release:"x-y",
        type1:"dragon",
        type2:"ground",
        stats:{ hp:108,
          attack:170,
          defense:115,
          spatk:120,
          spdef:95,
          speed:92 },
        species:"Mach",
        height:1.9,
        weight:95,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":315,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      munchlax:{ pokemonid:"munchlax",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:135,
          attack:85,
          defense:40,
          spatk:40,
          spdef:85,
          speed:5 },
        species:"Big Eater",
        height:0.6,
        weight:105,
        gender:"1:7",
        "catch-rate":50,
        "base-exp":78,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:1 } },
      riolu:{ pokemonid:"riolu",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"fighting",
        type2:null,
        stats:{ hp:40,
          attack:70,
          defense:40,
          spatk:35,
          spdef:40,
          speed:60 },
        species:"Emanation",
        height:0.7,
        weight:20.2,
        gender:"1:7",
        "catch-rate":75,
        "base-exp":57,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      lucario:{ pokemonid:"lucario",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"fighting",
        type2:"steel",
        stats:{ hp:70,
          attack:110,
          defense:70,
          spatk:115,
          spdef:70,
          speed:90 },
        species:"Aura",
        height:1.2,
        weight:54,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":184,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          spatk:1 } },
      "lucario-mega":{ pokemonid:"lucario",
        formid:"mega",
        formname:"Mega Lucario",
        gen:6,
        release:"x-y",
        type1:"fighting",
        type2:"steel",
        stats:{ hp:70,
          attack:145,
          defense:88,
          spatk:140,
          spdef:70,
          speed:112 },
        species:"Aura",
        height:1.3,
        weight:57.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":219,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          spatk:1 } },
      hippopotas:{ pokemonid:"hippopotas",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ground",
        type2:null,
        stats:{ hp:68,
          attack:72,
          defense:78,
          spatk:38,
          spdef:42,
          speed:32 },
        species:"Hippo",
        height:0.8,
        weight:49.5,
        gender:"4:4",
        "catch-rate":140,
        "base-exp":66,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:1 } },
      hippowdon:{ pokemonid:"hippowdon",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ground",
        type2:null,
        stats:{ hp:108,
          attack:112,
          defense:118,
          spatk:68,
          spdef:72,
          speed:47 },
        species:"Heavyweight",
        height:2,
        weight:300,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":184,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      skorupi:{ pokemonid:"skorupi",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"poison",
        type2:"bug",
        stats:{ hp:40,
          attack:50,
          defense:90,
          spatk:30,
          spdef:55,
          speed:65 },
        species:"Scorpion",
        height:0.8,
        weight:12,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:1 } },
      drapion:{ pokemonid:"drapion",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"poison",
        type2:"dark",
        stats:{ hp:70,
          attack:90,
          defense:110,
          spatk:60,
          spdef:75,
          speed:95 },
        species:"Ogre Scorp",
        height:1.3,
        weight:61.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      croagunk:{ pokemonid:"croagunk",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"poison",
        type2:"fighting",
        stats:{ hp:48,
          attack:61,
          defense:40,
          spatk:61,
          spdef:40,
          speed:50 },
        species:"Toxic Mouth",
        height:0.7,
        weight:23,
        gender:"4:4",
        "catch-rate":140,
        "base-exp":60,
        "egg-cycles":10,
        friendship:100,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      toxicroak:{ pokemonid:"toxicroak",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"poison",
        type2:"fighting",
        stats:{ hp:83,
          attack:106,
          defense:65,
          spatk:86,
          spdef:65,
          speed:85 },
        species:"Toxic Mouth",
        height:1.3,
        weight:44.4,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      carnivine:{ pokemonid:"carnivine",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:null,
        stats:{ hp:74,
          attack:100,
          defense:72,
          spatk:90,
          spdef:72,
          speed:46 },
        species:"Bug Catcher",
        height:1.4,
        weight:27,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":159,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      finneon:{ pokemonid:"finneon",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:null,
        stats:{ hp:49,
          attack:49,
          defense:56,
          spatk:49,
          spdef:61,
          speed:66 },
        species:"Wing Fish",
        height:0.4,
        weight:7,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ speed:1 } },
      lumineon:{ pokemonid:"lumineon",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:null,
        stats:{ hp:69,
          attack:69,
          defense:76,
          spatk:69,
          spdef:86,
          speed:91 },
        species:"Neon",
        height:1.2,
        weight:24,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":161,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"erratic",
        "ev-yield":{ speed:2 } },
      mantyke:{ pokemonid:"mantyke",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:"flying",
        stats:{ hp:45,
          attack:20,
          defense:50,
          spatk:60,
          spdef:120,
          speed:50 },
        species:"Kite",
        height:1,
        weight:65,
        gender:"4:4",
        "catch-rate":25,
        "base-exp":69,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spdef:1 } },
      snover:{ pokemonid:"snover",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:"ice",
        stats:{ hp:60,
          attack:62,
          defense:50,
          spatk:62,
          spdef:60,
          speed:40 },
        species:"Frost Tree",
        height:1,
        weight:50.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":67,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      abomasnow:{ pokemonid:"abomasnow",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:"ice",
        stats:{ hp:90,
          attack:92,
          defense:75,
          spatk:92,
          spdef:85,
          speed:60 },
        species:"Frost Tree",
        height:2.2,
        weight:135.5,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":173,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          spatk:1 } },
      "abomasnow-mega":{ pokemonid:"abomasnow",
        formid:"mega",
        formname:"Mega Abomasnow",
        gen:6,
        release:"x-y",
        type1:"grass",
        type2:"ice",
        stats:{ hp:90,
          attack:132,
          defense:105,
          spatk:132,
          spdef:105,
          speed:30 },
        species:"Frost Tree",
        height:2.7,
        weight:185,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":208,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          spatk:1 } },
      weavile:{ pokemonid:"weavile",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"dark",
        type2:"ice",
        stats:{ hp:70,
          attack:120,
          defense:65,
          spatk:45,
          spdef:85,
          speed:125 },
        species:"Sharp Claw",
        height:1.1,
        weight:34,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":179,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          speed:1 } },
      magnezone:{ pokemonid:"magnezone",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:"steel",
        stats:{ hp:70,
          attack:70,
          defense:115,
          spatk:130,
          spdef:90,
          speed:60 },
        species:"Magnet Area",
        height:1.2,
        weight:180,
        gender:"genderless",
        "catch-rate":30,
        "base-exp":241,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:3 } },
      lickilicky:{ pokemonid:"lickilicky",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:110,
          attack:85,
          defense:95,
          spatk:80,
          spdef:95,
          speed:50 },
        species:"Licking",
        height:1.7,
        weight:140,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":180,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:3 } },
      rhyperior:{ pokemonid:"rhyperior",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ground",
        type2:"rock",
        stats:{ hp:115,
          attack:140,
          defense:130,
          spatk:55,
          spdef:55,
          speed:40 },
        species:"Drill",
        height:2.4,
        weight:282.8,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":241,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      tangrowth:{ pokemonid:"tangrowth",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:null,
        stats:{ hp:100,
          attack:100,
          defense:125,
          spatk:110,
          spdef:50,
          speed:50 },
        species:"Vine",
        height:2,
        weight:128.6,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":187,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      electivire:{ pokemonid:"electivire",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:null,
        stats:{ hp:75,
          attack:123,
          defense:67,
          spatk:95,
          spdef:85,
          speed:95 },
        species:"Thunderbolt",
        height:1.8,
        weight:138.6,
        gender:"2:6",
        "catch-rate":30,
        "base-exp":243,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:3 } },
      magmortar:{ pokemonid:"magmortar",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"fire",
        type2:null,
        stats:{ hp:75,
          attack:95,
          defense:67,
          spatk:125,
          spdef:95,
          speed:83 },
        species:"Blast",
        height:1.6,
        weight:68,
        gender:"2:6",
        "catch-rate":30,
        "base-exp":243,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:3 } },
      togekiss:{ pokemonid:"togekiss",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"fairy",
        type2:"flying",
        stats:{ hp:85,
          attack:50,
          defense:95,
          spatk:120,
          spdef:115,
          speed:80 },
        species:"Jubilee",
        height:1.5,
        weight:38,
        gender:"1:7",
        "catch-rate":30,
        "base-exp":245,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spatk:2,
          spdef:1 } },
      yanmega:{ pokemonid:"yanmega",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"bug",
        type2:"flying",
        stats:{ hp:86,
          attack:76,
          defense:86,
          spatk:116,
          spdef:56,
          speed:95 },
        species:"Ogre Darner",
        height:1.9,
        weight:51.5,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":180,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      leafeon:{ pokemonid:"leafeon",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:null,
        stats:{ hp:65,
          attack:110,
          defense:130,
          spatk:60,
          spdef:65,
          speed:95 },
        species:"Verdant",
        height:1,
        weight:25.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":184,
        "egg-cycles":35,
        friendship:35,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      glaceon:{ pokemonid:"glaceon",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ice",
        type2:null,
        stats:{ hp:65,
          attack:60,
          defense:110,
          spatk:130,
          spdef:95,
          speed:65 },
        species:"Fresh Snow",
        height:0.8,
        weight:25.9,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":184,
        "egg-cycles":35,
        friendship:35,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      gliscor:{ pokemonid:"gliscor",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ground",
        type2:"flying",
        stats:{ hp:75,
          attack:95,
          defense:125,
          spatk:45,
          spdef:75,
          speed:95 },
        species:"Fang Scorp",
        height:2,
        weight:42.5,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":179,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:2 } },
      mamoswine:{ pokemonid:"mamoswine",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ice",
        type2:"ground",
        stats:{ hp:110,
          attack:130,
          defense:80,
          spatk:70,
          spdef:60,
          speed:80 },
        species:"Twin Tusk",
        height:2.5,
        weight:291,
        gender:"4:4",
        "catch-rate":50,
        "base-exp":239,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "porygon-z":{ pokemonid:"porygon-z",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:85,
          attack:80,
          defense:70,
          spatk:135,
          spdef:75,
          speed:90 },
        species:"Virtual",
        height:0.9,
        weight:34,
        gender:"genderless",
        "catch-rate":30,
        "base-exp":241,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:3 } },
      gallade:{ pokemonid:"gallade",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"psychic",
        type2:"fighting",
        stats:{ hp:68,
          attack:125,
          defense:65,
          spatk:65,
          spdef:115,
          speed:80 },
        species:"Blade",
        height:1.6,
        weight:52,
        gender:0,
        "catch-rate":45,
        "base-exp":233,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "gallade-mega":{ pokemonid:"gallade",
        formid:"mega",
        formname:"Mega Gallade",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"psychic",
        type2:"fighting",
        stats:{ hp:68,
          attack:165,
          defense:95,
          spatk:65,
          spdef:115,
          speed:110 },
        species:"Blade",
        height:1.6,
        weight:56.4,
        gender:0,
        "catch-rate":45,
        "base-exp":278,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      probopass:{ pokemonid:"probopass",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"rock",
        type2:"steel",
        stats:{ hp:60,
          attack:55,
          defense:145,
          spatk:75,
          spdef:150,
          speed:40 },
        species:"Compass",
        height:1.4,
        weight:340,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":184,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1,
          spdef:2 } },
      dusknoir:{ pokemonid:"dusknoir",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ghost",
        type2:null,
        stats:{ hp:45,
          attack:100,
          defense:135,
          spatk:65,
          spdef:135,
          speed:45 },
        species:"Gripper",
        height:2.2,
        weight:106.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":236,
        "egg-cycles":25,
        friendship:35,
        "growth-rate":"fast",
        "ev-yield":{ defense:1,
          spdef:2 } },
      froslass:{ pokemonid:"froslass",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"ice",
        type2:"ghost",
        stats:{ hp:70,
          attack:80,
          defense:70,
          spatk:80,
          spdef:70,
          speed:110 },
        species:"Snow Land",
        height:1.3,
        weight:26.6,
        gender:"8:0",
        "catch-rate":75,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      rotom:{ pokemonid:"rotom",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:"ghost",
        stats:{ hp:50,
          attack:50,
          defense:77,
          spatk:95,
          spdef:77,
          speed:91 },
        species:"Plasma",
        height:0.3,
        weight:0.3,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":154,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1,
          speed:1 } },
      "rotom-heat":{ pokemonid:"rotom",
        formid:"heat",
        formname:"Heat Rotom",
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:"fire",
        stats:{ hp:50,
          attack:65,
          defense:107,
          spatk:105,
          spdef:107,
          speed:86 },
        species:"Plasma",
        height:0.3,
        weight:0.3,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":182,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1,
          speed:1 } },
      "rotom-wash":{ pokemonid:"rotom",
        formid:"wash",
        formname:"Wash Rotom",
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:"water",
        stats:{ hp:50,
          attack:65,
          defense:107,
          spatk:105,
          spdef:107,
          speed:86 },
        species:"Plasma",
        height:0.3,
        weight:0.3,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":182,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1,
          speed:1 } },
      "rotom-frost":{ pokemonid:"rotom",
        formid:"frost",
        formname:"Frost Rotom",
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:"ice",
        stats:{ hp:50,
          attack:65,
          defense:107,
          spatk:105,
          spdef:107,
          speed:86 },
        species:"Plasma",
        height:0.3,
        weight:0.3,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":182,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1,
          speed:1 } },
      "rotom-fan":{ pokemonid:"rotom",
        formid:"fan",
        formname:"Fan Rotom",
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:"flying",
        stats:{ hp:50,
          attack:65,
          defense:107,
          spatk:105,
          spdef:107,
          speed:86 },
        species:"Plasma",
        height:0.3,
        weight:0.3,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":182,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1,
          speed:1 } },
      "rotom-mow":{ pokemonid:"rotom",
        formid:"mow",
        formname:"Mow Rotom",
        gen:4,
        release:"diamond-pearl",
        type1:"electric",
        type2:"grass",
        stats:{ hp:50,
          attack:65,
          defense:107,
          spatk:105,
          spdef:107,
          speed:86 },
        species:"Plasma",
        height:0.3,
        weight:0.3,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":182,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1,
          speed:1 } },
      uxie:{ pokemonid:"uxie",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"psychic",
        type2:null,
        stats:{ hp:75,
          attack:75,
          defense:130,
          spatk:75,
          spdef:130,
          speed:95 },
        species:"Knowledge",
        height:0.3,
        weight:0.3,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:140,
        "growth-rate":"slow",
        "ev-yield":{ defense:2,
          spdef:1 } },
      mesprit:{ pokemonid:"mesprit",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"psychic",
        type2:null,
        stats:{ hp:80,
          attack:105,
          defense:105,
          spatk:105,
          spdef:105,
          speed:80 },
        species:"Emotion",
        height:0.3,
        weight:0.3,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:140,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          spatk:1,
          spdef:1 } },
      azelf:{ pokemonid:"azelf",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"psychic",
        type2:null,
        stats:{ hp:75,
          attack:125,
          defense:70,
          spatk:125,
          spdef:70,
          speed:115 },
        species:"Willpower",
        height:0.3,
        weight:0.3,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:140,
        "growth-rate":"slow",
        "ev-yield":{ attack:2,
          spatk:1 } },
      dialga:{ pokemonid:"dialga",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"steel",
        type2:"dragon",
        stats:{ hp:100,
          attack:120,
          defense:120,
          spatk:150,
          spdef:100,
          speed:90 },
        species:"Temporal",
        height:5.4,
        weight:683,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      palkia:{ pokemonid:"palkia",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:"dragon",
        stats:{ hp:90,
          attack:120,
          defense:100,
          spatk:150,
          spdef:120,
          speed:100 },
        species:"Spatial",
        height:4.2,
        weight:336,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      heatran:{ pokemonid:"heatran",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"fire",
        type2:"steel",
        stats:{ hp:91,
          attack:90,
          defense:106,
          spatk:130,
          spdef:106,
          speed:77 },
        species:"Lava Dome",
        height:1.7,
        weight:430,
        gender:"4:4",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":10,
        friendship:100,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      regigigas:{ pokemonid:"regigigas",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:110,
          attack:160,
          defense:110,
          spatk:80,
          spdef:110,
          speed:100 },
        species:"Colossal",
        height:3.7,
        weight:420,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":302,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "giratina-altered":{ pokemonid:"giratina",
        formid:"altered",
        formname:"Altered Forme",
        gen:4,
        release:"diamond-pearl",
        type1:"ghost",
        type2:"dragon",
        stats:{ hp:150,
          attack:100,
          defense:120,
          spatk:100,
          spdef:120,
          speed:90 },
        species:"Renegade",
        height:4.5,
        weight:750,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      "giratina-origin":{ pokemonid:"giratina",
        formid:"origin",
        formname:"Origin Forme",
        gen:4,
        release:"diamond-pearl",
        type1:"ghost",
        type2:"dragon",
        stats:{ hp:150,
          attack:120,
          defense:100,
          spatk:120,
          spdef:100,
          speed:90 },
        species:"Renegade",
        height:6.9,
        weight:650,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      cresselia:{ pokemonid:"cresselia",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"psychic",
        type2:null,
        stats:{ hp:120,
          attack:70,
          defense:120,
          spatk:75,
          spdef:130,
          speed:85 },
        species:"Lunar",
        height:1.5,
        weight:85.6,
        gender:"8:0",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      phione:{ pokemonid:"phione",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:null,
        stats:{ hp:80,
          attack:80,
          defense:80,
          spatk:80,
          spdef:80,
          speed:80 },
        species:"Sea Drifter",
        height:0.4,
        weight:3.1,
        gender:"genderless",
        "catch-rate":30,
        "base-exp":216,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:1 } },
      manaphy:{ pokemonid:"manaphy",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"water",
        type2:null,
        stats:{ hp:100,
          attack:100,
          defense:100,
          spatk:100,
          spdef:100,
          speed:100 },
        species:"Seafaring",
        height:0.3,
        weight:1.4,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      darkrai:{ pokemonid:"darkrai",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"dark",
        type2:null,
        stats:{ hp:70,
          attack:90,
          defense:90,
          spatk:135,
          spdef:90,
          speed:125 },
        species:"Pitch-Black",
        height:1.5,
        weight:50.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:2,
          speed:1 } },
      "shaymin-land":{ pokemonid:"shaymin",
        formid:"land",
        formname:"Land Forme",
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:null,
        stats:{ hp:100,
          attack:100,
          defense:100,
          spatk:100,
          spdef:100,
          speed:100 },
        species:"Gratitude",
        height:0.2,
        weight:2.1,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:3 } },
      "shaymin-sky":{ pokemonid:"shaymin",
        formid:"sky",
        formname:"Sky Forme",
        gen:4,
        release:"diamond-pearl",
        type1:"grass",
        type2:"flying",
        stats:{ hp:100,
          attack:103,
          defense:75,
          spatk:120,
          spdef:75,
          speed:127 },
        species:"Gratitude",
        height:0.4,
        weight:5.2,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      arceus:{ pokemonid:"arceus",
        formid:null,
        formname:null,
        gen:4,
        release:"diamond-pearl",
        type1:"normal",
        type2:null,
        stats:{ hp:120,
          attack:120,
          defense:120,
          spatk:120,
          spdef:120,
          speed:120 },
        species:"Alpha",
        height:3.2,
        weight:320,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":324,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      victini:{ pokemonid:"victini",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:"fire",
        stats:{ hp:100,
          attack:100,
          defense:100,
          spatk:100,
          spdef:100,
          speed:100 },
        species:"Victory",
        height:0.4,
        weight:4,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      snivy:{ pokemonid:"snivy",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:null,
        stats:{ hp:45,
          attack:45,
          defense:55,
          spatk:45,
          spdef:55,
          speed:63 },
        species:"Grass Snake",
        height:0.6,
        weight:8.1,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      servine:{ pokemonid:"servine",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:null,
        stats:{ hp:60,
          attack:60,
          defense:75,
          spatk:60,
          spdef:75,
          speed:83 },
        species:"Grass Snake",
        height:0.8,
        weight:16,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":145,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      serperior:{ pokemonid:"serperior",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:null,
        stats:{ hp:75,
          attack:75,
          defense:95,
          spatk:75,
          spdef:95,
          speed:113 },
        species:"Regal",
        height:3.3,
        weight:63,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":238,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      tepig:{ pokemonid:"tepig",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fire",
        type2:null,
        stats:{ hp:65,
          attack:63,
          defense:45,
          spatk:45,
          spdef:45,
          speed:45 },
        species:"Fire Pig",
        height:0.5,
        weight:9.9,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:1 } },
      pignite:{ pokemonid:"pignite",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fire",
        type2:"fighting",
        stats:{ hp:90,
          attack:93,
          defense:55,
          spatk:70,
          spdef:55,
          speed:55 },
        species:"Fire Pig",
        height:1,
        weight:55.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":146,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      emboar:{ pokemonid:"emboar",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fire",
        type2:"fighting",
        stats:{ hp:110,
          attack:123,
          defense:65,
          spatk:100,
          spdef:65,
          speed:65 },
        species:"Mega Fire Pig",
        height:1.6,
        weight:150,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":238,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      oshawott:{ pokemonid:"oshawott",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:null,
        stats:{ hp:55,
          attack:55,
          defense:45,
          spatk:63,
          spdef:45,
          speed:45 },
        species:"Sea Otter",
        height:0.5,
        weight:5.9,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      dewott:{ pokemonid:"dewott",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:null,
        stats:{ hp:75,
          attack:75,
          defense:60,
          spatk:83,
          spdef:60,
          speed:60 },
        species:"Discipline",
        height:0.8,
        weight:24.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":145,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      samurott:{ pokemonid:"samurott",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:null,
        stats:{ hp:95,
          attack:100,
          defense:85,
          spatk:108,
          spdef:70,
          speed:70 },
        species:"Formidable",
        height:1.5,
        weight:94.6,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":238,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      patrat:{ pokemonid:"patrat",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:null,
        stats:{ hp:45,
          attack:55,
          defense:39,
          spatk:35,
          spdef:39,
          speed:42 },
        species:"Scout",
        height:0.5,
        weight:11.6,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":51,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      watchog:{ pokemonid:"watchog",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:null,
        stats:{ hp:60,
          attack:85,
          defense:69,
          spatk:60,
          spdef:69,
          speed:77 },
        species:"Lookout",
        height:1.1,
        weight:27,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":147,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      lillipup:{ pokemonid:"lillipup",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:null,
        stats:{ hp:45,
          attack:60,
          defense:45,
          spatk:25,
          spdef:45,
          speed:55 },
        species:"Puppy",
        height:0.4,
        weight:4.1,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":55,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      herdier:{ pokemonid:"herdier",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:null,
        stats:{ hp:65,
          attack:80,
          defense:65,
          spatk:35,
          spdef:65,
          speed:60 },
        species:"Loyal Dog",
        height:0.9,
        weight:14.7,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":130,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      stoutland:{ pokemonid:"stoutland",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:null,
        stats:{ hp:85,
          attack:110,
          defense:90,
          spatk:45,
          spdef:90,
          speed:80 },
        species:"Big-Hearted",
        height:1.2,
        weight:61,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":225,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      purrloin:{ pokemonid:"purrloin",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:null,
        stats:{ hp:41,
          attack:50,
          defense:37,
          spatk:50,
          spdef:37,
          speed:66 },
        species:"Devious",
        height:0.4,
        weight:10.1,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":56,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      liepard:{ pokemonid:"liepard",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:null,
        stats:{ hp:64,
          attack:88,
          defense:50,
          spatk:88,
          spdef:50,
          speed:106 },
        species:"Cruel",
        height:1.1,
        weight:37.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":156,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      pansage:{ pokemonid:"pansage",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:null,
        stats:{ hp:50,
          attack:53,
          defense:48,
          spatk:53,
          spdef:48,
          speed:64 },
        species:"Grass Monkey",
        height:0.6,
        weight:10.5,
        gender:"1:7",
        "catch-rate":190,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      simisage:{ pokemonid:"simisage",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:null,
        stats:{ hp:75,
          attack:98,
          defense:63,
          spatk:98,
          spdef:63,
          speed:101 },
        species:"Thorn Monkey",
        height:1.1,
        weight:30.5,
        gender:"1:7",
        "catch-rate":75,
        "base-exp":174,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      pansear:{ pokemonid:"pansear",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fire",
        type2:null,
        stats:{ hp:50,
          attack:53,
          defense:48,
          spatk:53,
          spdef:48,
          speed:64 },
        species:"High Temp",
        height:0.6,
        weight:11,
        gender:"1:7",
        "catch-rate":190,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      simisear:{ pokemonid:"simisear",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fire",
        type2:null,
        stats:{ hp:75,
          attack:98,
          defense:63,
          spatk:98,
          spdef:63,
          speed:101 },
        species:"Ember",
        height:1,
        weight:28,
        gender:"1:7",
        "catch-rate":75,
        "base-exp":174,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      panpour:{ pokemonid:"panpour",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:null,
        stats:{ hp:50,
          attack:53,
          defense:48,
          spatk:53,
          spdef:48,
          speed:64 },
        species:"Spray",
        height:0.6,
        weight:13.5,
        gender:"1:7",
        "catch-rate":190,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      simipour:{ pokemonid:"simipour",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:null,
        stats:{ hp:75,
          attack:98,
          defense:63,
          spatk:98,
          spdef:63,
          speed:101 },
        species:"Geyser",
        height:1,
        weight:29,
        gender:"1:7",
        "catch-rate":75,
        "base-exp":174,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      munna:{ pokemonid:"munna",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:null,
        stats:{ hp:76,
          attack:25,
          defense:45,
          spatk:67,
          spdef:55,
          speed:24 },
        species:"Dream Eater",
        height:0.6,
        weight:23.3,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":58,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:1 } },
      musharna:{ pokemonid:"musharna",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:null,
        stats:{ hp:116,
          attack:55,
          defense:85,
          spatk:107,
          spdef:95,
          speed:29 },
        species:"Drowsing",
        height:1.1,
        weight:60.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":170,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:2 } },
      pidove:{ pokemonid:"pidove",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:"flying",
        stats:{ hp:50,
          attack:55,
          defense:50,
          spatk:36,
          spdef:30,
          speed:43 },
        species:"Tiny Pigeon",
        height:0.3,
        weight:2.1,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":53,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      tranquill:{ pokemonid:"tranquill",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:"flying",
        stats:{ hp:62,
          attack:77,
          defense:62,
          spatk:50,
          spdef:42,
          speed:65 },
        species:"Wild Pigeon",
        height:0.6,
        weight:15,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":125,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      unfezant:{ pokemonid:"unfezant",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:"flying",
        stats:{ hp:80,
          attack:115,
          defense:80,
          spatk:65,
          spdef:55,
          speed:93 },
        species:"Proud",
        height:1.2,
        weight:29,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":220,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      blitzle:{ pokemonid:"blitzle",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"electric",
        type2:null,
        stats:{ hp:45,
          attack:60,
          defense:32,
          spatk:50,
          spdef:32,
          speed:76 },
        species:"Electrified",
        height:0.8,
        weight:29.8,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":59,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      zebstrika:{ pokemonid:"zebstrika",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"electric",
        type2:null,
        stats:{ hp:75,
          attack:100,
          defense:63,
          spatk:80,
          spdef:63,
          speed:116 },
        species:"Thunderbolt",
        height:1.6,
        weight:79.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":174,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      roggenrola:{ pokemonid:"roggenrola",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"rock",
        type2:null,
        stats:{ hp:55,
          attack:75,
          defense:85,
          spatk:25,
          spdef:25,
          speed:15 },
        species:"Mantle",
        height:0.4,
        weight:18,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":56,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      boldore:{ pokemonid:"boldore",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"rock",
        type2:null,
        stats:{ hp:70,
          attack:105,
          defense:105,
          spatk:50,
          spdef:40,
          speed:20 },
        species:"Ore",
        height:0.9,
        weight:102,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":137,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          defense:1 } },
      gigalith:{ pokemonid:"gigalith",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"rock",
        type2:null,
        stats:{ hp:85,
          attack:135,
          defense:130,
          spatk:60,
          spdef:80,
          speed:25 },
        species:"Compressed",
        height:1.7,
        weight:260,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":232,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      woobat:{ pokemonid:"woobat",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:"flying",
        stats:{ hp:65,
          attack:45,
          defense:43,
          spatk:55,
          spdef:43,
          speed:72 },
        species:"Bat",
        height:0.4,
        weight:2.1,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":65,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      swoobat:{ pokemonid:"swoobat",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:"flying",
        stats:{ hp:67,
          attack:57,
          defense:55,
          spatk:77,
          spdef:55,
          speed:114 },
        species:"Courting",
        height:0.9,
        weight:10.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":149,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      drilbur:{ pokemonid:"drilbur",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ground",
        type2:null,
        stats:{ hp:60,
          attack:85,
          defense:40,
          spatk:30,
          spdef:45,
          speed:68 },
        species:"Mole",
        height:0.3,
        weight:8.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      excadrill:{ pokemonid:"excadrill",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ground",
        type2:"steel",
        stats:{ hp:110,
          attack:135,
          defense:60,
          spatk:50,
          spdef:65,
          speed:88 },
        species:"Subterrene",
        height:0.7,
        weight:40.4,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":178,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      audino:{ pokemonid:"audino",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:null,
        stats:{ hp:103,
          attack:60,
          defense:86,
          spatk:60,
          spdef:86,
          speed:50 },
        species:"Hearing",
        height:1.1,
        weight:31,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":390,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:2 } },
      "audino-mega":{ pokemonid:"audino",
        formid:"mega",
        formname:"Mega Audino",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"normal",
        type2:"fairy",
        stats:{ hp:103,
          attack:60,
          defense:126,
          spatk:80,
          spdef:126,
          speed:50 },
        species:"Hearing",
        height:1.5,
        weight:32,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":425,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:2 } },
      timburr:{ pokemonid:"timburr",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fighting",
        type2:null,
        stats:{ hp:75,
          attack:80,
          defense:55,
          spatk:25,
          spdef:35,
          speed:35 },
        species:"Muscular",
        height:0.6,
        weight:12.5,
        gender:"2:6",
        "catch-rate":180,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      gurdurr:{ pokemonid:"gurdurr",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fighting",
        type2:null,
        stats:{ hp:85,
          attack:105,
          defense:85,
          spatk:40,
          spdef:50,
          speed:40 },
        species:"Muscular",
        height:1.2,
        weight:40,
        gender:"2:6",
        "catch-rate":90,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      conkeldurr:{ pokemonid:"conkeldurr",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fighting",
        type2:null,
        stats:{ hp:105,
          attack:140,
          defense:95,
          spatk:55,
          spdef:65,
          speed:45 },
        species:"Muscular",
        height:1.4,
        weight:87,
        gender:"2:6",
        "catch-rate":45,
        "base-exp":227,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      tympole:{ pokemonid:"tympole",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:null,
        stats:{ hp:50,
          attack:50,
          defense:40,
          spatk:50,
          spdef:40,
          speed:64 },
        species:"Tadpole",
        height:0.5,
        weight:4.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":59,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      palpitoad:{ pokemonid:"palpitoad",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:"ground",
        stats:{ hp:75,
          attack:65,
          defense:55,
          spatk:65,
          spdef:55,
          speed:69 },
        species:"Vibration",
        height:0.8,
        weight:17,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":134,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:2 } },
      seismitoad:{ pokemonid:"seismitoad",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:"ground",
        stats:{ hp:105,
          attack:95,
          defense:75,
          spatk:85,
          spdef:75,
          speed:74 },
        species:"Vibration",
        height:1.5,
        weight:62,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":229,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:3 } },
      throh:{ pokemonid:"throh",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fighting",
        type2:null,
        stats:{ hp:120,
          attack:100,
          defense:85,
          spatk:30,
          spdef:85,
          speed:45 },
        species:"Judo",
        height:1.3,
        weight:55.5,
        gender:0,
        "catch-rate":45,
        "base-exp":163,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      sawk:{ pokemonid:"sawk",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fighting",
        type2:null,
        stats:{ hp:75,
          attack:125,
          defense:75,
          spatk:30,
          spdef:75,
          speed:85 },
        species:"Karate",
        height:1.4,
        weight:51,
        gender:0,
        "catch-rate":45,
        "base-exp":163,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      sewaddle:{ pokemonid:"sewaddle",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"grass",
        stats:{ hp:45,
          attack:53,
          defense:70,
          spatk:40,
          spdef:60,
          speed:42 },
        species:"Sewing",
        height:0.3,
        weight:2.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":62,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      swadloon:{ pokemonid:"swadloon",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"grass",
        stats:{ hp:55,
          attack:63,
          defense:90,
          spatk:50,
          spdef:80,
          speed:42 },
        species:"Leaf-Wrapped",
        height:0.5,
        weight:7.3,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":133,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:2 } },
      leavanny:{ pokemonid:"leavanny",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"grass",
        stats:{ hp:75,
          attack:103,
          defense:80,
          spatk:70,
          spdef:80,
          speed:92 },
        species:"Nurturing",
        height:1.2,
        weight:20.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":225,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      venipede:{ pokemonid:"venipede",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"poison",
        stats:{ hp:30,
          attack:45,
          defense:59,
          spatk:30,
          spdef:39,
          speed:57 },
        species:"Centipede",
        height:0.4,
        weight:5.3,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":52,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      whirlipede:{ pokemonid:"whirlipede",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"poison",
        stats:{ hp:40,
          attack:55,
          defense:99,
          spatk:40,
          spdef:79,
          speed:47 },
        species:"Curlipede",
        height:1.2,
        weight:58.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":126,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:2 } },
      scolipede:{ pokemonid:"scolipede",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"poison",
        stats:{ hp:60,
          attack:100,
          defense:89,
          spatk:55,
          spdef:69,
          speed:112 },
        species:"Megapede",
        height:2.5,
        weight:200.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":218,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      cottonee:{ pokemonid:"cottonee",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:"fairy",
        stats:{ hp:40,
          attack:27,
          defense:60,
          spatk:37,
          spdef:50,
          speed:66 },
        species:"Cotton Puff",
        height:0.3,
        weight:0.6,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":56,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      whimsicott:{ pokemonid:"whimsicott",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:"fairy",
        stats:{ hp:60,
          attack:67,
          defense:85,
          spatk:77,
          spdef:75,
          speed:116 },
        species:"Windveiled",
        height:0.7,
        weight:6.6,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      petilil:{ pokemonid:"petilil",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:null,
        stats:{ hp:45,
          attack:35,
          defense:50,
          spatk:70,
          spdef:50,
          speed:30 },
        species:"Bulb",
        height:0.5,
        weight:6.6,
        gender:"8:0",
        "catch-rate":190,
        "base-exp":56,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      lilligant:{ pokemonid:"lilligant",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:null,
        stats:{ hp:70,
          attack:60,
          defense:75,
          spatk:110,
          spdef:75,
          speed:90 },
        species:"Flowering",
        height:1.1,
        weight:16.3,
        gender:"8:0",
        "catch-rate":75,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      "basculin-red-striped":{ pokemonid:"basculin",
        formid:"red-striped",
        formname:"Red-Striped Form",
        gen:5,
        release:"black-white",
        type1:"water",
        type2:null,
        stats:{ hp:70,
          attack:92,
          defense:65,
          spatk:80,
          spdef:55,
          speed:98 },
        species:"Hostile",
        height:1,
        weight:18,
        gender:"4:4",
        "catch-rate":25,
        "base-exp":161,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "basculin-blue-striped":{ pokemonid:"basculin",
        formid:"blue-striped",
        formname:"Blue-Striped Form",
        gen:5,
        release:"black-white",
        type1:"water",
        type2:null,
        stats:{ hp:70,
          attack:92,
          defense:65,
          spatk:80,
          spdef:55,
          speed:98 },
        species:"Hostile",
        height:1,
        weight:18,
        gender:"4:4",
        "catch-rate":25,
        "base-exp":161,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      sandile:{ pokemonid:"sandile",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ground",
        type2:"dark",
        stats:{ hp:50,
          attack:72,
          defense:35,
          spatk:35,
          spdef:35,
          speed:65 },
        species:"Desert Croc",
        height:0.7,
        weight:15.2,
        gender:"4:4",
        "catch-rate":180,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      krokorok:{ pokemonid:"krokorok",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ground",
        type2:"dark",
        stats:{ hp:60,
          attack:82,
          defense:45,
          spatk:45,
          spdef:45,
          speed:74 },
        species:"Desert Croc",
        height:1,
        weight:33.4,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":123,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      krookodile:{ pokemonid:"krookodile",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ground",
        type2:"dark",
        stats:{ hp:95,
          attack:117,
          defense:80,
          spatk:65,
          spdef:70,
          speed:92 },
        species:"Intimidation",
        height:1.5,
        weight:96.3,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":234,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      darumaka:{ pokemonid:"darumaka",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fire",
        type2:null,
        stats:{ hp:70,
          attack:90,
          defense:45,
          spatk:15,
          spdef:45,
          speed:50 },
        species:"Zen Charm",
        height:0.6,
        weight:37.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      "darumaka-galarian":{ pokemonid:"darumaka",
        formid:"galarian",
        formname:"Galarian Darumaka",
        gen:8,
        release:"sword-shield",
        type1:"ice",
        type2:null,
        stats:{ hp:70,
          attack:90,
          defense:45,
          spatk:15,
          spdef:45,
          speed:50 },
        species:"Zen Charm",
        height:0.7,
        weight:40,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      "darmanitan-standard":{ pokemonid:"darmanitan",
        formid:"standard",
        formname:"Standard Mode",
        gen:5,
        release:"black-white",
        type1:"fire",
        type2:null,
        stats:{ hp:105,
          attack:140,
          defense:55,
          spatk:30,
          spdef:55,
          speed:95 },
        species:"Blazing",
        height:1.3,
        weight:92.9,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      "darmanitan-zen":{ pokemonid:"darmanitan",
        formid:"zen",
        formname:"Zen Mode",
        gen:5,
        release:"black-white",
        type1:"fire",
        type2:"psychic",
        stats:{ hp:105,
          attack:30,
          defense:105,
          spatk:140,
          spdef:105,
          speed:55 },
        species:"Blazing",
        height:1.3,
        weight:92.9,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":189,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      "darmanitan-galarian-standard":{ pokemonid:"darmanitan",
        formid:"galarian-standard",
        formname:"Galarian Standard Mode",
        gen:8,
        release:"sword-shield",
        type1:"ice",
        type2:null,
        stats:{ hp:105,
          attack:140,
          defense:55,
          spatk:30,
          spdef:55,
          speed:95 },
        species:"Zen Charm",
        height:1.7,
        weight:120,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      "darmanitan-galarian-zen":{ pokemonid:"darmanitan",
        formid:"galarian-zen",
        formname:"Galarian Zen Mode",
        gen:8,
        release:"sword-shield",
        type1:"ice",
        type2:"fire",
        stats:{ hp:105,
          attack:160,
          defense:55,
          spatk:30,
          spdef:55,
          speed:135 },
        species:"Zen Charm",
        height:1.7,
        weight:120,
        gender:null,
        "catch-rate":null,
        "base-exp":null,
        "egg-cycles":null,
        friendship:null,
        "growth-rate":null,
        "ev-yield":{ hp:null,
          attack:null,
          defense:null,
          spatk:null,
          spdef:null,
          speed:null } },
      maractus:{ pokemonid:"maractus",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:null,
        stats:{ hp:75,
          attack:86,
          defense:67,
          spatk:106,
          spdef:67,
          speed:60 },
        species:"Cactus",
        height:1,
        weight:28,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":161,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      dwebble:{ pokemonid:"dwebble",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"rock",
        stats:{ hp:50,
          attack:65,
          defense:85,
          spatk:35,
          spdef:35,
          speed:55 },
        species:"Rock Inn",
        height:0.3,
        weight:14.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":65,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      crustle:{ pokemonid:"crustle",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"rock",
        stats:{ hp:70,
          attack:105,
          defense:125,
          spatk:65,
          spdef:75,
          speed:45 },
        species:"Stone Home",
        height:1.4,
        weight:200,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":170,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      scraggy:{ pokemonid:"scraggy",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:"fighting",
        stats:{ hp:50,
          attack:75,
          defense:70,
          spatk:35,
          spdef:70,
          speed:48 },
        species:"Shedding",
        height:0.6,
        weight:11.8,
        gender:"4:4",
        "catch-rate":180,
        "base-exp":70,
        "egg-cycles":15,
        friendship:35,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      scrafty:{ pokemonid:"scrafty",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:"fighting",
        stats:{ hp:65,
          attack:90,
          defense:115,
          spatk:45,
          spdef:115,
          speed:58 },
        species:"Hoodlum",
        height:1.1,
        weight:30,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":171,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1,
          spdef:1 } },
      sigilyph:{ pokemonid:"sigilyph",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:"flying",
        stats:{ hp:72,
          attack:58,
          defense:80,
          spatk:103,
          spdef:80,
          speed:97 },
        species:"Avianoid",
        height:1.4,
        weight:14,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      yamask:{ pokemonid:"yamask",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ghost",
        type2:null,
        stats:{ hp:38,
          attack:30,
          defense:85,
          spatk:55,
          spdef:65,
          speed:30 },
        species:"Spirit",
        height:0.5,
        weight:1.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":61,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      "yamask-galarian":{ pokemonid:"yamask",
        formid:"galarian",
        formname:"Galarian Yamask",
        gen:8,
        release:"sword-shield",
        type1:"ground",
        type2:"ghost",
        stats:{ hp:38,
          attack:55,
          defense:85,
          spatk:30,
          spdef:65,
          speed:30 },
        species:"Spirit",
        height:0.5,
        weight:1.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      cofagrigus:{ pokemonid:"cofagrigus",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ghost",
        type2:null,
        stats:{ hp:58,
          attack:50,
          defense:145,
          spatk:95,
          spdef:105,
          speed:30 },
        species:"Coffin",
        height:1.7,
        weight:76.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":169,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      tirtouga:{ pokemonid:"tirtouga",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:"rock",
        stats:{ hp:54,
          attack:78,
          defense:103,
          spatk:53,
          spdef:45,
          speed:22 },
        species:"Prototurtle",
        height:0.7,
        weight:16.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":71,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      carracosta:{ pokemonid:"carracosta",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:"rock",
        stats:{ hp:74,
          attack:108,
          defense:133,
          spatk:83,
          spdef:65,
          speed:32 },
        species:"Prototurtle",
        height:1.2,
        weight:81,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":173,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      archen:{ pokemonid:"archen",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"rock",
        type2:"flying",
        stats:{ hp:55,
          attack:112,
          defense:45,
          spatk:74,
          spdef:45,
          speed:70 },
        species:"First Bird",
        height:0.5,
        weight:9.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":71,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      archeops:{ pokemonid:"archeops",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"rock",
        type2:"flying",
        stats:{ hp:75,
          attack:140,
          defense:65,
          spatk:112,
          spdef:65,
          speed:110 },
        species:"First Bird",
        height:1.4,
        weight:32,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":177,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      trubbish:{ pokemonid:"trubbish",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"poison",
        type2:null,
        stats:{ hp:50,
          attack:50,
          defense:62,
          spatk:40,
          spdef:62,
          speed:65 },
        species:"Trash Bag",
        height:0.6,
        weight:31,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":66,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      garbodor:{ pokemonid:"garbodor",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"poison",
        type2:null,
        stats:{ hp:80,
          attack:95,
          defense:82,
          spatk:60,
          spdef:82,
          speed:75 },
        species:"Trash Heap",
        height:1.9,
        weight:107.3,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":166,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      zorua:{ pokemonid:"zorua",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:null,
        stats:{ hp:40,
          attack:65,
          defense:40,
          spatk:80,
          spdef:40,
          speed:65 },
        species:"Tricky Fox",
        height:0.7,
        weight:12.5,
        gender:"1:7",
        "catch-rate":75,
        "base-exp":66,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      zoroark:{ pokemonid:"zoroark",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:null,
        stats:{ hp:60,
          attack:105,
          defense:60,
          spatk:120,
          spdef:60,
          speed:105 },
        species:"Illusion Fox",
        height:1.6,
        weight:81.1,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":179,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      minccino:{ pokemonid:"minccino",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:null,
        stats:{ hp:55,
          attack:50,
          defense:40,
          spatk:40,
          spdef:40,
          speed:75 },
        species:"Chinchilla",
        height:0.4,
        weight:5.8,
        gender:"6:2",
        "catch-rate":255,
        "base-exp":60,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ speed:1 } },
      cinccino:{ pokemonid:"cinccino",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:null,
        stats:{ hp:75,
          attack:95,
          defense:60,
          spatk:65,
          spdef:60,
          speed:115 },
        species:"Scarf",
        height:0.5,
        weight:7.5,
        gender:"6:2",
        "catch-rate":60,
        "base-exp":165,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ speed:2 } },
      gothita:{ pokemonid:"gothita",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:null,
        stats:{ hp:45,
          attack:30,
          defense:50,
          spatk:55,
          spdef:65,
          speed:45 },
        species:"Fixation",
        height:0.4,
        weight:5.8,
        gender:"6:2",
        "catch-rate":200,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:1 } },
      gothorita:{ pokemonid:"gothorita",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:null,
        stats:{ hp:60,
          attack:45,
          defense:70,
          spatk:75,
          spdef:85,
          speed:55 },
        species:"Manipulate",
        height:0.7,
        weight:18,
        gender:"6:2",
        "catch-rate":100,
        "base-exp":137,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:2 } },
      gothitelle:{ pokemonid:"gothitelle",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:null,
        stats:{ hp:70,
          attack:55,
          defense:95,
          spatk:95,
          spdef:110,
          speed:65 },
        species:"Astral Body",
        height:1.5,
        weight:44,
        gender:"6:2",
        "catch-rate":50,
        "base-exp":221,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:3 } },
      solosis:{ pokemonid:"solosis",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:null,
        stats:{ hp:45,
          attack:30,
          defense:40,
          spatk:105,
          spdef:50,
          speed:20 },
        species:"Cell",
        height:0.3,
        weight:1,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      duosion:{ pokemonid:"duosion",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:null,
        stats:{ hp:65,
          attack:40,
          defense:50,
          spatk:125,
          spdef:60,
          speed:30 },
        species:"Mitosis",
        height:0.6,
        weight:8,
        gender:"4:4",
        "catch-rate":100,
        "base-exp":130,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      reuniclus:{ pokemonid:"reuniclus",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:null,
        stats:{ hp:110,
          attack:65,
          defense:75,
          spatk:125,
          spdef:85,
          speed:30 },
        species:"Multiplying",
        height:1,
        weight:20.1,
        gender:"4:4",
        "catch-rate":50,
        "base-exp":221,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      ducklett:{ pokemonid:"ducklett",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:"flying",
        stats:{ hp:62,
          attack:44,
          defense:50,
          spatk:44,
          spdef:50,
          speed:55 },
        species:"Water Bird",
        height:0.5,
        weight:5.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      swanna:{ pokemonid:"swanna",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:"flying",
        stats:{ hp:75,
          attack:87,
          defense:63,
          spatk:87,
          spdef:63,
          speed:98 },
        species:"White Bird",
        height:1.3,
        weight:24.2,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":166,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      vanillite:{ pokemonid:"vanillite",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ice",
        type2:null,
        stats:{ hp:36,
          attack:50,
          defense:50,
          spatk:65,
          spdef:60,
          speed:44 },
        species:"Fresh Snow",
        height:0.4,
        weight:5.7,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spatk:1 } },
      vanillish:{ pokemonid:"vanillish",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ice",
        type2:null,
        stats:{ hp:51,
          attack:65,
          defense:65,
          spatk:80,
          spdef:75,
          speed:59 },
        species:"Icy Snow",
        height:1.1,
        weight:41,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":138,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spatk:2 } },
      vanilluxe:{ pokemonid:"vanilluxe",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ice",
        type2:null,
        stats:{ hp:71,
          attack:95,
          defense:85,
          spatk:110,
          spdef:95,
          speed:79 },
        species:"Snowstorm",
        height:1.3,
        weight:57.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":241,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      deerling:{ pokemonid:"deerling",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:"grass",
        stats:{ hp:60,
          attack:60,
          defense:50,
          spatk:40,
          spdef:50,
          speed:75 },
        species:"Season",
        height:0.6,
        weight:19.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":67,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      sawsbuck:{ pokemonid:"sawsbuck",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:"grass",
        stats:{ hp:80,
          attack:100,
          defense:70,
          spatk:60,
          spdef:70,
          speed:95 },
        species:"Season",
        height:1.9,
        weight:92.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":166,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      emolga:{ pokemonid:"emolga",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"electric",
        type2:"flying",
        stats:{ hp:55,
          attack:75,
          defense:60,
          spatk:75,
          spdef:60,
          speed:103 },
        species:"Sky Squirrel",
        height:0.4,
        weight:5,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":150,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      karrablast:{ pokemonid:"karrablast",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:null,
        stats:{ hp:50,
          attack:75,
          defense:45,
          spatk:40,
          spdef:45,
          speed:60 },
        species:"Clamping",
        height:0.5,
        weight:5.9,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":63,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      escavalier:{ pokemonid:"escavalier",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"steel",
        stats:{ hp:70,
          attack:135,
          defense:105,
          spatk:60,
          spdef:105,
          speed:20 },
        species:"Cavalry",
        height:1,
        weight:33,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":173,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      foongus:{ pokemonid:"foongus",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:"poison",
        stats:{ hp:69,
          attack:55,
          defense:45,
          spatk:55,
          spdef:55,
          speed:15 },
        species:"Mushroom",
        height:0.2,
        weight:1,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":59,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      amoonguss:{ pokemonid:"amoonguss",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:"poison",
        stats:{ hp:114,
          attack:85,
          defense:70,
          spatk:85,
          spdef:80,
          speed:30 },
        species:"Mushroom",
        height:0.6,
        weight:10.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":162,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      frillish:{ pokemonid:"frillish",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:"ghost",
        stats:{ hp:55,
          attack:40,
          defense:50,
          spatk:65,
          spdef:85,
          speed:40 },
        species:"Floating",
        height:1.2,
        weight:33,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":67,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      jellicent:{ pokemonid:"jellicent",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:"ghost",
        stats:{ hp:100,
          attack:60,
          defense:70,
          spatk:85,
          spdef:105,
          speed:60 },
        species:"Floating",
        height:2.2,
        weight:135,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      alomomola:{ pokemonid:"alomomola",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"water",
        type2:null,
        stats:{ hp:165,
          attack:75,
          defense:80,
          spatk:40,
          spdef:45,
          speed:65 },
        species:"Caring",
        height:1.2,
        weight:31.6,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":165,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:2 } },
      joltik:{ pokemonid:"joltik",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"electric",
        stats:{ hp:50,
          attack:47,
          defense:50,
          spatk:57,
          spdef:50,
          speed:65 },
        species:"Attaching",
        height:0.1,
        weight:0.6,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      galvantula:{ pokemonid:"galvantula",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"electric",
        stats:{ hp:70,
          attack:77,
          defense:60,
          spatk:97,
          spdef:60,
          speed:108 },
        species:"EleSpider",
        height:0.8,
        weight:14.3,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":165,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      ferroseed:{ pokemonid:"ferroseed",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:"steel",
        stats:{ hp:44,
          attack:50,
          defense:91,
          spatk:24,
          spdef:86,
          speed:10 },
        species:"Thorn Seed",
        height:0.6,
        weight:18.8,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      ferrothorn:{ pokemonid:"ferrothorn",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:"steel",
        stats:{ hp:74,
          attack:94,
          defense:131,
          spatk:54,
          spdef:116,
          speed:20 },
        species:"Thorn Pod",
        height:1,
        weight:110,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":171,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      klink:{ pokemonid:"klink",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"steel",
        type2:null,
        stats:{ hp:40,
          attack:55,
          defense:70,
          spatk:45,
          spdef:60,
          speed:30 },
        species:"Gear",
        height:0.3,
        weight:21,
        gender:"genderless",
        "catch-rate":130,
        "base-exp":60,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      klang:{ pokemonid:"klang",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"steel",
        type2:null,
        stats:{ hp:60,
          attack:80,
          defense:95,
          spatk:70,
          spdef:85,
          speed:50 },
        species:"Gear",
        height:0.6,
        weight:51,
        gender:"genderless",
        "catch-rate":60,
        "base-exp":154,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:2 } },
      klinklang:{ pokemonid:"klinklang",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"steel",
        type2:null,
        stats:{ hp:60,
          attack:100,
          defense:115,
          spatk:70,
          spdef:85,
          speed:90 },
        species:"Gear",
        height:0.6,
        weight:81,
        gender:"genderless",
        "catch-rate":30,
        "base-exp":234,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:3 } },
      tynamo:{ pokemonid:"tynamo",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"electric",
        type2:null,
        stats:{ hp:35,
          attack:55,
          defense:40,
          spatk:45,
          spdef:40,
          speed:60 },
        species:"EleFish",
        height:0.2,
        weight:0.3,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":55,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:1 } },
      eelektrik:{ pokemonid:"eelektrik",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"electric",
        type2:null,
        stats:{ hp:65,
          attack:85,
          defense:70,
          spatk:75,
          spdef:70,
          speed:40 },
        species:"EleFish",
        height:1.2,
        weight:22,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      eelektross:{ pokemonid:"eelektross",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"electric",
        type2:null,
        stats:{ hp:85,
          attack:115,
          defense:80,
          spatk:105,
          spdef:80,
          speed:50 },
        species:"EleFish",
        height:2.1,
        weight:80.5,
        gender:"4:4",
        "catch-rate":30,
        "base-exp":232,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      elgyem:{ pokemonid:"elgyem",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:null,
        stats:{ hp:55,
          attack:55,
          defense:55,
          spatk:85,
          spdef:55,
          speed:30 },
        species:"Cerebral",
        height:0.5,
        weight:9,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":67,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      beheeyem:{ pokemonid:"beheeyem",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"psychic",
        type2:null,
        stats:{ hp:75,
          attack:75,
          defense:75,
          spatk:125,
          spdef:95,
          speed:40 },
        species:"Cerebral",
        height:1,
        weight:34.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":170,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      litwick:{ pokemonid:"litwick",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ghost",
        type2:"fire",
        stats:{ hp:50,
          attack:30,
          defense:55,
          spatk:65,
          spdef:55,
          speed:20 },
        species:"Candle",
        height:0.3,
        weight:3.1,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":55,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      lampent:{ pokemonid:"lampent",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ghost",
        type2:"fire",
        stats:{ hp:60,
          attack:40,
          defense:60,
          spatk:95,
          spdef:60,
          speed:55 },
        species:"Lamp",
        height:0.6,
        weight:13,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":130,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      chandelure:{ pokemonid:"chandelure",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ghost",
        type2:"fire",
        stats:{ hp:60,
          attack:55,
          defense:90,
          spatk:145,
          spdef:90,
          speed:80 },
        species:"Luring",
        height:1,
        weight:34.3,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":234,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      axew:{ pokemonid:"axew",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dragon",
        type2:null,
        stats:{ hp:46,
          attack:87,
          defense:60,
          spatk:30,
          spdef:40,
          speed:57 },
        species:"Tusk",
        height:0.6,
        weight:18,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":64,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      fraxure:{ pokemonid:"fraxure",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dragon",
        type2:null,
        stats:{ hp:66,
          attack:117,
          defense:70,
          spatk:40,
          spdef:50,
          speed:67 },
        species:"Axe Jaw",
        height:1,
        weight:36,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":144,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      haxorus:{ pokemonid:"haxorus",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dragon",
        type2:null,
        stats:{ hp:76,
          attack:147,
          defense:90,
          spatk:60,
          spdef:70,
          speed:97 },
        species:"Axe Jaw",
        height:1.8,
        weight:105.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":243,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      cubchoo:{ pokemonid:"cubchoo",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ice",
        type2:null,
        stats:{ hp:55,
          attack:70,
          defense:40,
          spatk:60,
          spdef:40,
          speed:40 },
        species:"Chill",
        height:0.5,
        weight:8.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      beartic:{ pokemonid:"beartic",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ice",
        type2:null,
        stats:{ hp:95,
          attack:130,
          defense:80,
          spatk:70,
          spdef:80,
          speed:50 },
        species:"Freezing",
        height:2.6,
        weight:260,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":177,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      cryogonal:{ pokemonid:"cryogonal",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ice",
        type2:null,
        stats:{ hp:80,
          attack:50,
          defense:50,
          spatk:95,
          spdef:135,
          speed:105 },
        species:"Crystallizing",
        height:1.1,
        weight:148,
        gender:"genderless",
        "catch-rate":25,
        "base-exp":180,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      shelmet:{ pokemonid:"shelmet",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:null,
        stats:{ hp:50,
          attack:40,
          defense:85,
          spatk:40,
          spdef:65,
          speed:25 },
        species:"Snail",
        height:0.4,
        weight:7.7,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":61,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      accelgor:{ pokemonid:"accelgor",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:null,
        stats:{ hp:80,
          attack:70,
          defense:40,
          spatk:100,
          spdef:60,
          speed:145 },
        species:"Shell Out",
        height:0.8,
        weight:25.3,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":173,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      stunfisk:{ pokemonid:"stunfisk",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ground",
        type2:"electric",
        stats:{ hp:109,
          attack:66,
          defense:84,
          spatk:81,
          spdef:99,
          speed:32 },
        species:"Trap",
        height:0.7,
        weight:11,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":165,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      "stunfisk-galarian":{ pokemonid:"stunfisk",
        formid:"galarian",
        formname:"Galarian Stunfisk",
        gen:8,
        release:"sword-shield",
        type1:"ground",
        type2:"steel",
        stats:{ hp:109,
          attack:81,
          defense:99,
          spatk:66,
          spdef:84,
          speed:32 },
        species:"Trap",
        height:0.7,
        weight:20.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      mienfoo:{ pokemonid:"mienfoo",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fighting",
        type2:null,
        stats:{ hp:45,
          attack:85,
          defense:50,
          spatk:55,
          spdef:50,
          speed:65 },
        species:"Martial Arts",
        height:0.9,
        weight:20,
        gender:"4:4",
        "catch-rate":180,
        "base-exp":70,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      mienshao:{ pokemonid:"mienshao",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fighting",
        type2:null,
        stats:{ hp:65,
          attack:125,
          defense:60,
          spatk:95,
          spdef:60,
          speed:105 },
        species:"Martial Arts",
        height:1.4,
        weight:35.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":179,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      druddigon:{ pokemonid:"druddigon",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dragon",
        type2:null,
        stats:{ hp:77,
          attack:120,
          defense:90,
          spatk:60,
          spdef:90,
          speed:48 },
        species:"Cave",
        height:1.6,
        weight:139,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":170,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      golett:{ pokemonid:"golett",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ground",
        type2:"ghost",
        stats:{ hp:59,
          attack:74,
          defense:50,
          spatk:35,
          spdef:50,
          speed:35 },
        species:"Automaton",
        height:1,
        weight:92,
        gender:"genderless",
        "catch-rate":190,
        "base-exp":61,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      golurk:{ pokemonid:"golurk",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"ground",
        type2:"ghost",
        stats:{ hp:89,
          attack:124,
          defense:80,
          spatk:55,
          spdef:80,
          speed:55 },
        species:"Automaton",
        height:2.8,
        weight:330,
        gender:"genderless",
        "catch-rate":90,
        "base-exp":169,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      pawniard:{ pokemonid:"pawniard",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:"steel",
        stats:{ hp:45,
          attack:85,
          defense:70,
          spatk:40,
          spdef:40,
          speed:60 },
        species:"Sharp Blade",
        height:0.5,
        weight:10.2,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":68,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      bisharp:{ pokemonid:"bisharp",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:"steel",
        stats:{ hp:65,
          attack:125,
          defense:100,
          spatk:60,
          spdef:70,
          speed:70 },
        species:"Sword Blade",
        height:1.6,
        weight:70,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":172,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      bouffalant:{ pokemonid:"bouffalant",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:null,
        stats:{ hp:95,
          attack:110,
          defense:95,
          spatk:40,
          spdef:95,
          speed:55 },
        species:"Bash Buffalo",
        height:1.6,
        weight:94.6,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      rufflet:{ pokemonid:"rufflet",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:"flying",
        stats:{ hp:70,
          attack:83,
          defense:50,
          spatk:37,
          spdef:50,
          speed:60 },
        species:"Eaglet",
        height:0.5,
        weight:10.5,
        gender:0,
        "catch-rate":190,
        "base-exp":70,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      braviary:{ pokemonid:"braviary",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:"flying",
        stats:{ hp:100,
          attack:123,
          defense:75,
          spatk:57,
          spdef:75,
          speed:80 },
        species:"Valiant",
        height:1.5,
        weight:41,
        gender:0,
        "catch-rate":60,
        "base-exp":179,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      vullaby:{ pokemonid:"vullaby",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:"flying",
        stats:{ hp:70,
          attack:55,
          defense:75,
          spatk:45,
          spdef:65,
          speed:60 },
        species:"Diapered",
        height:0.5,
        weight:9,
        gender:"8:0",
        "catch-rate":190,
        "base-exp":74,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:1 } },
      mandibuzz:{ pokemonid:"mandibuzz",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:"flying",
        stats:{ hp:110,
          attack:65,
          defense:105,
          spatk:55,
          spdef:95,
          speed:80 },
        species:"Bone Vulture",
        height:1.2,
        weight:39.5,
        gender:"8:0",
        "catch-rate":60,
        "base-exp":179,
        "egg-cycles":20,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:2 } },
      heatmor:{ pokemonid:"heatmor",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"fire",
        type2:null,
        stats:{ hp:85,
          attack:97,
          defense:66,
          spatk:105,
          spdef:66,
          speed:65 },
        species:"Anteater",
        height:1.4,
        weight:58,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":169,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      durant:{ pokemonid:"durant",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"steel",
        stats:{ hp:58,
          attack:109,
          defense:112,
          spatk:48,
          spdef:48,
          speed:109 },
        species:"Iron Ant",
        height:0.3,
        weight:33,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":169,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      deino:{ pokemonid:"deino",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:"dragon",
        stats:{ hp:52,
          attack:65,
          defense:50,
          spatk:45,
          spdef:50,
          speed:38 },
        species:"Irate",
        height:0.8,
        weight:17.3,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":60,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      zweilous:{ pokemonid:"zweilous",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:"dragon",
        stats:{ hp:72,
          attack:85,
          defense:70,
          spatk:65,
          spdef:70,
          speed:58 },
        species:"Hostile",
        height:1.4,
        weight:50,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      hydreigon:{ pokemonid:"hydreigon",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dark",
        type2:"dragon",
        stats:{ hp:92,
          attack:105,
          defense:90,
          spatk:125,
          spdef:90,
          speed:98 },
        species:"Brutal",
        height:1.8,
        weight:160,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      larvesta:{ pokemonid:"larvesta",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"fire",
        stats:{ hp:55,
          attack:85,
          defense:55,
          spatk:50,
          spdef:55,
          speed:60 },
        species:"Torch",
        height:1.1,
        weight:28.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":72,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      volcarona:{ pokemonid:"volcarona",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"fire",
        stats:{ hp:85,
          attack:60,
          defense:65,
          spatk:135,
          spdef:105,
          speed:100 },
        species:"Sun",
        height:1.6,
        weight:46,
        gender:"4:4",
        "catch-rate":15,
        "base-exp":248,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      cobalion:{ pokemonid:"cobalion",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"steel",
        type2:"fighting",
        stats:{ hp:91,
          attack:90,
          defense:129,
          spatk:90,
          spdef:72,
          speed:108 },
        species:"Iron Will",
        height:2.1,
        weight:250,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ defense:3 } },
      terrakion:{ pokemonid:"terrakion",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"rock",
        type2:"fighting",
        stats:{ hp:91,
          attack:129,
          defense:90,
          spatk:72,
          spdef:90,
          speed:108 },
        species:"Cavern",
        height:1.9,
        weight:260,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      virizion:{ pokemonid:"virizion",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"grass",
        type2:"fighting",
        stats:{ hp:91,
          attack:90,
          defense:72,
          spatk:90,
          spdef:129,
          speed:108 },
        species:"Grassland",
        height:2,
        weight:200,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      "tornadus-incarnate":{ pokemonid:"tornadus",
        formid:"incarnate",
        formname:"Incarnate Forme",
        gen:5,
        release:"black-white",
        type1:"flying",
        type2:null,
        stats:{ hp:79,
          attack:115,
          defense:70,
          spatk:125,
          spdef:80,
          speed:111 },
        species:"Cyclone",
        height:1.5,
        weight:63,
        gender:0,
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":120,
        friendship:90,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "tornadus-therian":{ pokemonid:"tornadus",
        formid:"therian",
        formname:"Therian Forme",
        gen:5,
        release:"black-white",
        type1:"flying",
        type2:null,
        stats:{ hp:79,
          attack:100,
          defense:80,
          spatk:110,
          spdef:90,
          speed:121 },
        species:"Cyclone",
        height:1.4,
        weight:63,
        gender:0,
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":120,
        friendship:90,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      "thundurus-incarnate":{ pokemonid:"thundurus",
        formid:"incarnate",
        formname:"Incarnate Forme",
        gen:5,
        release:"black-white",
        type1:"electric",
        type2:"flying",
        stats:{ hp:79,
          attack:115,
          defense:70,
          spatk:125,
          spdef:80,
          speed:111 },
        species:"Bolt Strike",
        height:1.5,
        weight:61,
        gender:0,
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":120,
        friendship:90,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "thundurus-therian":{ pokemonid:"thundurus",
        formid:"therian",
        formname:"Therian Forme",
        gen:5,
        release:"black-white",
        type1:"electric",
        type2:"flying",
        stats:{ hp:79,
          attack:105,
          defense:70,
          spatk:145,
          spdef:80,
          speed:101 },
        species:"Bolt Strike",
        height:3,
        weight:61,
        gender:0,
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":120,
        friendship:90,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      reshiram:{ pokemonid:"reshiram",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dragon",
        type2:"fire",
        stats:{ hp:100,
          attack:120,
          defense:100,
          spatk:150,
          spdef:120,
          speed:90 },
        species:"Vast White",
        height:3.2,
        weight:330,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      zekrom:{ pokemonid:"zekrom",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dragon",
        type2:"electric",
        stats:{ hp:100,
          attack:150,
          defense:120,
          spatk:120,
          spdef:100,
          speed:90 },
        species:"Deep Black",
        height:2.9,
        weight:345,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "landorus-incarnate":{ pokemonid:"landorus",
        formid:"incarnate",
        formname:"Incarnate Forme",
        gen:5,
        release:"black-white",
        type1:"ground",
        type2:"flying",
        stats:{ hp:89,
          attack:125,
          defense:90,
          spatk:115,
          spdef:80,
          speed:101 },
        species:"Abundance",
        height:1.5,
        weight:68,
        gender:0,
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:90,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "landorus-therian":{ pokemonid:"landorus",
        formid:"therian",
        formname:"Therian Forme",
        gen:5,
        release:"black-white",
        type1:"ground",
        type2:"flying",
        stats:{ hp:89,
          attack:145,
          defense:90,
          spatk:105,
          spdef:80,
          speed:91 },
        species:"Abundance",
        height:1.3,
        weight:68,
        gender:0,
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:90,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      kyurem:{ pokemonid:"kyurem",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"dragon",
        type2:"ice",
        stats:{ hp:125,
          attack:130,
          defense:90,
          spatk:130,
          spdef:90,
          speed:95 },
        species:"Boundary",
        height:3,
        weight:325,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":297,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:1,
          attack:1,
          spatk:1 } },
      "kyurem-black":{ pokemonid:"kyurem",
        formid:"black",
        formname:"Black Kyurem",
        gen:5,
        release:"black-white",
        type1:"dragon",
        type2:"ice",
        stats:{ hp:125,
          attack:170,
          defense:100,
          spatk:120,
          spdef:90,
          speed:95 },
        species:"Boundary",
        height:3.3,
        weight:325,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":315,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "kyurem-white":{ pokemonid:"kyurem",
        formid:"white",
        formname:"White Kyurem",
        gen:5,
        release:"black-white",
        type1:"dragon",
        type2:"ice",
        stats:{ hp:125,
          attack:120,
          defense:90,
          spatk:170,
          spdef:100,
          speed:95 },
        species:"Boundary",
        height:3.6,
        weight:325,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":315,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "keldeo-ordinary":{ pokemonid:"keldeo",
        formid:"ordinary",
        formname:"Ordinary Form",
        gen:5,
        release:"black-white",
        type1:"water",
        type2:"fighting",
        stats:{ hp:91,
          attack:72,
          defense:90,
          spatk:129,
          spdef:90,
          speed:108 },
        species:"Colt",
        height:1.4,
        weight:48.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "keldeo-resolute":{ pokemonid:"keldeo",
        formid:"resolute",
        formname:"Resolute Form",
        gen:5,
        release:"black-white",
        type1:"water",
        type2:"fighting",
        stats:{ hp:91,
          attack:72,
          defense:90,
          spatk:129,
          spdef:90,
          speed:108 },
        species:"Colt",
        height:1.4,
        weight:48.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":261,
        "egg-cycles":80,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "meloetta-aria":{ pokemonid:"meloetta",
        formid:"aria",
        formname:"Aria Forme",
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:"psychic",
        stats:{ hp:100,
          attack:77,
          defense:77,
          spatk:128,
          spdef:128,
          speed:90 },
        species:"Melody",
        height:0.6,
        weight:6.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"slow",
        "ev-yield":{ spatk:1,
          spdef:1,
          speed:1 } },
      "meloetta-pirouette":{ pokemonid:"meloetta",
        formid:"pirouette",
        formname:"Pirouette Forme",
        gen:5,
        release:"black-white",
        type1:"normal",
        type2:"fighting",
        stats:{ hp:100,
          attack:128,
          defense:90,
          spatk:77,
          spdef:77,
          speed:128 },
        species:"Melody",
        height:0.6,
        weight:6.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          defense:1,
          speed:1 } },
      genesect:{ pokemonid:"genesect",
        formid:null,
        formname:null,
        gen:5,
        release:"black-white",
        type1:"bug",
        type2:"steel",
        stats:{ hp:71,
          attack:120,
          defense:95,
          spatk:120,
          spdef:95,
          speed:99 },
        species:"Paleozoic",
        height:1.5,
        weight:82.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          spatk:1,
          speed:1 } },
      chespin:{ pokemonid:"chespin",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"grass",
        type2:null,
        stats:{ hp:56,
          attack:61,
          defense:65,
          spatk:48,
          spdef:45,
          speed:38 },
        species:"Spiny Nut",
        height:0.4,
        weight:9,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      quilladin:{ pokemonid:"quilladin",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"grass",
        type2:null,
        stats:{ hp:61,
          attack:78,
          defense:95,
          spatk:56,
          spdef:58,
          speed:57 },
        species:"Spiny Armor",
        height:0.7,
        weight:29,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:2 } },
      chesnaught:{ pokemonid:"chesnaught",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"grass",
        type2:"fighting",
        stats:{ hp:88,
          attack:107,
          defense:122,
          spatk:74,
          spdef:75,
          speed:64 },
        species:"Spiny Armor",
        height:1.6,
        weight:90,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:3 } },
      fennekin:{ pokemonid:"fennekin",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:null,
        stats:{ hp:40,
          attack:45,
          defense:40,
          spatk:62,
          spdef:60,
          speed:60 },
        species:"Fox",
        height:0.4,
        weight:9.4,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      braixen:{ pokemonid:"braixen",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:null,
        stats:{ hp:59,
          attack:59,
          defense:58,
          spatk:90,
          spdef:70,
          speed:73 },
        species:"Fox",
        height:1,
        weight:14.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":143,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      delphox:{ pokemonid:"delphox",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:"psychic",
        stats:{ hp:75,
          attack:69,
          defense:72,
          spatk:114,
          spdef:100,
          speed:104 },
        species:"Fox",
        height:1.5,
        weight:39,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":240,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      froakie:{ pokemonid:"froakie",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"water",
        type2:null,
        stats:{ hp:41,
          attack:56,
          defense:40,
          spatk:62,
          spdef:44,
          speed:71 },
        species:"Bubble Frog",
        height:0.3,
        weight:7,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":63,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      frogadier:{ pokemonid:"frogadier",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"water",
        type2:null,
        stats:{ hp:54,
          attack:63,
          defense:52,
          spatk:83,
          spdef:56,
          speed:97 },
        species:"Bubble Frog",
        height:0.6,
        weight:10.9,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      greninja:{ pokemonid:"greninja",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"water",
        type2:"dark",
        stats:{ hp:72,
          attack:95,
          defense:67,
          spatk:103,
          spdef:71,
          speed:122 },
        species:"Ninja",
        height:1.5,
        weight:40,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      "greninja-ash":{ pokemonid:"greninja",
        formid:"ash",
        formname:"Ash-Greninja",
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:"dark",
        stats:{ hp:72,
          attack:145,
          defense:67,
          spatk:153,
          spdef:71,
          speed:132 },
        species:"Ninja",
        height:1.5,
        weight:40,
        gender:0,
        "catch-rate":45,
        "base-exp":288,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      bunnelby:{ pokemonid:"bunnelby",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"normal",
        type2:null,
        stats:{ hp:38,
          attack:36,
          defense:38,
          spatk:32,
          spdef:36,
          speed:57 },
        species:"Digging",
        height:0.4,
        weight:5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":47,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      diggersby:{ pokemonid:"diggersby",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"normal",
        type2:"ground",
        stats:{ hp:85,
          attack:56,
          defense:77,
          spatk:50,
          spdef:77,
          speed:78 },
        species:"Digging",
        height:1,
        weight:42.4,
        gender:"4:4",
        "catch-rate":127,
        "base-exp":148,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      fletchling:{ pokemonid:"fletchling",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"normal",
        type2:"flying",
        stats:{ hp:45,
          attack:50,
          defense:43,
          spatk:40,
          spdef:38,
          speed:62 },
        species:"Tiny Robin",
        height:0.3,
        weight:1.7,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":56,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      fletchinder:{ pokemonid:"fletchinder",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:"flying",
        stats:{ hp:62,
          attack:73,
          defense:55,
          spatk:56,
          spdef:52,
          speed:84 },
        species:"Ember",
        height:0.7,
        weight:16,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":134,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      talonflame:{ pokemonid:"talonflame",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:"flying",
        stats:{ hp:78,
          attack:81,
          defense:71,
          spatk:74,
          spdef:69,
          speed:126 },
        species:"Scorching",
        height:1.2,
        weight:24.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":175,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      scatterbug:{ pokemonid:"scatterbug",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"bug",
        type2:null,
        stats:{ hp:38,
          attack:35,
          defense:40,
          spatk:27,
          spdef:25,
          speed:35 },
        species:"Scatterdust",
        height:0.3,
        weight:2.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":40,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      spewpa:{ pokemonid:"spewpa",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"bug",
        type2:null,
        stats:{ hp:45,
          attack:22,
          defense:60,
          spatk:27,
          spdef:30,
          speed:29 },
        species:"Scatterdust",
        height:0.3,
        weight:8.4,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":75,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      vivillon:{ pokemonid:"vivillon",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"bug",
        type2:"flying",
        stats:{ hp:80,
          attack:52,
          defense:50,
          spatk:90,
          spdef:50,
          speed:89 },
        species:"Scale",
        height:1.2,
        weight:17,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":185,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1,
          spatk:1,
          speed:1 } },
      litleo:{ pokemonid:"litleo",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:"normal",
        stats:{ hp:62,
          attack:50,
          defense:58,
          spatk:73,
          spdef:54,
          speed:72 },
        species:"Lion Cub",
        height:0.6,
        weight:13.5,
        gender:"6:2",
        "catch-rate":220,
        "base-exp":74,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      pyroar:{ pokemonid:"pyroar",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:"normal",
        stats:{ hp:86,
          attack:68,
          defense:72,
          spatk:109,
          spdef:66,
          speed:106 },
        species:"Royal",
        height:1.5,
        weight:81.5,
        gender:"6:2",
        "catch-rate":65,
        "base-exp":177,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      flabebe:{ pokemonid:"flabebe",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fairy",
        type2:null,
        stats:{ hp:44,
          attack:38,
          defense:39,
          spatk:61,
          spdef:79,
          speed:42 },
        species:"Single Bloom",
        height:0.1,
        weight:0.1,
        gender:"8:0",
        "catch-rate":225,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      floette:{ pokemonid:"floette",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fairy",
        type2:null,
        stats:{ hp:54,
          attack:45,
          defense:47,
          spatk:75,
          spdef:98,
          speed:52 },
        species:"Single Bloom",
        height:0.2,
        weight:0.9,
        gender:"8:0",
        "catch-rate":120,
        "base-exp":130,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      florges:{ pokemonid:"florges",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fairy",
        type2:null,
        stats:{ hp:78,
          attack:65,
          defense:68,
          spatk:112,
          spdef:154,
          speed:75 },
        species:"Garden",
        height:1.1,
        weight:10,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":248,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:3 } },
      skiddo:{ pokemonid:"skiddo",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"grass",
        type2:null,
        stats:{ hp:66,
          attack:65,
          defense:48,
          spatk:62,
          spdef:57,
          speed:52 },
        species:"Mount",
        height:0.9,
        weight:31,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":70,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      gogoat:{ pokemonid:"gogoat",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"grass",
        type2:null,
        stats:{ hp:123,
          attack:100,
          defense:62,
          spatk:97,
          spdef:81,
          speed:68 },
        species:"Mount",
        height:1.7,
        weight:91,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":186,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      pancham:{ pokemonid:"pancham",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fighting",
        type2:null,
        stats:{ hp:67,
          attack:82,
          defense:62,
          spatk:46,
          spdef:48,
          speed:43 },
        species:"Playful",
        height:0.6,
        weight:8,
        gender:"4:4",
        "catch-rate":220,
        "base-exp":70,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      pangoro:{ pokemonid:"pangoro",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fighting",
        type2:"dark",
        stats:{ hp:95,
          attack:124,
          defense:78,
          spatk:69,
          spdef:71,
          speed:58 },
        species:"Daunting",
        height:2.1,
        weight:136,
        gender:"4:4",
        "catch-rate":65,
        "base-exp":173,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      furfrou:{ pokemonid:"furfrou",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"normal",
        type2:null,
        stats:{ hp:75,
          attack:80,
          defense:60,
          spatk:65,
          spdef:90,
          speed:102 },
        species:"Poodle",
        height:1.2,
        weight:28,
        gender:"4:4",
        "catch-rate":160,
        "base-exp":165,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      espurr:{ pokemonid:"espurr",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"psychic",
        type2:null,
        stats:{ hp:62,
          attack:48,
          defense:54,
          spatk:63,
          spdef:60,
          speed:68 },
        species:"Restraint",
        height:0.3,
        weight:3.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":71,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      "meowstic-male":{ pokemonid:"meowstic",
        formid:"male",
        formname:"Male",
        gen:6,
        release:"x-y",
        type1:"psychic",
        type2:null,
        stats:{ hp:74,
          attack:48,
          defense:76,
          spatk:83,
          spdef:81,
          speed:104 },
        species:"Constraint",
        height:0.6,
        weight:8.5,
        gender:0,
        "catch-rate":75,
        "base-exp":163,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "meowstic-female":{ pokemonid:"meowstic",
        formid:"female",
        formname:"Female",
        gen:6,
        release:"x-y",
        type1:"psychic",
        type2:null,
        stats:{ hp:74,
          attack:48,
          defense:76,
          spatk:83,
          spdef:81,
          speed:104 },
        species:"Constraint",
        height:0.6,
        weight:8.5,
        gender:"8:0",
        "catch-rate":75,
        "base-exp":163,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      honedge:{ pokemonid:"honedge",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"steel",
        type2:"ghost",
        stats:{ hp:45,
          attack:80,
          defense:100,
          spatk:35,
          spdef:37,
          speed:28 },
        species:"Sword",
        height:0.8,
        weight:2,
        gender:"4:4",
        "catch-rate":180,
        "base-exp":65,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      doublade:{ pokemonid:"doublade",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"steel",
        type2:"ghost",
        stats:{ hp:59,
          attack:110,
          defense:150,
          spatk:45,
          spdef:49,
          speed:35 },
        species:"Sword",
        height:0.8,
        weight:4.5,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":157,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "aegislash-shield":{ pokemonid:"aegislash",
        formid:"shield",
        formname:"Shield Forme",
        gen:6,
        release:"x-y",
        type1:"steel",
        type2:"ghost",
        stats:{ hp:60,
          attack:50,
          defense:140,
          spatk:50,
          spdef:140,
          speed:60 },
        species:"Royal Sword",
        height:1.7,
        weight:53,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":234,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2,
          spdef:1 } },
      "aegislash-blade":{ pokemonid:"aegislash",
        formid:"blade",
        formname:"Blade Forme",
        gen:6,
        release:"x-y",
        type1:"steel",
        type2:"ghost",
        stats:{ hp:60,
          attack:140,
          defense:50,
          spatk:140,
          spdef:50,
          speed:60 },
        species:"Royal Sword",
        height:1.7,
        weight:53,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":234,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2,
          spatk:1 } },
      spritzee:{ pokemonid:"spritzee",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fairy",
        type2:null,
        stats:{ hp:78,
          attack:52,
          defense:60,
          spatk:63,
          spdef:65,
          speed:23 },
        species:"Perfume",
        height:0.2,
        weight:0.5,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":68,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      aromatisse:{ pokemonid:"aromatisse",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fairy",
        type2:null,
        stats:{ hp:101,
          attack:72,
          defense:72,
          spatk:99,
          spdef:89,
          speed:29 },
        species:"Fragrance",
        height:0.8,
        weight:15.5,
        gender:"4:4",
        "catch-rate":140,
        "base-exp":162,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      swirlix:{ pokemonid:"swirlix",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fairy",
        type2:null,
        stats:{ hp:62,
          attack:48,
          defense:66,
          spatk:59,
          spdef:57,
          speed:49 },
        species:"Cotton Candy",
        height:0.4,
        weight:3.5,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":68,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      slurpuff:{ pokemonid:"slurpuff",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fairy",
        type2:null,
        stats:{ hp:82,
          attack:80,
          defense:86,
          spatk:85,
          spdef:75,
          speed:72 },
        species:"Meringue",
        height:0.8,
        weight:5,
        gender:"4:4",
        "catch-rate":140,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      inkay:{ pokemonid:"inkay",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"dark",
        type2:"psychic",
        stats:{ hp:53,
          attack:54,
          defense:53,
          spatk:37,
          spdef:46,
          speed:45 },
        species:"Revolving",
        height:0.4,
        weight:3.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      malamar:{ pokemonid:"malamar",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"dark",
        type2:"psychic",
        stats:{ hp:86,
          attack:92,
          defense:88,
          spatk:68,
          spdef:75,
          speed:73 },
        species:"Overturning",
        height:1.5,
        weight:47,
        gender:"4:4",
        "catch-rate":80,
        "base-exp":169,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      binacle:{ pokemonid:"binacle",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"rock",
        type2:"water",
        stats:{ hp:42,
          attack:52,
          defense:67,
          spatk:39,
          spdef:56,
          speed:50 },
        species:"Two-Handed",
        height:0.5,
        weight:31,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      barbaracle:{ pokemonid:"barbaracle",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"rock",
        type2:"water",
        stats:{ hp:72,
          attack:105,
          defense:115,
          spatk:54,
          spdef:86,
          speed:68 },
        species:"Collective",
        height:1.3,
        weight:96,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      skrelp:{ pokemonid:"skrelp",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"poison",
        type2:"water",
        stats:{ hp:50,
          attack:60,
          defense:60,
          spatk:60,
          spdef:60,
          speed:30 },
        species:"Mock Kelp",
        height:0.5,
        weight:7.3,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      dragalge:{ pokemonid:"dragalge",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"poison",
        type2:"dragon",
        stats:{ hp:65,
          attack:75,
          defense:90,
          spatk:97,
          spdef:123,
          speed:44 },
        species:"Mock Kelp",
        height:1.8,
        weight:81.5,
        gender:"4:4",
        "catch-rate":55,
        "base-exp":173,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      clauncher:{ pokemonid:"clauncher",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"water",
        type2:null,
        stats:{ hp:50,
          attack:53,
          defense:62,
          spatk:58,
          spdef:63,
          speed:44 },
        species:"Water Gun",
        height:0.5,
        weight:8.3,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":66,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spatk:1 } },
      clawitzer:{ pokemonid:"clawitzer",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"water",
        type2:null,
        stats:{ hp:71,
          attack:73,
          defense:88,
          spatk:120,
          spdef:89,
          speed:59 },
        species:"Howitzer",
        height:1.3,
        weight:35.3,
        gender:"4:4",
        "catch-rate":55,
        "base-exp":100,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spatk:2 } },
      helioptile:{ pokemonid:"helioptile",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"electric",
        type2:"normal",
        stats:{ hp:44,
          attack:38,
          defense:33,
          spatk:61,
          spdef:43,
          speed:70 },
        species:"Generator",
        height:0.5,
        weight:6,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":58,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      heliolisk:{ pokemonid:"heliolisk",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"electric",
        type2:"normal",
        stats:{ hp:62,
          attack:55,
          defense:52,
          spatk:109,
          spdef:94,
          speed:109 },
        species:"Generator",
        height:1,
        weight:21,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1,
          speed:1 } },
      tyrunt:{ pokemonid:"tyrunt",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"rock",
        type2:"dragon",
        stats:{ hp:58,
          attack:89,
          defense:77,
          spatk:45,
          spdef:45,
          speed:48 },
        species:"Royal Heir",
        height:0.8,
        weight:26,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":72,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      tyrantrum:{ pokemonid:"tyrantrum",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"rock",
        type2:"dragon",
        stats:{ hp:82,
          attack:121,
          defense:119,
          spatk:69,
          spdef:59,
          speed:71 },
        species:"Despot",
        height:2.5,
        weight:270,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":182,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      amaura:{ pokemonid:"amaura",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"rock",
        type2:"ice",
        stats:{ hp:77,
          attack:59,
          defense:50,
          spatk:67,
          spdef:63,
          speed:46 },
        species:"Tundra",
        height:1.3,
        weight:25.2,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":72,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      aurorus:{ pokemonid:"aurorus",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"rock",
        type2:"ice",
        stats:{ hp:123,
          attack:77,
          defense:72,
          spatk:99,
          spdef:92,
          speed:58 },
        species:"Tundra",
        height:2.7,
        weight:225,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":104,
        "egg-cycles":30,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      sylveon:{ pokemonid:"sylveon",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fairy",
        type2:null,
        stats:{ hp:95,
          attack:65,
          defense:65,
          spatk:110,
          spdef:130,
          speed:60 },
        species:"Intertwining",
        height:1,
        weight:23.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":184,
        "egg-cycles":35,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      hawlucha:{ pokemonid:"hawlucha",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fighting",
        type2:"flying",
        stats:{ hp:78,
          attack:92,
          defense:75,
          spatk:74,
          spdef:63,
          speed:118 },
        species:"Wrestling",
        height:0.8,
        weight:21.5,
        gender:"4:4",
        "catch-rate":100,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      dedenne:{ pokemonid:"dedenne",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"electric",
        type2:"fairy",
        stats:{ hp:67,
          attack:58,
          defense:57,
          spatk:81,
          spdef:67,
          speed:101 },
        species:"Antenna",
        height:0.2,
        weight:2.2,
        gender:"4:4",
        "catch-rate":180,
        "base-exp":151,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      carbink:{ pokemonid:"carbink",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"rock",
        type2:"fairy",
        stats:{ hp:50,
          attack:50,
          defense:150,
          spatk:50,
          spdef:150,
          speed:50 },
        species:"Jewel",
        height:0.3,
        weight:5.7,
        gender:"genderless",
        "catch-rate":60,
        "base-exp":100,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:1,
          spdef:1 } },
      goomy:{ pokemonid:"goomy",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"dragon",
        type2:null,
        stats:{ hp:45,
          attack:50,
          defense:35,
          spatk:55,
          spdef:75,
          speed:40 },
        species:"Soft Tissue",
        height:0.3,
        weight:2.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":60,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spdef:1 } },
      sliggoo:{ pokemonid:"sliggoo",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"dragon",
        type2:null,
        stats:{ hp:68,
          attack:75,
          defense:53,
          spatk:83,
          spdef:113,
          speed:60 },
        species:"Soft Tissue",
        height:0.8,
        weight:17.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":158,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spdef:2 } },
      goodra:{ pokemonid:"goodra",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"dragon",
        type2:null,
        stats:{ hp:90,
          attack:100,
          defense:70,
          spatk:110,
          spdef:150,
          speed:80 },
        species:"Dragon",
        height:2,
        weight:150.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":40,
        friendship:35,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      klefki:{ pokemonid:"klefki",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"steel",
        type2:"fairy",
        stats:{ hp:57,
          attack:80,
          defense:91,
          spatk:80,
          spdef:87,
          speed:75 },
        species:"Key Ring",
        height:0.2,
        weight:3,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":165,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ defense:1 } },
      phantump:{ pokemonid:"phantump",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:43,
          attack:70,
          defense:48,
          spatk:50,
          spdef:60,
          speed:38 },
        species:"Stump",
        height:0.4,
        weight:7,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":62,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      trevenant:{ pokemonid:"trevenant",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:85,
          attack:110,
          defense:76,
          spatk:65,
          spdef:82,
          speed:56 },
        species:"Elder Tree",
        height:1.5,
        weight:71,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":166,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      "pumpkaboo-average":{ pokemonid:"pumpkaboo",
        formid:"average",
        formname:"Average Size",
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:49,
          attack:66,
          defense:70,
          spatk:44,
          spdef:55,
          speed:51 },
        species:"Pumpkin",
        height:0.4,
        weight:5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":67,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      "pumpkaboo-small":{ pokemonid:"pumpkaboo",
        formid:"small",
        formname:"Small Size",
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:44,
          attack:66,
          defense:70,
          spatk:44,
          spdef:55,
          speed:56 },
        species:"Pumpkin",
        height:0.3,
        weight:3.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":67,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      "pumpkaboo-large":{ pokemonid:"pumpkaboo",
        formid:"large",
        formname:"Large Size",
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:54,
          attack:66,
          defense:70,
          spatk:44,
          spdef:55,
          speed:46 },
        species:"Pumpkin",
        height:0.5,
        weight:7.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":67,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      "pumpkaboo-super":{ pokemonid:"pumpkaboo",
        formid:"super",
        formname:"Super Size",
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:59,
          attack:66,
          defense:70,
          spatk:44,
          spdef:55,
          speed:41 },
        species:"Pumpkin",
        height:0.8,
        weight:15,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":67,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      "gourgeist-average":{ pokemonid:"gourgeist",
        formid:"average",
        formname:"Average Size",
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:65,
          attack:90,
          defense:122,
          spatk:58,
          spdef:75,
          speed:84 },
        species:"Pumpkin",
        height:0.9,
        weight:12.5,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":173,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "gourgeist-small":{ pokemonid:"gourgeist",
        formid:"small",
        formname:"Small Size",
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:55,
          attack:85,
          defense:122,
          spatk:58,
          spdef:75,
          speed:99 },
        species:"Pumpkin",
        height:0.7,
        weight:9.5,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":173,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "gourgeist-large":{ pokemonid:"gourgeist",
        formid:"large",
        formname:"Large Size",
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:75,
          attack:95,
          defense:122,
          spatk:58,
          spdef:75,
          speed:69 },
        species:"Pumpkin",
        height:1.1,
        weight:14,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":173,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      "gourgeist-super":{ pokemonid:"gourgeist",
        formid:"super",
        formname:"Super Size",
        gen:6,
        release:"x-y",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:85,
          attack:100,
          defense:122,
          spatk:58,
          spdef:75,
          speed:54 },
        species:"Pumpkin",
        height:1.7,
        weight:39,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":173,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      bergmite:{ pokemonid:"bergmite",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"ice",
        type2:null,
        stats:{ hp:55,
          attack:69,
          defense:85,
          spatk:32,
          spdef:35,
          speed:28 },
        species:"Ice Chunk",
        height:1,
        weight:99.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      avalugg:{ pokemonid:"avalugg",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"ice",
        type2:null,
        stats:{ hp:95,
          attack:117,
          defense:184,
          spatk:44,
          spdef:46,
          speed:28 },
        species:"Iceberg",
        height:2,
        weight:505,
        gender:"4:4",
        "catch-rate":55,
        "base-exp":180,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      noibat:{ pokemonid:"noibat",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"flying",
        type2:"dragon",
        stats:{ hp:40,
          attack:30,
          defense:35,
          spatk:45,
          spdef:40,
          speed:55 },
        species:"Sound Wave",
        height:0.5,
        weight:8,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":49,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      noivern:{ pokemonid:"noivern",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"flying",
        type2:"dragon",
        stats:{ hp:85,
          attack:70,
          defense:80,
          spatk:97,
          spdef:80,
          speed:123 },
        species:"Sound Wave",
        height:1.5,
        weight:85,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":187,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      xerneas:{ pokemonid:"xerneas",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fairy",
        type2:null,
        stats:{ hp:126,
          attack:131,
          defense:95,
          spatk:131,
          spdef:98,
          speed:99 },
        species:"Life",
        height:3,
        weight:215,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      yveltal:{ pokemonid:"yveltal",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"dark",
        type2:"flying",
        stats:{ hp:126,
          attack:131,
          defense:95,
          spatk:131,
          spdef:98,
          speed:99 },
        species:"Destruction",
        height:5.8,
        weight:203,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      "zygarde-50":{ pokemonid:"zygarde",
        formid:50,
        formname:"50% Forme",
        gen:6,
        release:"x-y",
        type1:"dragon",
        type2:"ground",
        stats:{ hp:108,
          attack:100,
          defense:121,
          spatk:81,
          spdef:95,
          speed:95 },
        species:"Order",
        height:5,
        weight:305,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      "zygarde-10":{ pokemonid:"zygarde",
        formid:10,
        formname:"10% Forme",
        gen:7,
        release:"sun-moon",
        type1:"dragon",
        type2:"ground",
        stats:{ hp:54,
          attack:100,
          defense:71,
          spatk:61,
          spdef:85,
          speed:115 },
        species:"Order",
        height:1.2,
        weight:33.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":219,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      "zygarde-complete":{ pokemonid:"zygarde",
        formid:"complete",
        formname:"Complete Forme",
        gen:7,
        release:"sun-moon",
        type1:"dragon",
        type2:"ground",
        stats:{ hp:216,
          attack:100,
          defense:121,
          spatk:91,
          spdef:95,
          speed:85 },
        species:"Order",
        height:4.5,
        weight:610,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":319,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      diancie:{ pokemonid:"diancie",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"rock",
        type2:"fairy",
        stats:{ hp:50,
          attack:100,
          defense:150,
          spatk:100,
          spdef:150,
          speed:50 },
        species:"Jewel",
        height:0.7,
        weight:8.8,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:1,
          spdef:2 } },
      "diancie-mega":{ pokemonid:"diancie",
        formid:"mega",
        formname:"Mega Diancie",
        gen:6,
        release:"omega-ruby-alpha-sapphire",
        type1:"rock",
        type2:"fairy",
        stats:{ hp:50,
          attack:160,
          defense:110,
          spatk:160,
          spdef:110,
          speed:110 },
        species:"Jewel",
        height:1.1,
        weight:27.8,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":315,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:1,
          spdef:2 } },
      "hoopa-confined":{ pokemonid:"hoopa",
        formid:"confined",
        formname:"Hoopa Confined",
        gen:6,
        release:"x-y",
        type1:"psychic",
        type2:"ghost",
        stats:{ hp:80,
          attack:110,
          defense:60,
          spatk:150,
          spdef:130,
          speed:70 },
        species:"Mischief",
        height:0.5,
        weight:9,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "hoopa-unbound":{ pokemonid:"hoopa",
        formid:"unbound",
        formname:"Hoopa Unbound",
        gen:6,
        release:"x-y",
        type1:"psychic",
        type2:"dark",
        stats:{ hp:80,
          attack:160,
          defense:60,
          spatk:170,
          spdef:130,
          speed:80 },
        species:"Djinn",
        height:6.5,
        weight:490,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      volcanion:{ pokemonid:"volcanion",
        formid:null,
        formname:null,
        gen:6,
        release:"x-y",
        type1:"fire",
        type2:"water",
        stats:{ hp:80,
          attack:110,
          defense:120,
          spatk:130,
          spdef:90,
          speed:70 },
        species:"Steam",
        height:1.7,
        weight:195,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:100,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      rowlet:{ pokemonid:"rowlet",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:"flying",
        stats:{ hp:68,
          attack:55,
          defense:55,
          spatk:50,
          spdef:50,
          speed:42 },
        species:"Grass Quill",
        height:0.3,
        weight:1.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":64,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:1 } },
      dartrix:{ pokemonid:"dartrix",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:"flying",
        stats:{ hp:78,
          attack:75,
          defense:75,
          spatk:70,
          spdef:70,
          speed:52 },
        species:"Blade Quill",
        height:0.7,
        weight:16,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:2 } },
      decidueye:{ pokemonid:"decidueye",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:"ghost",
        stats:{ hp:78,
          attack:107,
          defense:75,
          spatk:100,
          spdef:100,
          speed:70 },
        species:"Arrow Quill",
        height:1.6,
        weight:36.6,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      litten:{ pokemonid:"litten",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"fire",
        type2:null,
        stats:{ hp:45,
          attack:65,
          defense:40,
          spatk:60,
          spdef:40,
          speed:70 },
        species:"Fire Cat",
        height:0.4,
        weight:4.3,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":64,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      torracat:{ pokemonid:"torracat",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"fire",
        type2:null,
        stats:{ hp:65,
          attack:85,
          defense:50,
          spatk:80,
          spdef:50,
          speed:90 },
        species:"Fire Cat",
        height:0.7,
        weight:25,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      incineroar:{ pokemonid:"incineroar",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"fire",
        type2:"dark",
        stats:{ hp:95,
          attack:115,
          defense:90,
          spatk:80,
          spdef:90,
          speed:60 },
        species:"Heel",
        height:1.8,
        weight:83,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      popplio:{ pokemonid:"popplio",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:null,
        stats:{ hp:50,
          attack:54,
          defense:54,
          spatk:66,
          spdef:56,
          speed:40 },
        species:"Sea Lion",
        height:0.4,
        weight:7.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":64,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      brionne:{ pokemonid:"brionne",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:null,
        stats:{ hp:60,
          attack:69,
          defense:69,
          spatk:91,
          spdef:81,
          speed:50 },
        species:"Pop Star",
        height:0.6,
        weight:17.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      primarina:{ pokemonid:"primarina",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:"fairy",
        stats:{ hp:80,
          attack:74,
          defense:74,
          spatk:126,
          spdef:116,
          speed:60 },
        species:"Soloist",
        height:1.8,
        weight:44,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":239,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:3 } },
      pikipek:{ pokemonid:"pikipek",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:"flying",
        stats:{ hp:35,
          attack:75,
          defense:30,
          spatk:30,
          spdef:30,
          speed:65 },
        species:"Woodpecker",
        height:0.3,
        weight:1.2,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":53,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      trumbeak:{ pokemonid:"trumbeak",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:"flying",
        stats:{ hp:55,
          attack:85,
          defense:50,
          spatk:40,
          spdef:50,
          speed:75 },
        species:"Bugle Beak",
        height:0.6,
        weight:14.8,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":124,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      toucannon:{ pokemonid:"toucannon",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:"flying",
        stats:{ hp:80,
          attack:120,
          defense:75,
          spatk:75,
          spdef:75,
          speed:60 },
        species:"Cannon",
        height:1.1,
        weight:26,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":218,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:3 } },
      yungoos:{ pokemonid:"yungoos",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:null,
        stats:{ hp:48,
          attack:70,
          defense:30,
          spatk:30,
          spdef:30,
          speed:45 },
        species:"Loitering",
        height:0.4,
        weight:6,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":51,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      gumshoos:{ pokemonid:"gumshoos",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:null,
        stats:{ hp:88,
          attack:110,
          defense:60,
          spatk:55,
          spdef:60,
          speed:45 },
        species:"Stakeout",
        height:0.7,
        weight:14.2,
        gender:"4:4",
        "catch-rate":127,
        "base-exp":146,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      grubbin:{ pokemonid:"grubbin",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"bug",
        type2:null,
        stats:{ hp:47,
          attack:62,
          defense:45,
          spatk:55,
          spdef:45,
          speed:46 },
        species:"Larva",
        height:0.4,
        weight:4.4,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":60,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      charjabug:{ pokemonid:"charjabug",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"bug",
        type2:"electric",
        stats:{ hp:57,
          attack:82,
          defense:95,
          spatk:55,
          spdef:75,
          speed:36 },
        species:"Battery",
        height:0.5,
        weight:10.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":140,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      vikavolt:{ pokemonid:"vikavolt",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"bug",
        type2:"electric",
        stats:{ hp:77,
          attack:70,
          defense:90,
          spatk:145,
          spdef:75,
          speed:43 },
        species:"Stag Beetle",
        height:1.5,
        weight:45,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":225,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:3 } },
      crabrawler:{ pokemonid:"crabrawler",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"fighting",
        type2:null,
        stats:{ hp:47,
          attack:82,
          defense:57,
          spatk:42,
          spdef:47,
          speed:63 },
        species:"Boxing",
        height:0.6,
        weight:7,
        gender:"4:4",
        "catch-rate":225,
        "base-exp":68,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      crabominable:{ pokemonid:"crabominable",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"fighting",
        type2:"ice",
        stats:{ hp:97,
          attack:132,
          defense:77,
          spatk:62,
          spdef:67,
          speed:43 },
        species:"Woolly Crab",
        height:1.7,
        weight:180,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":167,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      "oricorio-baile":{ pokemonid:"oricorio",
        formid:"baile",
        formname:"Baile Style",
        gen:7,
        release:"sun-moon",
        type1:"fire",
        type2:"flying",
        stats:{ hp:75,
          attack:70,
          defense:70,
          spatk:98,
          spdef:70,
          speed:93 },
        species:"Dancing",
        height:0.6,
        weight:3.4,
        gender:"6:2",
        "catch-rate":45,
        "base-exp":167,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      "oricorio-pom-pom":{ pokemonid:"oricorio",
        formid:"pom-pom",
        formname:"Pom-Pom Style",
        gen:7,
        release:"sun-moon",
        type1:"electric",
        type2:"flying",
        stats:{ hp:75,
          attack:70,
          defense:70,
          spatk:98,
          spdef:70,
          speed:93 },
        species:"Dancing",
        height:0.6,
        weight:3.4,
        gender:"6:2",
        "catch-rate":45,
        "base-exp":167,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      "oricorio-pau":{ pokemonid:"oricorio",
        formid:"pau",
        formname:"Pa'u Style",
        gen:7,
        release:"sun-moon",
        type1:"psychic",
        type2:"flying",
        stats:{ hp:75,
          attack:70,
          defense:70,
          spatk:98,
          spdef:70,
          speed:93 },
        species:"Dancing",
        height:0.6,
        weight:3.4,
        gender:"6:2",
        "catch-rate":45,
        "base-exp":167,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      "oricorio-sensu":{ pokemonid:"oricorio",
        formid:"sensu",
        formname:"Sensu Style",
        gen:7,
        release:"sun-moon",
        type1:"ghost",
        type2:"flying",
        stats:{ hp:75,
          attack:70,
          defense:70,
          spatk:98,
          spdef:70,
          speed:93 },
        species:"Dancing",
        height:0.6,
        weight:3.4,
        gender:"6:2",
        "catch-rate":45,
        "base-exp":167,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      cutiefly:{ pokemonid:"cutiefly",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"bug",
        type2:"fairy",
        stats:{ hp:40,
          attack:45,
          defense:40,
          spatk:55,
          spdef:40,
          speed:84 },
        species:"Bee Fly",
        height:0.1,
        weight:0.2,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      ribombee:{ pokemonid:"ribombee",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"bug",
        type2:"fairy",
        stats:{ hp:60,
          attack:55,
          defense:60,
          spatk:95,
          spdef:70,
          speed:124 },
        species:"Bee Fly",
        height:0.2,
        weight:0.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":162,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      rockruff:{ pokemonid:"rockruff",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"rock",
        type2:null,
        stats:{ hp:45,
          attack:65,
          defense:40,
          spatk:30,
          spdef:40,
          speed:60 },
        species:"Puppy",
        height:0.5,
        weight:9.2,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":56,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      "rockruff-own-tempo":{ pokemonid:"rockruff",
        formid:"own-tempo",
        formname:"Own Tempo Rockruff",
        gen:7,
        release:"ultra-sun-ultra-moon",
        type1:"rock",
        type2:null,
        stats:{ hp:45,
          attack:65,
          defense:40,
          spatk:30,
          spdef:40,
          speed:60 },
        species:"Puppy",
        height:0.5,
        weight:9.2,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":56,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      "lycanroc-midday":{ pokemonid:"lycanroc",
        formid:"midday",
        formname:"Midday Form",
        gen:7,
        release:"sun-moon",
        type1:"rock",
        type2:null,
        stats:{ hp:75,
          attack:115,
          defense:65,
          spatk:55,
          spdef:65,
          speed:112 },
        species:"Wolf",
        height:0.8,
        weight:25,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":170,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      "lycanroc-midnight":{ pokemonid:"lycanroc",
        formid:"midnight",
        formname:"Midnight Form",
        gen:7,
        release:"sun-moon",
        type1:"rock",
        type2:null,
        stats:{ hp:85,
          attack:115,
          defense:75,
          spatk:55,
          spdef:75,
          speed:82 },
        species:"Wolf",
        height:1.1,
        weight:25,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":170,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      "lycanroc-dusk":{ pokemonid:"lycanroc",
        formid:"dusk",
        formname:"Dusk Form",
        gen:7,
        release:"ultra-sun-ultra-moon",
        type1:"rock",
        type2:null,
        stats:{ hp:75,
          attack:117,
          defense:65,
          spatk:55,
          spdef:65,
          speed:110 },
        species:"Wolf",
        height:0.8,
        weight:25,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":170,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      "wishiwashi-solo":{ pokemonid:"wishiwashi",
        formid:"solo",
        formname:"Solo Form",
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:null,
        stats:{ hp:45,
          attack:20,
          defense:20,
          spatk:25,
          spdef:25,
          speed:40 },
        species:"Small Fry",
        height:0.2,
        weight:0.3,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":61,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:1 } },
      "wishiwashi-school":{ pokemonid:"wishiwashi",
        formid:"school",
        formname:"School Form",
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:null,
        stats:{ hp:45,
          attack:140,
          defense:130,
          spatk:140,
          spdef:135,
          speed:30 },
        species:"Small Fry",
        height:8.2,
        weight:78.6,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":217,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ hp:1 } },
      mareanie:{ pokemonid:"mareanie",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"poison",
        type2:"water",
        stats:{ hp:50,
          attack:53,
          defense:62,
          spatk:43,
          spdef:52,
          speed:45 },
        species:"Brutal Star",
        height:0.4,
        weight:8,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":61,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      toxapex:{ pokemonid:"toxapex",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"poison",
        type2:"water",
        stats:{ hp:50,
          attack:63,
          defense:152,
          spatk:53,
          spdef:142,
          speed:35 },
        species:"Brutal Star",
        height:0.7,
        weight:14.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":173,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      mudbray:{ pokemonid:"mudbray",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"ground",
        type2:null,
        stats:{ hp:70,
          attack:100,
          defense:70,
          spatk:45,
          spdef:55,
          speed:45 },
        species:"Donkey",
        height:1,
        weight:110,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":77,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      mudsdale:{ pokemonid:"mudsdale",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"ground",
        type2:null,
        stats:{ hp:100,
          attack:125,
          defense:100,
          spatk:55,
          spdef:85,
          speed:35 },
        species:"Draft Horse",
        height:2.5,
        weight:920,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":175,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      dewpider:{ pokemonid:"dewpider",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:"bug",
        stats:{ hp:38,
          attack:40,
          defense:52,
          spatk:40,
          spdef:72,
          speed:27 },
        species:"Water Bubble",
        height:0.3,
        weight:4,
        gender:"4:4",
        "catch-rate":200,
        "base-exp":54,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      araquanid:{ pokemonid:"araquanid",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:"bug",
        stats:{ hp:68,
          attack:70,
          defense:92,
          spatk:50,
          spdef:132,
          speed:42 },
        species:"Water Bubble",
        height:1.8,
        weight:82,
        gender:"4:4",
        "catch-rate":100,
        "base-exp":159,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      fomantis:{ pokemonid:"fomantis",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:null,
        stats:{ hp:40,
          attack:55,
          defense:35,
          spatk:50,
          spdef:35,
          speed:35 },
        species:"Sickle Grass",
        height:0.3,
        weight:1.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":50,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      lurantis:{ pokemonid:"lurantis",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:null,
        stats:{ hp:70,
          attack:105,
          defense:90,
          spatk:80,
          spdef:90,
          speed:45 },
        species:"Bloom Sickle",
        height:0.9,
        weight:18.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      morelull:{ pokemonid:"morelull",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:"fairy",
        stats:{ hp:40,
          attack:35,
          defense:55,
          spatk:65,
          spdef:75,
          speed:15 },
        species:"Illuminating",
        height:0.2,
        weight:1.5,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":57,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      shiinotic:{ pokemonid:"shiinotic",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:"fairy",
        stats:{ hp:60,
          attack:45,
          defense:80,
          spatk:90,
          spdef:100,
          speed:30 },
        species:"Illuminating",
        height:1,
        weight:11.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":142,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      salandit:{ pokemonid:"salandit",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"poison",
        type2:"fire",
        stats:{ hp:48,
          attack:44,
          defense:40,
          spatk:71,
          spdef:40,
          speed:77 },
        species:"Toxic Lizard",
        height:0.6,
        weight:4.8,
        gender:"1:7",
        "catch-rate":120,
        "base-exp":64,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      salazzle:{ pokemonid:"salazzle",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"poison",
        type2:"fire",
        stats:{ hp:68,
          attack:64,
          defense:60,
          spatk:111,
          spdef:60,
          speed:117 },
        species:"Toxic Lizard",
        height:1.2,
        weight:22.2,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      stufful:{ pokemonid:"stufful",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:"fighting",
        stats:{ hp:70,
          attack:75,
          defense:50,
          spatk:45,
          spdef:50,
          speed:50 },
        species:"Flailing",
        height:0.5,
        weight:6.8,
        gender:"4:4",
        "catch-rate":140,
        "base-exp":68,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      bewear:{ pokemonid:"bewear",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:"fighting",
        stats:{ hp:120,
          attack:125,
          defense:80,
          spatk:55,
          spdef:60,
          speed:60 },
        species:"Strong Arm",
        height:2.1,
        weight:135,
        gender:"4:4",
        "catch-rate":70,
        "base-exp":175,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      bounsweet:{ pokemonid:"bounsweet",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:null,
        stats:{ hp:42,
          attack:30,
          defense:38,
          spatk:30,
          spdef:38,
          speed:32 },
        species:"Fruit",
        height:0.3,
        weight:3.2,
        gender:"8:0",
        "catch-rate":235,
        "base-exp":42,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ hp:1 } },
      steenee:{ pokemonid:"steenee",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:null,
        stats:{ hp:52,
          attack:40,
          defense:48,
          spatk:40,
          spdef:48,
          speed:62 },
        species:"Fruit",
        height:0.7,
        weight:8.2,
        gender:"8:0",
        "catch-rate":120,
        "base-exp":102,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      tsareena:{ pokemonid:"tsareena",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:null,
        stats:{ hp:72,
          attack:120,
          defense:98,
          spatk:50,
          spdef:98,
          speed:72 },
        species:"Fruit",
        height:1.2,
        weight:21.4,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":230,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      comfey:{ pokemonid:"comfey",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"fairy",
        type2:null,
        stats:{ hp:51,
          attack:52,
          defense:90,
          spatk:82,
          spdef:110,
          speed:100 },
        species:"Posy Picker",
        height:0.1,
        weight:0.3,
        gender:"6:2",
        "catch-rate":60,
        "base-exp":170,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spdef:2 } },
      oranguru:{ pokemonid:"oranguru",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:"psychic",
        stats:{ hp:90,
          attack:60,
          defense:80,
          spatk:90,
          spdef:110,
          speed:60 },
        species:"Sage",
        height:1.5,
        weight:76,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spdef:2 } },
      passimian:{ pokemonid:"passimian",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"fighting",
        type2:null,
        stats:{ hp:100,
          attack:120,
          defense:90,
          spatk:40,
          spdef:60,
          speed:80 },
        species:"Teamwork",
        height:2,
        weight:82.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":172,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      wimpod:{ pokemonid:"wimpod",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"bug",
        type2:"water",
        stats:{ hp:25,
          attack:35,
          defense:40,
          spatk:20,
          spdef:30,
          speed:80 },
        species:"Turn Tail",
        height:0.5,
        weight:12,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":46,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:1 } },
      golisopod:{ pokemonid:"golisopod",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"bug",
        type2:"water",
        stats:{ hp:75,
          attack:125,
          defense:140,
          spatk:60,
          spdef:90,
          speed:40 },
        species:"Hard Scale",
        height:2,
        weight:108,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":186,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      sandygast:{ pokemonid:"sandygast",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"ghost",
        type2:"ground",
        stats:{ hp:55,
          attack:55,
          defense:80,
          spatk:70,
          spdef:45,
          speed:15 },
        species:"Sand Heap",
        height:0.5,
        weight:70,
        gender:"4:4",
        "catch-rate":140,
        "base-exp":64,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      palossand:{ pokemonid:"palossand",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"ghost",
        type2:"ground",
        stats:{ hp:85,
          attack:75,
          defense:110,
          spatk:100,
          spdef:75,
          speed:35 },
        species:"Sand Castle",
        height:1.3,
        weight:250,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":168,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      pyukumuku:{ pokemonid:"pyukumuku",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:null,
        stats:{ hp:55,
          attack:60,
          defense:130,
          spatk:30,
          spdef:130,
          speed:5 },
        species:"Sea Cucumber",
        height:0.3,
        weight:1.2,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":144,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"fast",
        "ev-yield":{ spdef:2 } },
      "type-null":{ pokemonid:"type-null",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:null,
        stats:{ hp:95,
          attack:95,
          defense:95,
          spatk:95,
          spdef:95,
          speed:59 },
        species:"Synthetic",
        height:1.9,
        weight:120.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":107,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:2 } },
      silvally:{ pokemonid:"silvally",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:null,
        stats:{ hp:95,
          attack:95,
          defense:95,
          spatk:95,
          spdef:95,
          speed:95 },
        species:"Synthetic",
        height:2.3,
        weight:100.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":257,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      "minior-meteor":{ pokemonid:"minior",
        formid:"meteor",
        formname:"Meteor Form",
        gen:7,
        release:"sun-moon",
        type1:"rock",
        type2:"flying",
        stats:{ hp:60,
          attack:60,
          defense:100,
          spatk:60,
          spdef:100,
          speed:60 },
        species:"Meteor",
        height:0.3,
        weight:40,
        gender:"genderless",
        "catch-rate":30,
        "base-exp":154,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1,
          spdef:1 } },
      "minior-core":{ pokemonid:"minior",
        formid:"core",
        formname:"Core Form",
        gen:7,
        release:"sun-moon",
        type1:"rock",
        type2:"flying",
        stats:{ hp:60,
          attack:100,
          defense:60,
          spatk:100,
          spdef:60,
          speed:120 },
        species:"Meteor",
        height:0.3,
        weight:0.3,
        gender:"genderless",
        "catch-rate":30,
        "base-exp":175,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1,
          spatk:1 } },
      komala:{ pokemonid:"komala",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:null,
        stats:{ hp:65,
          attack:115,
          defense:65,
          spatk:75,
          spdef:95,
          speed:65 },
        species:"Drowsing",
        height:0.4,
        weight:19.9,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":168,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      turtonator:{ pokemonid:"turtonator",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"fire",
        type2:"dragon",
        stats:{ hp:60,
          attack:78,
          defense:135,
          spatk:91,
          spdef:85,
          speed:36 },
        species:"Blast Turtle",
        height:2,
        weight:212,
        gender:"4:4",
        "catch-rate":70,
        "base-exp":170,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      togedemaru:{ pokemonid:"togedemaru",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"electric",
        type2:"steel",
        stats:{ hp:65,
          attack:98,
          defense:63,
          spatk:40,
          spdef:73,
          speed:96 },
        species:"Roly-Poly",
        height:0.3,
        weight:3.3,
        gender:"4:4",
        "catch-rate":180,
        "base-exp":152,
        "egg-cycles":10,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      mimikyu:{ pokemonid:"mimikyu",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"ghost",
        type2:"fairy",
        stats:{ hp:55,
          attack:90,
          defense:80,
          spatk:50,
          spdef:105,
          speed:96 },
        species:"Disguise",
        height:0.2,
        weight:0.7,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":167,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      bruxish:{ pokemonid:"bruxish",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:"psychic",
        stats:{ hp:68,
          attack:105,
          defense:70,
          spatk:70,
          spdef:70,
          speed:92 },
        species:"Gnash Teeth",
        height:0.9,
        weight:19,
        gender:"4:4",
        "catch-rate":80,
        "base-exp":166,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      drampa:{ pokemonid:"drampa",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"normal",
        type2:"dragon",
        stats:{ hp:78,
          attack:60,
          defense:85,
          spatk:135,
          spdef:91,
          speed:36 },
        species:"Placid",
        height:3,
        weight:185,
        gender:"4:4",
        "catch-rate":70,
        "base-exp":170,
        "egg-cycles":20,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      dhelmise:{ pokemonid:"dhelmise",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"ghost",
        type2:"grass",
        stats:{ hp:70,
          attack:131,
          defense:100,
          spatk:86,
          spdef:90,
          speed:40 },
        species:"Sea Creeper",
        height:3.9,
        weight:210,
        gender:"genderless",
        "catch-rate":25,
        "base-exp":181,
        "egg-cycles":25,
        friendship:70,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      "jangmo-o":{ pokemonid:"jangmo-o",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"dragon",
        type2:null,
        stats:{ hp:45,
          attack:55,
          defense:65,
          spatk:45,
          spdef:45,
          speed:45 },
        species:"Scaly",
        height:0.6,
        weight:29.7,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":60,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:1 } },
      "hakamo-o":{ pokemonid:"hakamo-o",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"dragon",
        type2:"fighting",
        stats:{ hp:55,
          attack:75,
          defense:90,
          spatk:65,
          spdef:70,
          speed:65 },
        species:"Scaly",
        height:1.2,
        weight:47,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":147,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      "kommo-o":{ pokemonid:"kommo-o",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"dragon",
        type2:"fighting",
        stats:{ hp:75,
          attack:110,
          defense:125,
          spatk:100,
          spdef:105,
          speed:85 },
        species:"Scaly",
        height:1.6,
        weight:78.2,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":270,
        "egg-cycles":40,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ defense:3 } },
      "tapu-koko":{ pokemonid:"tapu-koko",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"electric",
        type2:"fairy",
        stats:{ hp:70,
          attack:115,
          defense:85,
          spatk:95,
          spdef:75,
          speed:130 },
        species:"Land Spirit",
        height:1.8,
        weight:20.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":257,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      "tapu-lele":{ pokemonid:"tapu-lele",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"psychic",
        type2:"fairy",
        stats:{ hp:70,
          attack:85,
          defense:75,
          spatk:130,
          spdef:115,
          speed:95 },
        species:"Land Spirit",
        height:1.2,
        weight:18.6,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":257,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "tapu-bulu":{ pokemonid:"tapu-bulu",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:"fairy",
        stats:{ hp:70,
          attack:130,
          defense:115,
          spatk:85,
          spdef:95,
          speed:75 },
        species:"Land Spirit",
        height:1.9,
        weight:45.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":257,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "tapu-fini":{ pokemonid:"tapu-fini",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"water",
        type2:"fairy",
        stats:{ hp:70,
          attack:75,
          defense:115,
          spatk:95,
          spdef:130,
          speed:85 },
        species:"Land Spirit",
        height:1.3,
        weight:21.2,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":257,
        "egg-cycles":15,
        friendship:70,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      cosmog:{ pokemonid:"cosmog",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"psychic",
        type2:null,
        stats:{ hp:43,
          attack:29,
          defense:31,
          spatk:29,
          spdef:31,
          speed:37 },
        species:"Nebula",
        height:0.2,
        weight:0.1,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":40,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:1 } },
      cosmoem:{ pokemonid:"cosmoem",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"psychic",
        type2:null,
        stats:{ hp:43,
          attack:29,
          defense:131,
          spatk:29,
          spdef:131,
          speed:37 },
        species:"Protostar",
        height:0.1,
        weight:999.9,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":140,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ defense:1,
          spdef:1 } },
      solgaleo:{ pokemonid:"solgaleo",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"psychic",
        type2:"steel",
        stats:{ hp:137,
          attack:137,
          defense:107,
          spatk:113,
          spdef:89,
          speed:97 },
        species:"Sunne",
        height:3.4,
        weight:230,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      lunala:{ pokemonid:"lunala",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"psychic",
        type2:"ghost",
        stats:{ hp:137,
          attack:113,
          defense:89,
          spatk:137,
          spdef:107,
          speed:97 },
        species:"Moone",
        height:4,
        weight:120,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      nihilego:{ pokemonid:"nihilego",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"rock",
        type2:"poison",
        stats:{ hp:109,
          attack:53,
          defense:47,
          spatk:127,
          spdef:131,
          speed:103 },
        species:"Parasite",
        height:1.2,
        weight:55.5,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":257,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spdef:3 } },
      buzzwole:{ pokemonid:"buzzwole",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"bug",
        type2:"fighting",
        stats:{ hp:107,
          attack:139,
          defense:139,
          spatk:53,
          spdef:53,
          speed:79 },
        species:"Swollen",
        height:2.4,
        weight:333.6,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":257,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          defense:2 } },
      pheromosa:{ pokemonid:"pheromosa",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"bug",
        type2:"fighting",
        stats:{ hp:71,
          attack:137,
          defense:37,
          spatk:137,
          spdef:37,
          speed:151 },
        species:"Lissome",
        height:1.8,
        weight:25,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":257,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      xurkitree:{ pokemonid:"xurkitree",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"electric",
        type2:null,
        stats:{ hp:83,
          attack:89,
          defense:71,
          spatk:173,
          spdef:71,
          speed:83 },
        species:"Glowing",
        height:3.8,
        weight:100,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":257,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      celesteela:{ pokemonid:"celesteela",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"steel",
        type2:"flying",
        stats:{ hp:97,
          attack:101,
          defense:103,
          spatk:107,
          spdef:101,
          speed:61 },
        species:"Launch",
        height:9.2,
        weight:999.9,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":257,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          defense:1,
          spatk:1 } },
      kartana:{ pokemonid:"kartana",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"grass",
        type2:"steel",
        stats:{ hp:59,
          attack:181,
          defense:131,
          spatk:59,
          spdef:31,
          speed:109 },
        species:"Drawn Sword",
        height:0.3,
        weight:0.1,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":257,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      guzzlord:{ pokemonid:"guzzlord",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"dark",
        type2:"dragon",
        stats:{ hp:223,
          attack:101,
          defense:53,
          spatk:97,
          spdef:53,
          speed:43 },
        species:"Junkivore",
        height:5.5,
        weight:888,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":257,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      necrozma:{ pokemonid:"necrozma",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"psychic",
        type2:null,
        stats:{ hp:97,
          attack:107,
          defense:101,
          spatk:127,
          spdef:89,
          speed:79 },
        species:"Prism",
        height:2.4,
        weight:230,
        gender:"genderless",
        "catch-rate":255,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          spatk:2 } },
      "necrozma-dusk-mane":{ pokemonid:"necrozma",
        formid:"dusk-mane",
        formname:"Dusk Mane Necrozma",
        gen:7,
        release:"ultra-sun-ultra-moon",
        type1:"psychic",
        type2:"steel",
        stats:{ hp:97,
          attack:157,
          defense:127,
          spatk:113,
          spdef:109,
          speed:77 },
        species:"Prism",
        height:3.8,
        weight:460,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "necrozma-dawn-wings":{ pokemonid:"necrozma",
        formid:"dawn-wings",
        formname:"Dawn Wings Necrozma",
        gen:7,
        release:"ultra-sun-ultra-moon",
        type1:"psychic",
        type2:"ghost",
        stats:{ hp:97,
          attack:113,
          defense:109,
          spatk:157,
          spdef:127,
          speed:77 },
        species:"Prism",
        height:4.2,
        weight:350,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":306,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      "necrozma-ultra":{ pokemonid:"necrozma",
        formid:"ultra",
        formname:"Ultra Necrozma",
        gen:7,
        release:"ultra-sun-ultra-moon",
        type1:"psychic",
        type2:"dragon",
        stats:{ hp:97,
          attack:167,
          defense:97,
          spatk:167,
          spdef:97,
          speed:129 },
        species:"Prism",
        height:7.5,
        weight:230,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":339,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:1,
          spatk:1,
          speed:1 } },
      magearna:{ pokemonid:"magearna",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"steel",
        type2:"fairy",
        stats:{ hp:80,
          attack:95,
          defense:115,
          spatk:130,
          spdef:115,
          speed:65 },
        species:"Artificial",
        height:1,
        weight:80.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      marshadow:{ pokemonid:"marshadow",
        formid:null,
        formname:null,
        gen:7,
        release:"sun-moon",
        type1:"fighting",
        type2:"ghost",
        stats:{ hp:90,
          attack:125,
          defense:80,
          spatk:90,
          spdef:90,
          speed:125 },
        species:"Gloomdweller",
        height:0.7,
        weight:22.2,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ attack:2,
          speed:1 } },
      poipole:{ pokemonid:"poipole",
        formid:null,
        formname:null,
        gen:7,
        release:"ultra-sun-ultra-moon",
        type1:"poison",
        type2:null,
        stats:{ hp:67,
          attack:73,
          defense:67,
          spatk:73,
          spdef:67,
          speed:73 },
        species:"Poison Pin",
        height:0.6,
        weight:1.8,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":189,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ speed:1 } },
      naganadel:{ pokemonid:"naganadel",
        formid:null,
        formname:null,
        gen:7,
        release:"ultra-sun-ultra-moon",
        type1:"poison",
        type2:"dragon",
        stats:{ hp:73,
          attack:73,
          defense:73,
          spatk:127,
          spdef:73,
          speed:121 },
        species:"Poison Pin",
        height:3.6,
        weight:150,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":243,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      stakataka:{ pokemonid:"stakataka",
        formid:null,
        formname:null,
        gen:7,
        release:"ultra-sun-ultra-moon",
        type1:"rock",
        type2:"steel",
        stats:{ hp:61,
          attack:131,
          defense:211,
          spatk:53,
          spdef:101,
          speed:13 },
        species:"Rampart",
        height:5.5,
        weight:820,
        gender:"genderless",
        "catch-rate":30,
        "base-exp":257,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ defense:3 } },
      blacephalon:{ pokemonid:"blacephalon",
        formid:null,
        formname:null,
        gen:7,
        release:"ultra-sun-ultra-moon",
        type1:"fire",
        type2:"ghost",
        stats:{ hp:53,
          attack:127,
          defense:53,
          spatk:151,
          spdef:79,
          speed:107 },
        species:"Fireworks",
        height:1.8,
        weight:13,
        gender:"genderless",
        "catch-rate":30,
        "base-exp":257,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      zeraora:{ pokemonid:"zeraora",
        formid:null,
        formname:null,
        gen:7,
        release:"ultra-sun-ultra-moon",
        type1:"electric",
        type2:null,
        stats:{ hp:88,
          attack:112,
          defense:75,
          spatk:102,
          spdef:80,
          speed:143 },
        species:"Thunderclap",
        height:1.5,
        weight:44.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":270,
        "egg-cycles":120,
        friendship:0,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      meltan:{ pokemonid:"meltan",
        formid:null,
        formname:null,
        gen:7,
        release:"lets-go-pikachu-eevee",
        type1:"steel",
        type2:null,
        stats:{ hp:46,
          attack:65,
          defense:65,
          spatk:55,
          spdef:35,
          speed:34 },
        species:"Hex Nut",
        height:0.2,
        weight:8,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      melmetal:{ pokemonid:"melmetal",
        formid:null,
        formname:null,
        gen:7,
        release:"lets-go-pikachu-eevee",
        type1:"steel",
        type2:null,
        stats:{ hp:135,
          attack:143,
          defense:143,
          spatk:80,
          spdef:65,
          speed:34 },
        species:"Hex Nut",
        height:2.5,
        weight:800,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      grookey:{ pokemonid:"grookey",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"grass",
        type2:null,
        stats:{ hp:50,
          attack:65,
          defense:50,
          spatk:40,
          spdef:40,
          speed:65 },
        species:"Chimp",
        height:0.3,
        weight:5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      thwackey:{ pokemonid:"thwackey",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"grass",
        type2:null,
        stats:{ hp:70,
          attack:85,
          defense:70,
          spatk:55,
          spdef:60,
          speed:80 },
        species:"Beat",
        height:0.7,
        weight:14,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      rillaboom:{ pokemonid:"rillaboom",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"grass",
        type2:null,
        stats:{ hp:100,
          attack:125,
          defense:90,
          spatk:60,
          spdef:70,
          speed:85 },
        species:"Drummer",
        height:2.1,
        weight:90,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:3 } },
      scorbunny:{ pokemonid:"scorbunny",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fire",
        type2:null,
        stats:{ hp:50,
          attack:71,
          defense:40,
          spatk:40,
          spdef:40,
          speed:69 },
        species:"Rabbit",
        height:0.3,
        weight:4.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      raboot:{ pokemonid:"raboot",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fire",
        type2:null,
        stats:{ hp:65,
          attack:86,
          defense:60,
          spatk:55,
          spdef:60,
          speed:94 },
        species:"Rabbit",
        height:0.6,
        weight:9,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      cinderace:{ pokemonid:"cinderace",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fire",
        type2:null,
        stats:{ hp:80,
          attack:116,
          defense:75,
          spatk:65,
          spdef:75,
          speed:119 },
        species:"Striker",
        height:1.4,
        weight:33,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      sobble:{ pokemonid:"sobble",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"water",
        type2:null,
        stats:{ hp:50,
          attack:40,
          defense:40,
          spatk:70,
          spdef:40,
          speed:70 },
        species:"Water Lizard",
        height:0.3,
        weight:4,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ spdef:1,
          speed:1 } },
      drizzile:{ pokemonid:"drizzile",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"water",
        type2:null,
        stats:{ hp:65,
          attack:60,
          defense:55,
          spatk:95,
          spdef:55,
          speed:90 },
        species:"Water lizard",
        height:0.7,
        weight:11.5,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      inteleon:{ pokemonid:"inteleon",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"water",
        type2:null,
        stats:{ hp:70,
          attack:85,
          defense:65,
          spatk:125,
          spdef:65,
          speed:120 },
        species:"Secret Agent",
        height:1.9,
        weight:45.2,
        gender:"1:7",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:3 } },
      skwovet:{ pokemonid:"skwovet",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"normal",
        type2:null,
        stats:{ hp:70,
          attack:55,
          defense:55,
          spatk:35,
          spdef:35,
          speed:25 },
        species:"Cheeky",
        height:0.3,
        weight:2.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:1 } },
      greedent:{ pokemonid:"greedent",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"normal",
        type2:null,
        stats:{ hp:120,
          attack:95,
          defense:95,
          spatk:55,
          spdef:75,
          speed:20 },
        species:"Greedy",
        height:0.6,
        weight:6,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ hp:2 } },
      rookidee:{ pokemonid:"rookidee",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"flying",
        type2:null,
        stats:{ hp:38,
          attack:47,
          defense:35,
          spatk:33,
          spdef:35,
          speed:57 },
        species:"Tiny Bird",
        height:0.2,
        weight:1.8,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:1 } },
      corvisquire:{ pokemonid:"corvisquire",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"flying",
        type2:null,
        stats:{ hp:68,
          attack:67,
          defense:55,
          spatk:43,
          spdef:55,
          speed:77 },
        species:"Raven",
        height:0.8,
        weight:16,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ speed:2 } },
      corviknight:{ pokemonid:"corviknight",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"flying",
        type2:"steel",
        stats:{ hp:98,
          attack:87,
          defense:105,
          spatk:53,
          spdef:85,
          speed:67 },
        species:"Raven",
        height:2.2,
        weight:75,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:3 } },
      blipbug:{ pokemonid:"blipbug",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"bug",
        type2:null,
        stats:{ hp:25,
          attack:20,
          defense:20,
          spatk:25,
          spdef:45,
          speed:45 },
        species:"Larva",
        height:0.4,
        weight:8,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      dottler:{ pokemonid:"dottler",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"bug",
        type2:"psychic",
        stats:{ hp:50,
          attack:35,
          defense:80,
          spatk:50,
          spdef:90,
          speed:30 },
        species:"Radome",
        height:0.4,
        weight:19.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      orbeetle:{ pokemonid:"orbeetle",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"bug",
        type2:"psychic",
        stats:{ hp:60,
          attack:45,
          defense:110,
          spatk:80,
          spdef:120,
          speed:90 },
        species:"Seven Spot",
        height:0.4,
        weight:40.8,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:3 } },
      nickit:{ pokemonid:"nickit",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dark",
        type2:null,
        stats:{ hp:40,
          attack:28,
          defense:28,
          spatk:47,
          spdef:52,
          speed:50 },
        species:"Fox",
        height:0.6,
        weight:8.9,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"fast",
        "ev-yield":{ spdef:1 } },
      thievul:{ pokemonid:"thievul",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dark",
        type2:null,
        stats:{ hp:70,
          attack:58,
          defense:58,
          spatk:87,
          spdef:92,
          speed:90 },
        species:"Fox",
        height:1.2,
        weight:19.9,
        gender:"4:4",
        "catch-rate":127,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"fast",
        "ev-yield":{ spdef:2 } },
      gossifleur:{ pokemonid:"gossifleur",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"grass",
        type2:null,
        stats:{ hp:40,
          attack:40,
          defense:60,
          spatk:40,
          spdef:60,
          speed:10 },
        species:"Flowering",
        height:0.4,
        weight:2.2,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      eldegoss:{ pokemonid:"eldegoss",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"grass",
        type2:null,
        stats:{ hp:60,
          attack:50,
          defense:90,
          spatk:80,
          spdef:120,
          speed:60 },
        species:"Cotton Bloom",
        height:0.5,
        weight:2.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      wooloo:{ pokemonid:"wooloo",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"normal",
        type2:null,
        stats:{ hp:42,
          attack:40,
          defense:55,
          spatk:40,
          spdef:45,
          speed:48 },
        species:"Sheep",
        height:0.6,
        weight:6,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      dubwool:{ pokemonid:"dubwool",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"normal",
        type2:null,
        stats:{ hp:72,
          attack:80,
          defense:100,
          spatk:60,
          spdef:90,
          speed:88 },
        species:"Sheep",
        height:1.3,
        weight:43,
        gender:"4:4",
        "catch-rate":127,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      chewtle:{ pokemonid:"chewtle",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"water",
        type2:null,
        stats:{ hp:50,
          attack:64,
          defense:50,
          spatk:38,
          spdef:38,
          speed:44 },
        species:"Snapping",
        height:0.3,
        weight:8.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      drednaw:{ pokemonid:"drednaw",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"water",
        type2:"rock",
        stats:{ hp:90,
          attack:115,
          defense:90,
          spatk:48,
          spdef:68,
          speed:74 },
        species:"Bite",
        height:1,
        weight:115.5,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      yamper:{ pokemonid:"yamper",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:null,
        stats:{ hp:59,
          attack:45,
          defense:50,
          spatk:40,
          spdef:50,
          speed:26 },
        species:"Puppy",
        height:0.3,
        weight:13.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"fast",
        "ev-yield":{ hp:1 } },
      boltund:{ pokemonid:"boltund",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:null,
        stats:{ hp:69,
          attack:90,
          defense:60,
          spatk:90,
          spdef:60,
          speed:121 },
        species:"Dog",
        height:1,
        weight:34,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"fast",
        "ev-yield":{ speed:2 } },
      rolycoly:{ pokemonid:"rolycoly",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"rock",
        type2:null,
        stats:{ hp:30,
          attack:40,
          defense:50,
          spatk:40,
          spdef:50,
          speed:30 },
        species:"Coal",
        height:0.3,
        weight:12,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:1 } },
      carkol:{ pokemonid:"carkol",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"rock",
        type2:"fire",
        stats:{ hp:80,
          attack:60,
          defense:90,
          spatk:60,
          spdef:70,
          speed:50 },
        species:"Coal",
        height:1.1,
        weight:78,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:2 } },
      coalossal:{ pokemonid:"coalossal",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"rock",
        type2:"fire",
        stats:{ hp:110,
          attack:80,
          defense:120,
          spatk:80,
          spdef:90,
          speed:30 },
        species:"Coal",
        height:2.8,
        weight:310.5,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ defense:3 } },
      applin:{ pokemonid:"applin",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"grass",
        type2:"dragon",
        stats:{ hp:40,
          attack:40,
          defense:80,
          spatk:40,
          spdef:40,
          speed:20 },
        species:"Apple Core",
        height:0.2,
        weight:0.5,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"erratic",
        "ev-yield":{ defense:1 } },
      flapple:{ pokemonid:"flapple",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"grass",
        type2:"dragon",
        stats:{ hp:70,
          attack:110,
          defense:80,
          spatk:95,
          spdef:60,
          speed:70 },
        species:"Apple Wing",
        height:0.3,
        weight:1,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"erratic",
        "ev-yield":{ attack:2 } },
      appletun:{ pokemonid:"appletun",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"grass",
        type2:"dragon",
        stats:{ hp:110,
          attack:85,
          defense:80,
          spatk:100,
          spdef:80,
          speed:30 },
        species:"Apple Nectar",
        height:0.4,
        weight:13,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"erratic",
        "ev-yield":{ hp:2 } },
      silicobra:{ pokemonid:"silicobra",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"ground",
        type2:null,
        stats:{ hp:52,
          attack:57,
          defense:75,
          spatk:35,
          spdef:50,
          speed:46 },
        species:"Sand Snake",
        height:2.2,
        weight:7.6,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:1 } },
      sandaconda:{ pokemonid:"sandaconda",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"ground",
        type2:null,
        stats:{ hp:72,
          attack:107,
          defense:125,
          spatk:65,
          spdef:70,
          speed:71 },
        species:"Sand Snake",
        height:3.8,
        weight:65.5,
        gender:"4:4",
        "catch-rate":120,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      cramorant:{ pokemonid:"cramorant",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"flying",
        type2:"water",
        stats:{ hp:70,
          attack:85,
          defense:55,
          spatk:85,
          spdef:95,
          speed:85 },
        species:"Gulp",
        height:0.8,
        weight:18,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      arrokuda:{ pokemonid:"arrokuda",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"water",
        type2:null,
        stats:{ hp:41,
          attack:63,
          defense:40,
          spatk:40,
          spdef:30,
          speed:66 },
        species:"Rush",
        height:0.5,
        weight:1,
        gender:"4:4",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ speed:1 } },
      barraskewda:{ pokemonid:"barraskewda",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"water",
        type2:null,
        stats:{ hp:61,
          attack:123,
          defense:60,
          spatk:60,
          spdef:50,
          speed:136 },
        species:"Skewer",
        height:1.3,
        weight:30,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ speed:2 } },
      toxel:{ pokemonid:"toxel",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:"poison",
        stats:{ hp:40,
          attack:38,
          defense:35,
          spatk:54,
          spdef:35,
          speed:40 },
        species:"Baby",
        height:0.4,
        weight:11,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:1 } },
      "toxtricity-low-key":{ pokemonid:"toxtricity",
        formid:"low-key",
        formname:"Low Key Form",
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:"poison",
        stats:{ hp:75,
          attack:98,
          defense:70,
          spatk:114,
          spdef:70,
          speed:75 },
        species:"Punk",
        height:1.6,
        weight:40,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      "toxtricity-amped":{ pokemonid:"toxtricity",
        formid:"amped",
        formname:"Amped Form",
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:"poison",
        stats:{ hp:75,
          attack:98,
          defense:70,
          spatk:114,
          spdef:70,
          speed:75 },
        species:"Punk",
        height:1.6,
        weight:40,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ spatk:2 } },
      sizzlipede:{ pokemonid:"sizzlipede",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fire",
        type2:"bug",
        stats:{ hp:50,
          attack:65,
          defense:45,
          spatk:50,
          spdef:50,
          speed:45 },
        species:"Radiator",
        height:0.7,
        weight:1,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      centiskorch:{ pokemonid:"centiskorch",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fire",
        type2:"bug",
        stats:{ hp:100,
          attack:115,
          defense:65,
          spatk:90,
          spdef:90,
          speed:65 },
        species:"Radiator",
        height:3,
        weight:120,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      clobbopus:{ pokemonid:"clobbopus",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:null,
        stats:{ hp:50,
          attack:68,
          defense:60,
          spatk:50,
          spdef:50,
          speed:32 },
        species:"Tantrum",
        height:0.6,
        weight:4,
        gender:"4:4",
        "catch-rate":180,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:1 } },
      grapploct:{ pokemonid:"grapploct",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:null,
        stats:{ hp:80,
          attack:118,
          defense:90,
          spatk:70,
          spdef:80,
          speed:42 },
        species:"Tantrum",
        height:1.6,
        weight:39,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium slow",
        "ev-yield":{ attack:2 } },
      sinistea:{ pokemonid:"sinistea",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"ghost",
        type2:null,
        stats:{ hp:40,
          attack:45,
          defense:45,
          spatk:74,
          spdef:54,
          speed:50 },
        species:"Black Tea",
        height:0.1,
        weight:0.2,
        gender:"genderless",
        "catch-rate":120,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      polteageist:{ pokemonid:"polteageist",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"ghost",
        type2:null,
        stats:{ hp:60,
          attack:65,
          defense:65,
          spatk:134,
          spdef:114,
          speed:70 },
        species:"Black Tea",
        height:0.2,
        weight:0.4,
        gender:"genderless",
        "catch-rate":60,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      hatenna:{ pokemonid:"hatenna",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:null,
        stats:{ hp:42,
          attack:30,
          defense:45,
          spatk:56,
          spdef:53,
          speed:39 },
        species:"Calm",
        height:0.4,
        weight:3.4,
        gender:"8:0",
        "catch-rate":235,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ spatk:1 } },
      hattrem:{ pokemonid:"hattrem",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:null,
        stats:{ hp:57,
          attack:40,
          defense:65,
          spatk:86,
          spdef:73,
          speed:49 },
        species:"Serene",
        height:0.6,
        weight:4.8,
        gender:"8:0",
        "catch-rate":120,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ spatk:2 } },
      hatterene:{ pokemonid:"hatterene",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:"fairy",
        stats:{ hp:57,
          attack:90,
          defense:95,
          spatk:136,
          spdef:103,
          speed:29 },
        species:"Silent",
        height:2.1,
        weight:5,
        gender:"8:0",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      impidimp:{ pokemonid:"impidimp",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dark",
        type2:"fairy",
        stats:{ hp:45,
          attack:45,
          defense:30,
          spatk:55,
          spdef:40,
          speed:50 },
        species:"Wily",
        height:0.4,
        weight:5.5,
        gender:0,
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      morgrem:{ pokemonid:"morgrem",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dark",
        type2:"fairy",
        stats:{ hp:65,
          attack:60,
          defense:45,
          spatk:75,
          spdef:55,
          speed:70 },
        species:"Devious",
        height:0.8,
        weight:12.5,
        gender:0,
        "catch-rate":120,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      grimmsnarl:{ pokemonid:"grimmsnarl",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dark",
        type2:"fairy",
        stats:{ hp:95,
          attack:120,
          defense:65,
          spatk:95,
          spdef:75,
          speed:60 },
        species:"Bulk Up",
        height:1.5,
        weight:61,
        gender:0,
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:3 } },
      obstagoon:{ pokemonid:"obstagoon",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dark",
        type2:"normal",
        stats:{ hp:93,
          attack:90,
          defense:101,
          spatk:60,
          spdef:81,
          speed:95 },
        species:"Blocking",
        height:1.6,
        weight:46,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":15,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:3 } },
      perrserker:{ pokemonid:"perrserker",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"steel",
        type2:null,
        stats:{ hp:70,
          attack:110,
          defense:100,
          spatk:50,
          spdef:60,
          speed:50 },
        species:"Viking",
        height:0.8,
        weight:28,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      cursola:{ pokemonid:"cursola",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"ghost",
        type2:null,
        stats:{ hp:60,
          attack:95,
          defense:50,
          spatk:145,
          spdef:130,
          speed:30 },
        species:"Coral",
        height:1,
        weight:0.4,
        gender:"6:2",
        "catch-rate":30,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"fast",
        "ev-yield":{ spatk:2 } },
      sirfetchd:{ pokemonid:"sirfetchd",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:null,
        stats:{ hp:62,
          attack:135,
          defense:95,
          spatk:68,
          spdef:82,
          speed:65 },
        species:"Wild Duck",
        height:0.8,
        weight:117,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      "mr-rime":{ pokemonid:"mr-rime",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:"ice",
        stats:{ hp:80,
          attack:85,
          defense:75,
          spatk:110,
          spdef:100,
          speed:70 },
        species:"Comedian",
        height:1.5,
        weight:58.2,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:3 } },
      runerigus:{ pokemonid:"runerigus",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"ground",
        type2:"ghost",
        stats:{ hp:58,
          attack:95,
          defense:145,
          spatk:50,
          spdef:105,
          speed:30 },
        species:"Grudge",
        height:1.6,
        weight:66.6,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ defense:2 } },
      milcery:{ pokemonid:"milcery",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fairy",
        type2:null,
        stats:{ hp:45,
          attack:40,
          defense:40,
          spatk:50,
          spdef:61,
          speed:34 },
        species:"Cream",
        height:0.2,
        weight:0.3,
        gender:"8:0",
        "catch-rate":200,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:1 } },
      alcremie:{ pokemonid:"alcremie",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fairy",
        type2:null,
        stats:{ hp:65,
          attack:60,
          defense:75,
          spatk:110,
          spdef:121,
          speed:64 },
        species:"Cream",
        height:0.3,
        weight:0.5,
        gender:"8:0",
        "catch-rate":100,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spdef:2 } },
      falinks:{ pokemonid:"falinks",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:null,
        stats:{ hp:65,
          attack:100,
          defense:100,
          spatk:70,
          spdef:60,
          speed:75 },
        species:"Formation",
        height:3,
        weight:62,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2,
          spdef:1 } },
      pincurchin:{ pokemonid:"pincurchin",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:null,
        stats:{ hp:48,
          attack:101,
          defense:95,
          spatk:91,
          spdef:85,
          speed:15 },
        species:"Sea Urchin",
        height:0.3,
        weight:1,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      snom:{ pokemonid:"snom",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"ice",
        type2:"bug",
        stats:{ hp:30,
          attack:25,
          defense:35,
          spatk:45,
          spdef:30,
          speed:20 },
        species:"Worm",
        height:0.3,
        weight:3.8,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:1 } },
      frosmoth:{ pokemonid:"frosmoth",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"ice",
        type2:"bug",
        stats:{ hp:70,
          attack:65,
          defense:60,
          spatk:125,
          spdef:90,
          speed:65 },
        species:"Frost Moth",
        height:1.3,
        weight:42,
        gender:"4:4",
        "catch-rate":75,
        "base-exp":null,
        "egg-cycles":20,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      stonjourner:{ pokemonid:"stonjourner",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"rock",
        type2:null,
        stats:{ hp:100,
          attack:125,
          defense:135,
          spatk:20,
          spdef:20,
          speed:70 },
        species:"Big Rock",
        height:2.5,
        weight:520,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      "eiscue-ice":{ pokemonid:"eiscue",
        formid:"ice",
        formname:"Ice Face",
        gen:8,
        release:"sword-shield",
        type1:"ice",
        type2:null,
        stats:{ hp:75,
          attack:80,
          defense:110,
          spatk:65,
          spdef:90,
          speed:50 },
        species:"Penguin",
        height:1.4,
        weight:89,
        gender:"4:4",
        "catch-rate":60,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      "eiscue-noice":{ pokemonid:"eiscue",
        formid:"noice",
        formname:"Noice Face",
        gen:8,
        release:"sword-shield",
        type1:"ice",
        type2:null,
        stats:{ hp:75,
          attack:80,
          defense:70,
          spatk:65,
          spdef:50,
          speed:130 },
        species:"Penguin",
        height:1.4,
        weight:89,
        gender:null,
        "catch-rate":null,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      "indeedee-male":{ pokemonid:"indeedee",
        formid:"male",
        formname:"Male",
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:"normal",
        stats:{ hp:60,
          attack:65,
          defense:55,
          spatk:105,
          spdef:95,
          speed:95 },
        species:"Emotion",
        height:0.9,
        weight:28,
        gender:0,
        "catch-rate":30,
        "base-exp":null,
        "egg-cycles":40,
        friendship:null,
        "growth-rate":"fast",
        "ev-yield":{ spatk:2 } },
      "indeedee-female":{ pokemonid:"indeedee",
        formid:"female",
        formname:"Female",
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:"normal",
        stats:{ hp:70,
          attack:55,
          defense:65,
          spatk:95,
          spdef:105,
          speed:85 },
        species:"Emotion",
        height:0.9,
        weight:28,
        gender:"8:0",
        "catch-rate":30,
        "base-exp":null,
        "egg-cycles":40,
        friendship:null,
        "growth-rate":"fast",
        "ev-yield":{ spdef:2 } },
      "morpeko-full-belly":{ pokemonid:"morpeko",
        formid:"full-belly",
        formname:"Full Belly Mode",
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:"dark",
        stats:{ hp:58,
          attack:95,
          defense:58,
          spatk:70,
          spdef:58,
          speed:97 },
        species:"Two-Sided",
        height:0.3,
        weight:3,
        gender:"4:4",
        "catch-rate":180,
        "base-exp":null,
        "egg-cycles":10,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      "morpeko-hangry":{ pokemonid:"morpeko",
        formid:"hangry",
        formname:"Hangry Mode",
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:"dark",
        stats:{ hp:58,
          attack:95,
          defense:58,
          spatk:70,
          spdef:58,
          speed:97 },
        species:"Two-Sided",
        height:0.3,
        weight:3,
        gender:null,
        "catch-rate":null,
        "base-exp":null,
        "egg-cycles":10,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ speed:2 } },
      cufant:{ pokemonid:"cufant",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"steel",
        type2:null,
        stats:{ hp:72,
          attack:80,
          defense:49,
          spatk:40,
          spdef:49,
          speed:40 },
        species:"Copperderm",
        height:1.2,
        weight:100,
        gender:"4:4",
        "catch-rate":190,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:1 } },
      copperajah:{ pokemonid:"copperajah",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"steel",
        type2:null,
        stats:{ hp:122,
          attack:130,
          defense:69,
          spatk:80,
          spdef:69,
          speed:30 },
        species:"Copperderm",
        height:3,
        weight:650,
        gender:"4:4",
        "catch-rate":90,
        "base-exp":null,
        "egg-cycles":25,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ attack:2 } },
      dracozolt:{ pokemonid:"dracozolt",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:"dragon",
        stats:{ hp:90,
          attack:100,
          defense:90,
          spatk:80,
          spdef:70,
          speed:75 },
        species:"Fossil",
        height:1.8,
        weight:190,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":35,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      arctozolt:{ pokemonid:"arctozolt",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:"ice",
        stats:{ hp:90,
          attack:100,
          defense:90,
          spatk:90,
          spdef:80,
          speed:55 },
        species:"Fossil",
        height:2.3,
        weight:150,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":35,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:2 } },
      dracovish:{ pokemonid:"dracovish",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"water",
        type2:"dragon",
        stats:{ hp:90,
          attack:90,
          defense:100,
          spatk:70,
          spdef:80,
          speed:75 },
        species:"Fossil",
        height:2.3,
        weight:215,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":35,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      arctovish:{ pokemonid:"arctovish",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"water",
        type2:"ice",
        stats:{ hp:90,
          attack:90,
          defense:100,
          spatk:80,
          spdef:90,
          speed:55 },
        species:"Fossil",
        height:2,
        weight:175,
        gender:"genderless",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":35,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ defense:2 } },
      duraludon:{ pokemonid:"duraludon",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"steel",
        type2:"dragon",
        stats:{ hp:70,
          attack:95,
          defense:115,
          spatk:120,
          spdef:50,
          speed:85 },
        species:"Alloy",
        height:1.8,
        weight:40,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":30,
        friendship:null,
        "growth-rate":"medium fast",
        "ev-yield":{ spatk:2 } },
      dreepy:{ pokemonid:"dreepy",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dragon",
        type2:"ghost",
        stats:{ hp:28,
          attack:60,
          defense:30,
          spatk:40,
          spdef:30,
          speed:82 },
        species:"Lingering",
        height:0.5,
        weight:2,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":40,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ speed:1 } },
      drakloak:{ pokemonid:"drakloak",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dragon",
        type2:"ghost",
        stats:{ hp:68,
          attack:80,
          defense:50,
          spatk:60,
          spdef:50,
          speed:102 },
        species:"Caretaker",
        height:1.4,
        weight:11,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":40,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ speed:2 } },
      dragapult:{ pokemonid:"dragapult",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dragon",
        type2:"ghost",
        stats:{ hp:88,
          attack:120,
          defense:75,
          spatk:100,
          spdef:75,
          speed:142 },
        species:"Stealth",
        height:3,
        weight:50,
        gender:"4:4",
        "catch-rate":45,
        "base-exp":null,
        "egg-cycles":40,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      "zacian-crowned":{ pokemonid:"zacian",
        formid:"crowned",
        formname:"Crowned Sword",
        gen:8,
        release:"sword-shield",
        type1:"fairy",
        type2:"steel",
        stats:{ hp:92,
          attack:170,
          defense:115,
          spatk:80,
          spdef:115,
          speed:148 },
        species:"Warrior",
        height:2.8,
        weight:355,
        gender:"genderless",
        "catch-rate":10,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      "zacian-hero":{ pokemonid:"zacian",
        formid:"hero",
        formname:"Hero of Many Battles",
        gen:8,
        release:"sword-shield",
        type1:"fairy",
        type2:null,
        stats:{ hp:92,
          attack:130,
          defense:115,
          spatk:80,
          spdef:115,
          speed:138 },
        species:"Warrior",
        height:2.8,
        weight:110,
        gender:null,
        "catch-rate":null,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      "zamazenta-crowned":{ pokemonid:"zamazenta",
        formid:"crowned",
        formname:"Crowned Shield",
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:"steel",
        stats:{ hp:92,
          attack:130,
          defense:145,
          spatk:80,
          spdef:145,
          speed:128 },
        species:"Warrior",
        height:2.9,
        weight:785,
        gender:"genderless",
        "catch-rate":10,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      "zamazenta-hero":{ pokemonid:"zamazenta",
        formid:"hero",
        formname:"Hero of Many Battles",
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:null,
        stats:{ hp:92,
          attack:130,
          defense:115,
          spatk:80,
          spdef:115,
          speed:138 },
        species:"Warrior",
        height:2.9,
        weight:210,
        gender:null,
        "catch-rate":null,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      eternatus:{ pokemonid:"eternatus",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"poison",
        type2:"dragon",
        stats:{ hp:140,
          attack:85,
          defense:95,
          spatk:145,
          spdef:95,
          speed:130 },
        species:"Gigantic",
        height:20,
        weight:950,
        gender:"genderless",
        "catch-rate":255,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      "eternatus-eternamax":{ pokemonid:"eternatus",
        formid:"eternamax",
        formname:"Eternamax",
        gen:8,
        release:"sword-shield",
        type1:"poison",
        type2:"dragon",
        stats:{ hp:255,
          attack:115,
          defense:250,
          spatk:125,
          spdef:250,
          speed:130 },
        species:"Gigantic",
        height:100,
        weight:null,
        gender:null,
        "catch-rate":null,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      kubfu:{ pokemonid:"kubfu",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:null,
        stats:{ hp:60,
          attack:90,
          defense:60,
          spatk:53,
          spdef:50,
          speed:72 },
        species:"Wushu",
        height:0.6,
        weight:12,
        gender:"1:7",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:1 } },
      "urshifu-single-strike":{ pokemonid:"urshifu",
        formid:"single-strike",
        formname:"Single Strike Style",
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:"dark",
        stats:{ hp:100,
          attack:130,
          defense:100,
          spatk:63,
          spdef:60,
          speed:97 },
        species:"Wushu",
        height:1.9,
        weight:105,
        gender:"1:7",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "urshifu-rapid-strike":{ pokemonid:"urshifu",
        formid:"rapid-strike",
        formname:"Rapid Strike Style",
        gen:8,
        release:"sword-shield",
        type1:"fighting",
        type2:"water",
        stats:{ hp:100,
          attack:130,
          defense:100,
          spatk:63,
          spdef:60,
          speed:97 },
        species:"Wushu",
        height:1.9,
        weight:105,
        gender:"1:7",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      zarude:{ pokemonid:"zarude",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dark",
        type2:"grass",
        stats:{ hp:105,
          attack:120,
          defense:105,
          spatk:70,
          spdef:95,
          speed:105 },
        species:"Rogue Monkey",
        height:1.8,
        weight:70,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      regieleki:{ pokemonid:"regieleki",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"electric",
        type2:null,
        stats:{ hp:80,
          attack:100,
          defense:50,
          spatk:100,
          spdef:50,
          speed:200 },
        species:"Electron",
        height:1.2,
        weight:145,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ speed:3 } },
      regidrago:{ pokemonid:"regidrago",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"dragon",
        type2:null,
        stats:{ hp:200,
          attack:100,
          defense:50,
          spatk:100,
          spdef:50,
          speed:80 },
        species:"Dragon Orb",
        height:2.1,
        weight:200,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      glastrier:{ pokemonid:"glastrier",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"ice",
        type2:null,
        stats:{ hp:100,
          attack:145,
          defense:130,
          spatk:65,
          spdef:110,
          speed:30 },
        species:"Wild Horse",
        height:2.2,
        weight:800,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      spectrier:{ pokemonid:"spectrier",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"ghost",
        type2:null,
        stats:{ hp:100,
          attack:65,
          defense:60,
          spatk:145,
          spdef:80,
          speed:130 },
        species:"Swift Horse",
        height:2,
        weight:44.5,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } },
      calyrex:{ pokemonid:"calyrex",
        formid:null,
        formname:null,
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:"grass",
        stats:{ hp:100,
          attack:80,
          defense:80,
          spatk:80,
          spdef:80,
          speed:80 },
        species:"King",
        height:1.1,
        weight:7.7,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ hp:3 } },
      "calyrex-ice-rider":{ pokemonid:"calyrex",
        formid:"ice-rider",
        formname:"Ice Rider",
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:"ice",
        stats:{ hp:100,
          attack:165,
          defense:150,
          spatk:85,
          spdef:130,
          speed:50 },
        species:"King",
        height:2.4,
        weight:809.1,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ attack:3 } },
      "calyrex-shadow-rider":{ pokemonid:"calyrex",
        formid:"shadow-rider",
        formname:"Shadow Rider",
        gen:8,
        release:"sword-shield",
        type1:"psychic",
        type2:"ghost",
        stats:{ hp:100,
          attack:85,
          defense:80,
          spatk:165,
          spdef:100,
          speed:150 },
        species:"King",
        height:2.4,
        weight:53.6,
        gender:"genderless",
        "catch-rate":3,
        "base-exp":null,
        "egg-cycles":120,
        friendship:null,
        "growth-rate":"slow",
        "ev-yield":{ spatk:3 } } };

    var data$1 = { bulbasaur:{ national:1,
        name:"Bulbasaur",
        gen:1 },
      ivysaur:{ national:2,
        name:"Ivysaur",
        gen:1 },
      venusaur:{ national:3,
        name:"Venusaur",
        gen:1 },
      charmander:{ national:4,
        name:"Charmander",
        gen:1 },
      charmeleon:{ national:5,
        name:"Charmeleon",
        gen:1 },
      charizard:{ national:6,
        name:"Charizard",
        gen:1 },
      squirtle:{ national:7,
        name:"Squirtle",
        gen:1 },
      wartortle:{ national:8,
        name:"Wartortle",
        gen:1 },
      blastoise:{ national:9,
        name:"Blastoise",
        gen:1 },
      caterpie:{ national:10,
        name:"Caterpie",
        gen:1 },
      metapod:{ national:11,
        name:"Metapod",
        gen:1 },
      butterfree:{ national:12,
        name:"Butterfree",
        gen:1 },
      weedle:{ national:13,
        name:"Weedle",
        gen:1 },
      kakuna:{ national:14,
        name:"Kakuna",
        gen:1 },
      beedrill:{ national:15,
        name:"Beedrill",
        gen:1 },
      pidgey:{ national:16,
        name:"Pidgey",
        gen:1 },
      pidgeotto:{ national:17,
        name:"Pidgeotto",
        gen:1 },
      pidgeot:{ national:18,
        name:"Pidgeot",
        gen:1 },
      rattata:{ national:19,
        name:"Rattata",
        gen:1 },
      raticate:{ national:20,
        name:"Raticate",
        gen:1 },
      spearow:{ national:21,
        name:"Spearow",
        gen:1 },
      fearow:{ national:22,
        name:"Fearow",
        gen:1 },
      ekans:{ national:23,
        name:"Ekans",
        gen:1 },
      arbok:{ national:24,
        name:"Arbok",
        gen:1 },
      pikachu:{ national:25,
        name:"Pikachu",
        gen:1 },
      raichu:{ national:26,
        name:"Raichu",
        gen:1 },
      sandshrew:{ national:27,
        name:"Sandshrew",
        gen:1 },
      sandslash:{ national:28,
        name:"Sandslash",
        gen:1 },
      "nidoran-f":{ national:29,
        name:"Nidoran♀",
        gen:1 },
      nidorina:{ national:30,
        name:"Nidorina",
        gen:1 },
      nidoqueen:{ national:31,
        name:"Nidoqueen",
        gen:1 },
      "nidoran-m":{ national:32,
        name:"Nidoran♂",
        gen:1 },
      nidorino:{ national:33,
        name:"Nidorino",
        gen:1 },
      nidoking:{ national:34,
        name:"Nidoking",
        gen:1 },
      clefairy:{ national:35,
        name:"Clefairy",
        gen:1 },
      clefable:{ national:36,
        name:"Clefable",
        gen:1 },
      vulpix:{ national:37,
        name:"Vulpix",
        gen:1 },
      ninetales:{ national:38,
        name:"Ninetales",
        gen:1 },
      jigglypuff:{ national:39,
        name:"Jigglypuff",
        gen:1 },
      wigglytuff:{ national:40,
        name:"Wigglytuff",
        gen:1 },
      zubat:{ national:41,
        name:"Zubat",
        gen:1 },
      golbat:{ national:42,
        name:"Golbat",
        gen:1 },
      oddish:{ national:43,
        name:"Oddish",
        gen:1 },
      gloom:{ national:44,
        name:"Gloom",
        gen:1 },
      vileplume:{ national:45,
        name:"Vileplume",
        gen:1 },
      paras:{ national:46,
        name:"Paras",
        gen:1 },
      parasect:{ national:47,
        name:"Parasect",
        gen:1 },
      venonat:{ national:48,
        name:"Venonat",
        gen:1 },
      venomoth:{ national:49,
        name:"Venomoth",
        gen:1 },
      diglett:{ national:50,
        name:"Diglett",
        gen:1 },
      dugtrio:{ national:51,
        name:"Dugtrio",
        gen:1 },
      meowth:{ national:52,
        name:"Meowth",
        gen:1 },
      persian:{ national:53,
        name:"Persian",
        gen:1 },
      psyduck:{ national:54,
        name:"Psyduck",
        gen:1 },
      golduck:{ national:55,
        name:"Golduck",
        gen:1 },
      mankey:{ national:56,
        name:"Mankey",
        gen:1 },
      primeape:{ national:57,
        name:"Primeape",
        gen:1 },
      growlithe:{ national:58,
        name:"Growlithe",
        gen:1 },
      arcanine:{ national:59,
        name:"Arcanine",
        gen:1 },
      poliwag:{ national:60,
        name:"Poliwag",
        gen:1 },
      poliwhirl:{ national:61,
        name:"Poliwhirl",
        gen:1 },
      poliwrath:{ national:62,
        name:"Poliwrath",
        gen:1 },
      abra:{ national:63,
        name:"Abra",
        gen:1 },
      kadabra:{ national:64,
        name:"Kadabra",
        gen:1 },
      alakazam:{ national:65,
        name:"Alakazam",
        gen:1 },
      machop:{ national:66,
        name:"Machop",
        gen:1 },
      machoke:{ national:67,
        name:"Machoke",
        gen:1 },
      machamp:{ national:68,
        name:"Machamp",
        gen:1 },
      bellsprout:{ national:69,
        name:"Bellsprout",
        gen:1 },
      weepinbell:{ national:70,
        name:"Weepinbell",
        gen:1 },
      victreebel:{ national:71,
        name:"Victreebel",
        gen:1 },
      tentacool:{ national:72,
        name:"Tentacool",
        gen:1 },
      tentacruel:{ national:73,
        name:"Tentacruel",
        gen:1 },
      geodude:{ national:74,
        name:"Geodude",
        gen:1 },
      graveler:{ national:75,
        name:"Graveler",
        gen:1 },
      golem:{ national:76,
        name:"Golem",
        gen:1 },
      ponyta:{ national:77,
        name:"Ponyta",
        gen:1 },
      rapidash:{ national:78,
        name:"Rapidash",
        gen:1 },
      slowpoke:{ national:79,
        name:"Slowpoke",
        gen:1 },
      slowbro:{ national:80,
        name:"Slowbro",
        gen:1 },
      magnemite:{ national:81,
        name:"Magnemite",
        gen:1 },
      magneton:{ national:82,
        name:"Magneton",
        gen:1 },
      farfetchd:{ national:83,
        name:"Farfetch'd",
        gen:1 },
      doduo:{ national:84,
        name:"Doduo",
        gen:1 },
      dodrio:{ national:85,
        name:"Dodrio",
        gen:1 },
      seel:{ national:86,
        name:"Seel",
        gen:1 },
      dewgong:{ national:87,
        name:"Dewgong",
        gen:1 },
      grimer:{ national:88,
        name:"Grimer",
        gen:1 },
      muk:{ national:89,
        name:"Muk",
        gen:1 },
      shellder:{ national:90,
        name:"Shellder",
        gen:1 },
      cloyster:{ national:91,
        name:"Cloyster",
        gen:1 },
      gastly:{ national:92,
        name:"Gastly",
        gen:1 },
      haunter:{ national:93,
        name:"Haunter",
        gen:1 },
      gengar:{ national:94,
        name:"Gengar",
        gen:1 },
      onix:{ national:95,
        name:"Onix",
        gen:1 },
      drowzee:{ national:96,
        name:"Drowzee",
        gen:1 },
      hypno:{ national:97,
        name:"Hypno",
        gen:1 },
      krabby:{ national:98,
        name:"Krabby",
        gen:1 },
      kingler:{ national:99,
        name:"Kingler",
        gen:1 },
      voltorb:{ national:100,
        name:"Voltorb",
        gen:1 },
      electrode:{ national:101,
        name:"Electrode",
        gen:1 },
      exeggcute:{ national:102,
        name:"Exeggcute",
        gen:1 },
      exeggutor:{ national:103,
        name:"Exeggutor",
        gen:1 },
      cubone:{ national:104,
        name:"Cubone",
        gen:1 },
      marowak:{ national:105,
        name:"Marowak",
        gen:1 },
      hitmonlee:{ national:106,
        name:"Hitmonlee",
        gen:1 },
      hitmonchan:{ national:107,
        name:"Hitmonchan",
        gen:1 },
      lickitung:{ national:108,
        name:"Lickitung",
        gen:1 },
      koffing:{ national:109,
        name:"Koffing",
        gen:1 },
      weezing:{ national:110,
        name:"Weezing",
        gen:1 },
      rhyhorn:{ national:111,
        name:"Rhyhorn",
        gen:1 },
      rhydon:{ national:112,
        name:"Rhydon",
        gen:1 },
      chansey:{ national:113,
        name:"Chansey",
        gen:1 },
      tangela:{ national:114,
        name:"Tangela",
        gen:1 },
      kangaskhan:{ national:115,
        name:"Kangaskhan",
        gen:1 },
      horsea:{ national:116,
        name:"Horsea",
        gen:1 },
      seadra:{ national:117,
        name:"Seadra",
        gen:1 },
      goldeen:{ national:118,
        name:"Goldeen",
        gen:1 },
      seaking:{ national:119,
        name:"Seaking",
        gen:1 },
      staryu:{ national:120,
        name:"Staryu",
        gen:1 },
      starmie:{ national:121,
        name:"Starmie",
        gen:1 },
      "mr-mime":{ national:122,
        name:"Mr. Mime",
        gen:1 },
      scyther:{ national:123,
        name:"Scyther",
        gen:1 },
      jynx:{ national:124,
        name:"Jynx",
        gen:1 },
      electabuzz:{ national:125,
        name:"Electabuzz",
        gen:1 },
      magmar:{ national:126,
        name:"Magmar",
        gen:1 },
      pinsir:{ national:127,
        name:"Pinsir",
        gen:1 },
      tauros:{ national:128,
        name:"Tauros",
        gen:1 },
      magikarp:{ national:129,
        name:"Magikarp",
        gen:1 },
      gyarados:{ national:130,
        name:"Gyarados",
        gen:1 },
      lapras:{ national:131,
        name:"Lapras",
        gen:1 },
      ditto:{ national:132,
        name:"Ditto",
        gen:1 },
      eevee:{ national:133,
        name:"Eevee",
        gen:1 },
      vaporeon:{ national:134,
        name:"Vaporeon",
        gen:1 },
      jolteon:{ national:135,
        name:"Jolteon",
        gen:1 },
      flareon:{ national:136,
        name:"Flareon",
        gen:1 },
      porygon:{ national:137,
        name:"Porygon",
        gen:1 },
      omanyte:{ national:138,
        name:"Omanyte",
        gen:1 },
      omastar:{ national:139,
        name:"Omastar",
        gen:1 },
      kabuto:{ national:140,
        name:"Kabuto",
        gen:1 },
      kabutops:{ national:141,
        name:"Kabutops",
        gen:1 },
      aerodactyl:{ national:142,
        name:"Aerodactyl",
        gen:1 },
      snorlax:{ national:143,
        name:"Snorlax",
        gen:1 },
      articuno:{ national:144,
        name:"Articuno",
        gen:1 },
      zapdos:{ national:145,
        name:"Zapdos",
        gen:1 },
      moltres:{ national:146,
        name:"Moltres",
        gen:1 },
      dratini:{ national:147,
        name:"Dratini",
        gen:1 },
      dragonair:{ national:148,
        name:"Dragonair",
        gen:1 },
      dragonite:{ national:149,
        name:"Dragonite",
        gen:1 },
      mewtwo:{ national:150,
        name:"Mewtwo",
        gen:1 },
      mew:{ national:151,
        name:"Mew",
        gen:1 },
      chikorita:{ national:152,
        name:"Chikorita",
        gen:2 },
      bayleef:{ national:153,
        name:"Bayleef",
        gen:2 },
      meganium:{ national:154,
        name:"Meganium",
        gen:2 },
      cyndaquil:{ national:155,
        name:"Cyndaquil",
        gen:2 },
      quilava:{ national:156,
        name:"Quilava",
        gen:2 },
      typhlosion:{ national:157,
        name:"Typhlosion",
        gen:2 },
      totodile:{ national:158,
        name:"Totodile",
        gen:2 },
      croconaw:{ national:159,
        name:"Croconaw",
        gen:2 },
      feraligatr:{ national:160,
        name:"Feraligatr",
        gen:2 },
      sentret:{ national:161,
        name:"Sentret",
        gen:2 },
      furret:{ national:162,
        name:"Furret",
        gen:2 },
      hoothoot:{ national:163,
        name:"Hoothoot",
        gen:2 },
      noctowl:{ national:164,
        name:"Noctowl",
        gen:2 },
      ledyba:{ national:165,
        name:"Ledyba",
        gen:2 },
      ledian:{ national:166,
        name:"Ledian",
        gen:2 },
      spinarak:{ national:167,
        name:"Spinarak",
        gen:2 },
      ariados:{ national:168,
        name:"Ariados",
        gen:2 },
      crobat:{ national:169,
        name:"Crobat",
        gen:2 },
      chinchou:{ national:170,
        name:"Chinchou",
        gen:2 },
      lanturn:{ national:171,
        name:"Lanturn",
        gen:2 },
      pichu:{ national:172,
        name:"Pichu",
        gen:2 },
      cleffa:{ national:173,
        name:"Cleffa",
        gen:2 },
      igglybuff:{ national:174,
        name:"Igglybuff",
        gen:2 },
      togepi:{ national:175,
        name:"Togepi",
        gen:2 },
      togetic:{ national:176,
        name:"Togetic",
        gen:2 },
      natu:{ national:177,
        name:"Natu",
        gen:2 },
      xatu:{ national:178,
        name:"Xatu",
        gen:2 },
      mareep:{ national:179,
        name:"Mareep",
        gen:2 },
      flaaffy:{ national:180,
        name:"Flaaffy",
        gen:2 },
      ampharos:{ national:181,
        name:"Ampharos",
        gen:2 },
      bellossom:{ national:182,
        name:"Bellossom",
        gen:2 },
      marill:{ national:183,
        name:"Marill",
        gen:2 },
      azumarill:{ national:184,
        name:"Azumarill",
        gen:2 },
      sudowoodo:{ national:185,
        name:"Sudowoodo",
        gen:2 },
      politoed:{ national:186,
        name:"Politoed",
        gen:2 },
      hoppip:{ national:187,
        name:"Hoppip",
        gen:2 },
      skiploom:{ national:188,
        name:"Skiploom",
        gen:2 },
      jumpluff:{ national:189,
        name:"Jumpluff",
        gen:2 },
      aipom:{ national:190,
        name:"Aipom",
        gen:2 },
      sunkern:{ national:191,
        name:"Sunkern",
        gen:2 },
      sunflora:{ national:192,
        name:"Sunflora",
        gen:2 },
      yanma:{ national:193,
        name:"Yanma",
        gen:2 },
      wooper:{ national:194,
        name:"Wooper",
        gen:2 },
      quagsire:{ national:195,
        name:"Quagsire",
        gen:2 },
      espeon:{ national:196,
        name:"Espeon",
        gen:2 },
      umbreon:{ national:197,
        name:"Umbreon",
        gen:2 },
      murkrow:{ national:198,
        name:"Murkrow",
        gen:2 },
      slowking:{ national:199,
        name:"Slowking",
        gen:2 },
      misdreavus:{ national:200,
        name:"Misdreavus",
        gen:2 },
      unown:{ national:201,
        name:"Unown",
        gen:2 },
      wobbuffet:{ national:202,
        name:"Wobbuffet",
        gen:2 },
      girafarig:{ national:203,
        name:"Girafarig",
        gen:2 },
      pineco:{ national:204,
        name:"Pineco",
        gen:2 },
      forretress:{ national:205,
        name:"Forretress",
        gen:2 },
      dunsparce:{ national:206,
        name:"Dunsparce",
        gen:2 },
      gligar:{ national:207,
        name:"Gligar",
        gen:2 },
      steelix:{ national:208,
        name:"Steelix",
        gen:2 },
      snubbull:{ national:209,
        name:"Snubbull",
        gen:2 },
      granbull:{ national:210,
        name:"Granbull",
        gen:2 },
      qwilfish:{ national:211,
        name:"Qwilfish",
        gen:2 },
      scizor:{ national:212,
        name:"Scizor",
        gen:2 },
      shuckle:{ national:213,
        name:"Shuckle",
        gen:2 },
      heracross:{ national:214,
        name:"Heracross",
        gen:2 },
      sneasel:{ national:215,
        name:"Sneasel",
        gen:2 },
      teddiursa:{ national:216,
        name:"Teddiursa",
        gen:2 },
      ursaring:{ national:217,
        name:"Ursaring",
        gen:2 },
      slugma:{ national:218,
        name:"Slugma",
        gen:2 },
      magcargo:{ national:219,
        name:"Magcargo",
        gen:2 },
      swinub:{ national:220,
        name:"Swinub",
        gen:2 },
      piloswine:{ national:221,
        name:"Piloswine",
        gen:2 },
      corsola:{ national:222,
        name:"Corsola",
        gen:2 },
      remoraid:{ national:223,
        name:"Remoraid",
        gen:2 },
      octillery:{ national:224,
        name:"Octillery",
        gen:2 },
      delibird:{ national:225,
        name:"Delibird",
        gen:2 },
      mantine:{ national:226,
        name:"Mantine",
        gen:2 },
      skarmory:{ national:227,
        name:"Skarmory",
        gen:2 },
      houndour:{ national:228,
        name:"Houndour",
        gen:2 },
      houndoom:{ national:229,
        name:"Houndoom",
        gen:2 },
      kingdra:{ national:230,
        name:"Kingdra",
        gen:2 },
      phanpy:{ national:231,
        name:"Phanpy",
        gen:2 },
      donphan:{ national:232,
        name:"Donphan",
        gen:2 },
      porygon2:{ national:233,
        name:"Porygon2",
        gen:2 },
      stantler:{ national:234,
        name:"Stantler",
        gen:2 },
      smeargle:{ national:235,
        name:"Smeargle",
        gen:2 },
      tyrogue:{ national:236,
        name:"Tyrogue",
        gen:2 },
      hitmontop:{ national:237,
        name:"Hitmontop",
        gen:2 },
      smoochum:{ national:238,
        name:"Smoochum",
        gen:2 },
      elekid:{ national:239,
        name:"Elekid",
        gen:2 },
      magby:{ national:240,
        name:"Magby",
        gen:2 },
      miltank:{ national:241,
        name:"Miltank",
        gen:2 },
      blissey:{ national:242,
        name:"Blissey",
        gen:2 },
      raikou:{ national:243,
        name:"Raikou",
        gen:2 },
      entei:{ national:244,
        name:"Entei",
        gen:2 },
      suicune:{ national:245,
        name:"Suicune",
        gen:2 },
      larvitar:{ national:246,
        name:"Larvitar",
        gen:2 },
      pupitar:{ national:247,
        name:"Pupitar",
        gen:2 },
      tyranitar:{ national:248,
        name:"Tyranitar",
        gen:2 },
      lugia:{ national:249,
        name:"Lugia",
        gen:2 },
      "ho-oh":{ national:250,
        name:"Ho-oh",
        gen:2 },
      celebi:{ national:251,
        name:"Celebi",
        gen:2 },
      treecko:{ national:252,
        name:"Treecko",
        gen:3 },
      grovyle:{ national:253,
        name:"Grovyle",
        gen:3 },
      sceptile:{ national:254,
        name:"Sceptile",
        gen:3 },
      torchic:{ national:255,
        name:"Torchic",
        gen:3 },
      combusken:{ national:256,
        name:"Combusken",
        gen:3 },
      blaziken:{ national:257,
        name:"Blaziken",
        gen:3 },
      mudkip:{ national:258,
        name:"Mudkip",
        gen:3 },
      marshtomp:{ national:259,
        name:"Marshtomp",
        gen:3 },
      swampert:{ national:260,
        name:"Swampert",
        gen:3 },
      poochyena:{ national:261,
        name:"Poochyena",
        gen:3 },
      mightyena:{ national:262,
        name:"Mightyena",
        gen:3 },
      zigzagoon:{ national:263,
        name:"Zigzagoon",
        gen:3 },
      linoone:{ national:264,
        name:"Linoone",
        gen:3 },
      wurmple:{ national:265,
        name:"Wurmple",
        gen:3 },
      silcoon:{ national:266,
        name:"Silcoon",
        gen:3 },
      beautifly:{ national:267,
        name:"Beautifly",
        gen:3 },
      cascoon:{ national:268,
        name:"Cascoon",
        gen:3 },
      dustox:{ national:269,
        name:"Dustox",
        gen:3 },
      lotad:{ national:270,
        name:"Lotad",
        gen:3 },
      lombre:{ national:271,
        name:"Lombre",
        gen:3 },
      ludicolo:{ national:272,
        name:"Ludicolo",
        gen:3 },
      seedot:{ national:273,
        name:"Seedot",
        gen:3 },
      nuzleaf:{ national:274,
        name:"Nuzleaf",
        gen:3 },
      shiftry:{ national:275,
        name:"Shiftry",
        gen:3 },
      taillow:{ national:276,
        name:"Taillow",
        gen:3 },
      swellow:{ national:277,
        name:"Swellow",
        gen:3 },
      wingull:{ national:278,
        name:"Wingull",
        gen:3 },
      pelipper:{ national:279,
        name:"Pelipper",
        gen:3 },
      ralts:{ national:280,
        name:"Ralts",
        gen:3 },
      kirlia:{ national:281,
        name:"Kirlia",
        gen:3 },
      gardevoir:{ national:282,
        name:"Gardevoir",
        gen:3 },
      surskit:{ national:283,
        name:"Surskit",
        gen:3 },
      masquerain:{ national:284,
        name:"Masquerain",
        gen:3 },
      shroomish:{ national:285,
        name:"Shroomish",
        gen:3 },
      breloom:{ national:286,
        name:"Breloom",
        gen:3 },
      slakoth:{ national:287,
        name:"Slakoth",
        gen:3 },
      vigoroth:{ national:288,
        name:"Vigoroth",
        gen:3 },
      slaking:{ national:289,
        name:"Slaking",
        gen:3 },
      nincada:{ national:290,
        name:"Nincada",
        gen:3 },
      ninjask:{ national:291,
        name:"Ninjask",
        gen:3 },
      shedinja:{ national:292,
        name:"Shedinja",
        gen:3 },
      whismur:{ national:293,
        name:"Whismur",
        gen:3 },
      loudred:{ national:294,
        name:"Loudred",
        gen:3 },
      exploud:{ national:295,
        name:"Exploud",
        gen:3 },
      makuhita:{ national:296,
        name:"Makuhita",
        gen:3 },
      hariyama:{ national:297,
        name:"Hariyama",
        gen:3 },
      azurill:{ national:298,
        name:"Azurill",
        gen:3 },
      nosepass:{ national:299,
        name:"Nosepass",
        gen:3 },
      skitty:{ national:300,
        name:"Skitty",
        gen:3 },
      delcatty:{ national:301,
        name:"Delcatty",
        gen:3 },
      sableye:{ national:302,
        name:"Sableye",
        gen:3 },
      mawile:{ national:303,
        name:"Mawile",
        gen:3 },
      aron:{ national:304,
        name:"Aron",
        gen:3 },
      lairon:{ national:305,
        name:"Lairon",
        gen:3 },
      aggron:{ national:306,
        name:"Aggron",
        gen:3 },
      meditite:{ national:307,
        name:"Meditite",
        gen:3 },
      medicham:{ national:308,
        name:"Medicham",
        gen:3 },
      electrike:{ national:309,
        name:"Electrike",
        gen:3 },
      manectric:{ national:310,
        name:"Manectric",
        gen:3 },
      plusle:{ national:311,
        name:"Plusle",
        gen:3 },
      minun:{ national:312,
        name:"Minun",
        gen:3 },
      volbeat:{ national:313,
        name:"Volbeat",
        gen:3 },
      illumise:{ national:314,
        name:"Illumise",
        gen:3 },
      roselia:{ national:315,
        name:"Roselia",
        gen:3 },
      gulpin:{ national:316,
        name:"Gulpin",
        gen:3 },
      swalot:{ national:317,
        name:"Swalot",
        gen:3 },
      carvanha:{ national:318,
        name:"Carvanha",
        gen:3 },
      sharpedo:{ national:319,
        name:"Sharpedo",
        gen:3 },
      wailmer:{ national:320,
        name:"Wailmer",
        gen:3 },
      wailord:{ national:321,
        name:"Wailord",
        gen:3 },
      numel:{ national:322,
        name:"Numel",
        gen:3 },
      camerupt:{ national:323,
        name:"Camerupt",
        gen:3 },
      torkoal:{ national:324,
        name:"Torkoal",
        gen:3 },
      spoink:{ national:325,
        name:"Spoink",
        gen:3 },
      grumpig:{ national:326,
        name:"Grumpig",
        gen:3 },
      spinda:{ national:327,
        name:"Spinda",
        gen:3 },
      trapinch:{ national:328,
        name:"Trapinch",
        gen:3 },
      vibrava:{ national:329,
        name:"Vibrava",
        gen:3 },
      flygon:{ national:330,
        name:"Flygon",
        gen:3 },
      cacnea:{ national:331,
        name:"Cacnea",
        gen:3 },
      cacturne:{ national:332,
        name:"Cacturne",
        gen:3 },
      swablu:{ national:333,
        name:"Swablu",
        gen:3 },
      altaria:{ national:334,
        name:"Altaria",
        gen:3 },
      zangoose:{ national:335,
        name:"Zangoose",
        gen:3 },
      seviper:{ national:336,
        name:"Seviper",
        gen:3 },
      lunatone:{ national:337,
        name:"Lunatone",
        gen:3 },
      solrock:{ national:338,
        name:"Solrock",
        gen:3 },
      barboach:{ national:339,
        name:"Barboach",
        gen:3 },
      whiscash:{ national:340,
        name:"Whiscash",
        gen:3 },
      corphish:{ national:341,
        name:"Corphish",
        gen:3 },
      crawdaunt:{ national:342,
        name:"Crawdaunt",
        gen:3 },
      baltoy:{ national:343,
        name:"Baltoy",
        gen:3 },
      claydol:{ national:344,
        name:"Claydol",
        gen:3 },
      lileep:{ national:345,
        name:"Lileep",
        gen:3 },
      cradily:{ national:346,
        name:"Cradily",
        gen:3 },
      anorith:{ national:347,
        name:"Anorith",
        gen:3 },
      armaldo:{ national:348,
        name:"Armaldo",
        gen:3 },
      feebas:{ national:349,
        name:"Feebas",
        gen:3 },
      milotic:{ national:350,
        name:"Milotic",
        gen:3 },
      castform:{ national:351,
        name:"Castform",
        gen:3 },
      kecleon:{ national:352,
        name:"Kecleon",
        gen:3 },
      shuppet:{ national:353,
        name:"Shuppet",
        gen:3 },
      banette:{ national:354,
        name:"Banette",
        gen:3 },
      duskull:{ national:355,
        name:"Duskull",
        gen:3 },
      dusclops:{ national:356,
        name:"Dusclops",
        gen:3 },
      tropius:{ national:357,
        name:"Tropius",
        gen:3 },
      chimecho:{ national:358,
        name:"Chimecho",
        gen:3 },
      absol:{ national:359,
        name:"Absol",
        gen:3 },
      wynaut:{ national:360,
        name:"Wynaut",
        gen:3 },
      snorunt:{ national:361,
        name:"Snorunt",
        gen:3 },
      glalie:{ national:362,
        name:"Glalie",
        gen:3 },
      spheal:{ national:363,
        name:"Spheal",
        gen:3 },
      sealeo:{ national:364,
        name:"Sealeo",
        gen:3 },
      walrein:{ national:365,
        name:"Walrein",
        gen:3 },
      clamperl:{ national:366,
        name:"Clamperl",
        gen:3 },
      huntail:{ national:367,
        name:"Huntail",
        gen:3 },
      gorebyss:{ national:368,
        name:"Gorebyss",
        gen:3 },
      relicanth:{ national:369,
        name:"Relicanth",
        gen:3 },
      luvdisc:{ national:370,
        name:"Luvdisc",
        gen:3 },
      bagon:{ national:371,
        name:"Bagon",
        gen:3 },
      shelgon:{ national:372,
        name:"Shelgon",
        gen:3 },
      salamence:{ national:373,
        name:"Salamence",
        gen:3 },
      beldum:{ national:374,
        name:"Beldum",
        gen:3 },
      metang:{ national:375,
        name:"Metang",
        gen:3 },
      metagross:{ national:376,
        name:"Metagross",
        gen:3 },
      regirock:{ national:377,
        name:"Regirock",
        gen:3 },
      regice:{ national:378,
        name:"Regice",
        gen:3 },
      registeel:{ national:379,
        name:"Registeel",
        gen:3 },
      latias:{ national:380,
        name:"Latias",
        gen:3 },
      latios:{ national:381,
        name:"Latios",
        gen:3 },
      kyogre:{ national:382,
        name:"Kyogre",
        gen:3 },
      groudon:{ national:383,
        name:"Groudon",
        gen:3 },
      rayquaza:{ national:384,
        name:"Rayquaza",
        gen:3 },
      jirachi:{ national:385,
        name:"Jirachi",
        gen:3 },
      deoxys:{ national:386,
        name:"Deoxys",
        gen:3 },
      turtwig:{ national:387,
        name:"Turtwig",
        gen:4 },
      grotle:{ national:388,
        name:"Grotle",
        gen:4 },
      torterra:{ national:389,
        name:"Torterra",
        gen:4 },
      chimchar:{ national:390,
        name:"Chimchar",
        gen:4 },
      monferno:{ national:391,
        name:"Monferno",
        gen:4 },
      infernape:{ national:392,
        name:"Infernape",
        gen:4 },
      piplup:{ national:393,
        name:"Piplup",
        gen:4 },
      prinplup:{ national:394,
        name:"Prinplup",
        gen:4 },
      empoleon:{ national:395,
        name:"Empoleon",
        gen:4 },
      starly:{ national:396,
        name:"Starly",
        gen:4 },
      staravia:{ national:397,
        name:"Staravia",
        gen:4 },
      staraptor:{ national:398,
        name:"Staraptor",
        gen:4 },
      bidoof:{ national:399,
        name:"Bidoof",
        gen:4 },
      bibarel:{ national:400,
        name:"Bibarel",
        gen:4 },
      kricketot:{ national:401,
        name:"Kricketot",
        gen:4 },
      kricketune:{ national:402,
        name:"Kricketune",
        gen:4 },
      shinx:{ national:403,
        name:"Shinx",
        gen:4 },
      luxio:{ national:404,
        name:"Luxio",
        gen:4 },
      luxray:{ national:405,
        name:"Luxray",
        gen:4 },
      budew:{ national:406,
        name:"Budew",
        gen:4 },
      roserade:{ national:407,
        name:"Roserade",
        gen:4 },
      cranidos:{ national:408,
        name:"Cranidos",
        gen:4 },
      rampardos:{ national:409,
        name:"Rampardos",
        gen:4 },
      shieldon:{ national:410,
        name:"Shieldon",
        gen:4 },
      bastiodon:{ national:411,
        name:"Bastiodon",
        gen:4 },
      burmy:{ national:412,
        name:"Burmy",
        gen:4 },
      wormadam:{ national:413,
        name:"Wormadam",
        gen:4 },
      mothim:{ national:414,
        name:"Mothim",
        gen:4 },
      combee:{ national:415,
        name:"Combee",
        gen:4 },
      vespiquen:{ national:416,
        name:"Vespiquen",
        gen:4 },
      pachirisu:{ national:417,
        name:"Pachirisu",
        gen:4 },
      buizel:{ national:418,
        name:"Buizel",
        gen:4 },
      floatzel:{ national:419,
        name:"Floatzel",
        gen:4 },
      cherubi:{ national:420,
        name:"Cherubi",
        gen:4 },
      cherrim:{ national:421,
        name:"Cherrim",
        gen:4 },
      shellos:{ national:422,
        name:"Shellos",
        gen:4 },
      gastrodon:{ national:423,
        name:"Gastrodon",
        gen:4 },
      ambipom:{ national:424,
        name:"Ambipom",
        gen:4 },
      drifloon:{ national:425,
        name:"Drifloon",
        gen:4 },
      drifblim:{ national:426,
        name:"Drifblim",
        gen:4 },
      buneary:{ national:427,
        name:"Buneary",
        gen:4 },
      lopunny:{ national:428,
        name:"Lopunny",
        gen:4 },
      mismagius:{ national:429,
        name:"Mismagius",
        gen:4 },
      honchkrow:{ national:430,
        name:"Honchkrow",
        gen:4 },
      glameow:{ national:431,
        name:"Glameow",
        gen:4 },
      purugly:{ national:432,
        name:"Purugly",
        gen:4 },
      chingling:{ national:433,
        name:"Chingling",
        gen:4 },
      stunky:{ national:434,
        name:"Stunky",
        gen:4 },
      skuntank:{ national:435,
        name:"Skuntank",
        gen:4 },
      bronzor:{ national:436,
        name:"Bronzor",
        gen:4 },
      bronzong:{ national:437,
        name:"Bronzong",
        gen:4 },
      bonsly:{ national:438,
        name:"Bonsly",
        gen:4 },
      "mime-jr":{ national:439,
        name:"Mime Jr.",
        gen:4 },
      happiny:{ national:440,
        name:"Happiny",
        gen:4 },
      chatot:{ national:441,
        name:"Chatot",
        gen:4 },
      spiritomb:{ national:442,
        name:"Spiritomb",
        gen:4 },
      gible:{ national:443,
        name:"Gible",
        gen:4 },
      gabite:{ national:444,
        name:"Gabite",
        gen:4 },
      garchomp:{ national:445,
        name:"Garchomp",
        gen:4 },
      munchlax:{ national:446,
        name:"Munchlax",
        gen:4 },
      riolu:{ national:447,
        name:"Riolu",
        gen:4 },
      lucario:{ national:448,
        name:"Lucario",
        gen:4 },
      hippopotas:{ national:449,
        name:"Hippopotas",
        gen:4 },
      hippowdon:{ national:450,
        name:"Hippowdon",
        gen:4 },
      skorupi:{ national:451,
        name:"Skorupi",
        gen:4 },
      drapion:{ national:452,
        name:"Drapion",
        gen:4 },
      croagunk:{ national:453,
        name:"Croagunk",
        gen:4 },
      toxicroak:{ national:454,
        name:"Toxicroak",
        gen:4 },
      carnivine:{ national:455,
        name:"Carnivine",
        gen:4 },
      finneon:{ national:456,
        name:"Finneon",
        gen:4 },
      lumineon:{ national:457,
        name:"Lumineon",
        gen:4 },
      mantyke:{ national:458,
        name:"Mantyke",
        gen:4 },
      snover:{ national:459,
        name:"Snover",
        gen:4 },
      abomasnow:{ national:460,
        name:"Abomasnow",
        gen:4 },
      weavile:{ national:461,
        name:"Weavile",
        gen:4 },
      magnezone:{ national:462,
        name:"Magnezone",
        gen:4 },
      lickilicky:{ national:463,
        name:"Lickilicky",
        gen:4 },
      rhyperior:{ national:464,
        name:"Rhyperior",
        gen:4 },
      tangrowth:{ national:465,
        name:"Tangrowth",
        gen:4 },
      electivire:{ national:466,
        name:"Electivire",
        gen:4 },
      magmortar:{ national:467,
        name:"Magmortar",
        gen:4 },
      togekiss:{ national:468,
        name:"Togekiss",
        gen:4 },
      yanmega:{ national:469,
        name:"Yanmega",
        gen:4 },
      leafeon:{ national:470,
        name:"Leafeon",
        gen:4 },
      glaceon:{ national:471,
        name:"Glaceon",
        gen:4 },
      gliscor:{ national:472,
        name:"Gliscor",
        gen:4 },
      mamoswine:{ national:473,
        name:"Mamoswine",
        gen:4 },
      "porygon-z":{ national:474,
        name:"Porygon-Z",
        gen:4 },
      gallade:{ national:475,
        name:"Gallade",
        gen:4 },
      probopass:{ national:476,
        name:"Probopass",
        gen:4 },
      dusknoir:{ national:477,
        name:"Dusknoir",
        gen:4 },
      froslass:{ national:478,
        name:"Froslass",
        gen:4 },
      rotom:{ national:479,
        name:"Rotom",
        gen:4 },
      uxie:{ national:480,
        name:"Uxie",
        gen:4 },
      mesprit:{ national:481,
        name:"Mesprit",
        gen:4 },
      azelf:{ national:482,
        name:"Azelf",
        gen:4 },
      dialga:{ national:483,
        name:"Dialga",
        gen:4 },
      palkia:{ national:484,
        name:"Palkia",
        gen:4 },
      heatran:{ national:485,
        name:"Heatran",
        gen:4 },
      regigigas:{ national:486,
        name:"Regigigas",
        gen:4 },
      giratina:{ national:487,
        name:"Giratina",
        gen:4 },
      cresselia:{ national:488,
        name:"Cresselia",
        gen:4 },
      phione:{ national:489,
        name:"Phione",
        gen:4 },
      manaphy:{ national:490,
        name:"Manaphy",
        gen:4 },
      darkrai:{ national:491,
        name:"Darkrai",
        gen:4 },
      shaymin:{ national:492,
        name:"Shaymin",
        gen:4 },
      arceus:{ national:493,
        name:"Arceus",
        gen:4 },
      victini:{ national:494,
        name:"Victini",
        gen:5 },
      snivy:{ national:495,
        name:"Snivy",
        gen:5 },
      servine:{ national:496,
        name:"Servine",
        gen:5 },
      serperior:{ national:497,
        name:"Serperior",
        gen:5 },
      tepig:{ national:498,
        name:"Tepig",
        gen:5 },
      pignite:{ national:499,
        name:"Pignite",
        gen:5 },
      emboar:{ national:500,
        name:"Emboar",
        gen:5 },
      oshawott:{ national:501,
        name:"Oshawott",
        gen:5 },
      dewott:{ national:502,
        name:"Dewott",
        gen:5 },
      samurott:{ national:503,
        name:"Samurott",
        gen:5 },
      patrat:{ national:504,
        name:"Patrat",
        gen:5 },
      watchog:{ national:505,
        name:"Watchog",
        gen:5 },
      lillipup:{ national:506,
        name:"Lillipup",
        gen:5 },
      herdier:{ national:507,
        name:"Herdier",
        gen:5 },
      stoutland:{ national:508,
        name:"Stoutland",
        gen:5 },
      purrloin:{ national:509,
        name:"Purrloin",
        gen:5 },
      liepard:{ national:510,
        name:"Liepard",
        gen:5 },
      pansage:{ national:511,
        name:"Pansage",
        gen:5 },
      simisage:{ national:512,
        name:"Simisage",
        gen:5 },
      pansear:{ national:513,
        name:"Pansear",
        gen:5 },
      simisear:{ national:514,
        name:"Simisear",
        gen:5 },
      panpour:{ national:515,
        name:"Panpour",
        gen:5 },
      simipour:{ national:516,
        name:"Simipour",
        gen:5 },
      munna:{ national:517,
        name:"Munna",
        gen:5 },
      musharna:{ national:518,
        name:"Musharna",
        gen:5 },
      pidove:{ national:519,
        name:"Pidove",
        gen:5 },
      tranquill:{ national:520,
        name:"Tranquill",
        gen:5 },
      unfezant:{ national:521,
        name:"Unfezant",
        gen:5 },
      blitzle:{ national:522,
        name:"Blitzle",
        gen:5 },
      zebstrika:{ national:523,
        name:"Zebstrika",
        gen:5 },
      roggenrola:{ national:524,
        name:"Roggenrola",
        gen:5 },
      boldore:{ national:525,
        name:"Boldore",
        gen:5 },
      gigalith:{ national:526,
        name:"Gigalith",
        gen:5 },
      woobat:{ national:527,
        name:"Woobat",
        gen:5 },
      swoobat:{ national:528,
        name:"Swoobat",
        gen:5 },
      drilbur:{ national:529,
        name:"Drilbur",
        gen:5 },
      excadrill:{ national:530,
        name:"Excadrill",
        gen:5 },
      audino:{ national:531,
        name:"Audino",
        gen:5 },
      timburr:{ national:532,
        name:"Timburr",
        gen:5 },
      gurdurr:{ national:533,
        name:"Gurdurr",
        gen:5 },
      conkeldurr:{ national:534,
        name:"Conkeldurr",
        gen:5 },
      tympole:{ national:535,
        name:"Tympole",
        gen:5 },
      palpitoad:{ national:536,
        name:"Palpitoad",
        gen:5 },
      seismitoad:{ national:537,
        name:"Seismitoad",
        gen:5 },
      throh:{ national:538,
        name:"Throh",
        gen:5 },
      sawk:{ national:539,
        name:"Sawk",
        gen:5 },
      sewaddle:{ national:540,
        name:"Sewaddle",
        gen:5 },
      swadloon:{ national:541,
        name:"Swadloon",
        gen:5 },
      leavanny:{ national:542,
        name:"Leavanny",
        gen:5 },
      venipede:{ national:543,
        name:"Venipede",
        gen:5 },
      whirlipede:{ national:544,
        name:"Whirlipede",
        gen:5 },
      scolipede:{ national:545,
        name:"Scolipede",
        gen:5 },
      cottonee:{ national:546,
        name:"Cottonee",
        gen:5 },
      whimsicott:{ national:547,
        name:"Whimsicott",
        gen:5 },
      petilil:{ national:548,
        name:"Petilil",
        gen:5 },
      lilligant:{ national:549,
        name:"Lilligant",
        gen:5 },
      basculin:{ national:550,
        name:"Basculin",
        gen:5 },
      sandile:{ national:551,
        name:"Sandile",
        gen:5 },
      krokorok:{ national:552,
        name:"Krokorok",
        gen:5 },
      krookodile:{ national:553,
        name:"Krookodile",
        gen:5 },
      darumaka:{ national:554,
        name:"Darumaka",
        gen:5 },
      darmanitan:{ national:555,
        name:"Darmanitan",
        gen:5 },
      maractus:{ national:556,
        name:"Maractus",
        gen:5 },
      dwebble:{ national:557,
        name:"Dwebble",
        gen:5 },
      crustle:{ national:558,
        name:"Crustle",
        gen:5 },
      scraggy:{ national:559,
        name:"Scraggy",
        gen:5 },
      scrafty:{ national:560,
        name:"Scrafty",
        gen:5 },
      sigilyph:{ national:561,
        name:"Sigilyph",
        gen:5 },
      yamask:{ national:562,
        name:"Yamask",
        gen:5 },
      cofagrigus:{ national:563,
        name:"Cofagrigus",
        gen:5 },
      tirtouga:{ national:564,
        name:"Tirtouga",
        gen:5 },
      carracosta:{ national:565,
        name:"Carracosta",
        gen:5 },
      archen:{ national:566,
        name:"Archen",
        gen:5 },
      archeops:{ national:567,
        name:"Archeops",
        gen:5 },
      trubbish:{ national:568,
        name:"Trubbish",
        gen:5 },
      garbodor:{ national:569,
        name:"Garbodor",
        gen:5 },
      zorua:{ national:570,
        name:"Zorua",
        gen:5 },
      zoroark:{ national:571,
        name:"Zoroark",
        gen:5 },
      minccino:{ national:572,
        name:"Minccino",
        gen:5 },
      cinccino:{ national:573,
        name:"Cinccino",
        gen:5 },
      gothita:{ national:574,
        name:"Gothita",
        gen:5 },
      gothorita:{ national:575,
        name:"Gothorita",
        gen:5 },
      gothitelle:{ national:576,
        name:"Gothitelle",
        gen:5 },
      solosis:{ national:577,
        name:"Solosis",
        gen:5 },
      duosion:{ national:578,
        name:"Duosion",
        gen:5 },
      reuniclus:{ national:579,
        name:"Reuniclus",
        gen:5 },
      ducklett:{ national:580,
        name:"Ducklett",
        gen:5 },
      swanna:{ national:581,
        name:"Swanna",
        gen:5 },
      vanillite:{ national:582,
        name:"Vanillite",
        gen:5 },
      vanillish:{ national:583,
        name:"Vanillish",
        gen:5 },
      vanilluxe:{ national:584,
        name:"Vanilluxe",
        gen:5 },
      deerling:{ national:585,
        name:"Deerling",
        gen:5 },
      sawsbuck:{ national:586,
        name:"Sawsbuck",
        gen:5 },
      emolga:{ national:587,
        name:"Emolga",
        gen:5 },
      karrablast:{ national:588,
        name:"Karrablast",
        gen:5 },
      escavalier:{ national:589,
        name:"Escavalier",
        gen:5 },
      foongus:{ national:590,
        name:"Foongus",
        gen:5 },
      amoonguss:{ national:591,
        name:"Amoonguss",
        gen:5 },
      frillish:{ national:592,
        name:"Frillish",
        gen:5 },
      jellicent:{ national:593,
        name:"Jellicent",
        gen:5 },
      alomomola:{ national:594,
        name:"Alomomola",
        gen:5 },
      joltik:{ national:595,
        name:"Joltik",
        gen:5 },
      galvantula:{ national:596,
        name:"Galvantula",
        gen:5 },
      ferroseed:{ national:597,
        name:"Ferroseed",
        gen:5 },
      ferrothorn:{ national:598,
        name:"Ferrothorn",
        gen:5 },
      klink:{ national:599,
        name:"Klink",
        gen:5 },
      klang:{ national:600,
        name:"Klang",
        gen:5 },
      klinklang:{ national:601,
        name:"Klinklang",
        gen:5 },
      tynamo:{ national:602,
        name:"Tynamo",
        gen:5 },
      eelektrik:{ national:603,
        name:"Eelektrik",
        gen:5 },
      eelektross:{ national:604,
        name:"Eelektross",
        gen:5 },
      elgyem:{ national:605,
        name:"Elgyem",
        gen:5 },
      beheeyem:{ national:606,
        name:"Beheeyem",
        gen:5 },
      litwick:{ national:607,
        name:"Litwick",
        gen:5 },
      lampent:{ national:608,
        name:"Lampent",
        gen:5 },
      chandelure:{ national:609,
        name:"Chandelure",
        gen:5 },
      axew:{ national:610,
        name:"Axew",
        gen:5 },
      fraxure:{ national:611,
        name:"Fraxure",
        gen:5 },
      haxorus:{ national:612,
        name:"Haxorus",
        gen:5 },
      cubchoo:{ national:613,
        name:"Cubchoo",
        gen:5 },
      beartic:{ national:614,
        name:"Beartic",
        gen:5 },
      cryogonal:{ national:615,
        name:"Cryogonal",
        gen:5 },
      shelmet:{ national:616,
        name:"Shelmet",
        gen:5 },
      accelgor:{ national:617,
        name:"Accelgor",
        gen:5 },
      stunfisk:{ national:618,
        name:"Stunfisk",
        gen:5 },
      mienfoo:{ national:619,
        name:"Mienfoo",
        gen:5 },
      mienshao:{ national:620,
        name:"Mienshao",
        gen:5 },
      druddigon:{ national:621,
        name:"Druddigon",
        gen:5 },
      golett:{ national:622,
        name:"Golett",
        gen:5 },
      golurk:{ national:623,
        name:"Golurk",
        gen:5 },
      pawniard:{ national:624,
        name:"Pawniard",
        gen:5 },
      bisharp:{ national:625,
        name:"Bisharp",
        gen:5 },
      bouffalant:{ national:626,
        name:"Bouffalant",
        gen:5 },
      rufflet:{ national:627,
        name:"Rufflet",
        gen:5 },
      braviary:{ national:628,
        name:"Braviary",
        gen:5 },
      vullaby:{ national:629,
        name:"Vullaby",
        gen:5 },
      mandibuzz:{ national:630,
        name:"Mandibuzz",
        gen:5 },
      heatmor:{ national:631,
        name:"Heatmor",
        gen:5 },
      durant:{ national:632,
        name:"Durant",
        gen:5 },
      deino:{ national:633,
        name:"Deino",
        gen:5 },
      zweilous:{ national:634,
        name:"Zweilous",
        gen:5 },
      hydreigon:{ national:635,
        name:"Hydreigon",
        gen:5 },
      larvesta:{ national:636,
        name:"Larvesta",
        gen:5 },
      volcarona:{ national:637,
        name:"Volcarona",
        gen:5 },
      cobalion:{ national:638,
        name:"Cobalion",
        gen:5 },
      terrakion:{ national:639,
        name:"Terrakion",
        gen:5 },
      virizion:{ national:640,
        name:"Virizion",
        gen:5 },
      tornadus:{ national:641,
        name:"Tornadus",
        gen:5 },
      thundurus:{ national:642,
        name:"Thundurus",
        gen:5 },
      reshiram:{ national:643,
        name:"Reshiram",
        gen:5 },
      zekrom:{ national:644,
        name:"Zekrom",
        gen:5 },
      landorus:{ national:645,
        name:"Landorus",
        gen:5 },
      kyurem:{ national:646,
        name:"Kyurem",
        gen:5 },
      keldeo:{ national:647,
        name:"Keldeo",
        gen:5 },
      meloetta:{ national:648,
        name:"Meloetta",
        gen:5 },
      genesect:{ national:649,
        name:"Genesect",
        gen:5 },
      chespin:{ national:650,
        name:"Chespin",
        gen:6 },
      quilladin:{ national:651,
        name:"Quilladin",
        gen:6 },
      chesnaught:{ national:652,
        name:"Chesnaught",
        gen:6 },
      fennekin:{ national:653,
        name:"Fennekin",
        gen:6 },
      braixen:{ national:654,
        name:"Braixen",
        gen:6 },
      delphox:{ national:655,
        name:"Delphox",
        gen:6 },
      froakie:{ national:656,
        name:"Froakie",
        gen:6 },
      frogadier:{ national:657,
        name:"Frogadier",
        gen:6 },
      greninja:{ national:658,
        name:"Greninja",
        gen:6 },
      bunnelby:{ national:659,
        name:"Bunnelby",
        gen:6 },
      diggersby:{ national:660,
        name:"Diggersby",
        gen:6 },
      fletchling:{ national:661,
        name:"Fletchling",
        gen:6 },
      fletchinder:{ national:662,
        name:"Fletchinder",
        gen:6 },
      talonflame:{ national:663,
        name:"Talonflame",
        gen:6 },
      scatterbug:{ national:664,
        name:"Scatterbug",
        gen:6 },
      spewpa:{ national:665,
        name:"Spewpa",
        gen:6 },
      vivillon:{ national:666,
        name:"Vivillon",
        gen:6 },
      litleo:{ national:667,
        name:"Litleo",
        gen:6 },
      pyroar:{ national:668,
        name:"Pyroar",
        gen:6 },
      flabebe:{ national:669,
        name:"Flabébé",
        gen:6 },
      floette:{ national:670,
        name:"Floette",
        gen:6 },
      florges:{ national:671,
        name:"Florges",
        gen:6 },
      skiddo:{ national:672,
        name:"Skiddo",
        gen:6 },
      gogoat:{ national:673,
        name:"Gogoat",
        gen:6 },
      pancham:{ national:674,
        name:"Pancham",
        gen:6 },
      pangoro:{ national:675,
        name:"Pangoro",
        gen:6 },
      furfrou:{ national:676,
        name:"Furfrou",
        gen:6 },
      espurr:{ national:677,
        name:"Espurr",
        gen:6 },
      meowstic:{ national:678,
        name:"Meowstic",
        gen:6 },
      honedge:{ national:679,
        name:"Honedge",
        gen:6 },
      doublade:{ national:680,
        name:"Doublade",
        gen:6 },
      aegislash:{ national:681,
        name:"Aegislash",
        gen:6 },
      spritzee:{ national:682,
        name:"Spritzee",
        gen:6 },
      aromatisse:{ national:683,
        name:"Aromatisse",
        gen:6 },
      swirlix:{ national:684,
        name:"Swirlix",
        gen:6 },
      slurpuff:{ national:685,
        name:"Slurpuff",
        gen:6 },
      inkay:{ national:686,
        name:"Inkay",
        gen:6 },
      malamar:{ national:687,
        name:"Malamar",
        gen:6 },
      binacle:{ national:688,
        name:"Binacle",
        gen:6 },
      barbaracle:{ national:689,
        name:"Barbaracle",
        gen:6 },
      skrelp:{ national:690,
        name:"Skrelp",
        gen:6 },
      dragalge:{ national:691,
        name:"Dragalge",
        gen:6 },
      clauncher:{ national:692,
        name:"Clauncher",
        gen:6 },
      clawitzer:{ national:693,
        name:"Clawitzer",
        gen:6 },
      helioptile:{ national:694,
        name:"Helioptile",
        gen:6 },
      heliolisk:{ national:695,
        name:"Heliolisk",
        gen:6 },
      tyrunt:{ national:696,
        name:"Tyrunt",
        gen:6 },
      tyrantrum:{ national:697,
        name:"Tyrantrum",
        gen:6 },
      amaura:{ national:698,
        name:"Amaura",
        gen:6 },
      aurorus:{ national:699,
        name:"Aurorus",
        gen:6 },
      sylveon:{ national:700,
        name:"Sylveon",
        gen:6 },
      hawlucha:{ national:701,
        name:"Hawlucha",
        gen:6 },
      dedenne:{ national:702,
        name:"Dedenne",
        gen:6 },
      carbink:{ national:703,
        name:"Carbink",
        gen:6 },
      goomy:{ national:704,
        name:"Goomy",
        gen:6 },
      sliggoo:{ national:705,
        name:"Sliggoo",
        gen:6 },
      goodra:{ national:706,
        name:"Goodra",
        gen:6 },
      klefki:{ national:707,
        name:"Klefki",
        gen:6 },
      phantump:{ national:708,
        name:"Phantump",
        gen:6 },
      trevenant:{ national:709,
        name:"Trevenant",
        gen:6 },
      pumpkaboo:{ national:710,
        name:"Pumpkaboo",
        gen:6 },
      gourgeist:{ national:711,
        name:"Gourgeist",
        gen:6 },
      bergmite:{ national:712,
        name:"Bergmite",
        gen:6 },
      avalugg:{ national:713,
        name:"Avalugg",
        gen:6 },
      noibat:{ national:714,
        name:"Noibat",
        gen:6 },
      noivern:{ national:715,
        name:"Noivern",
        gen:6 },
      xerneas:{ national:716,
        name:"Xerneas",
        gen:6 },
      yveltal:{ national:717,
        name:"Yveltal",
        gen:6 },
      zygarde:{ national:718,
        name:"Zygarde",
        gen:6 },
      diancie:{ national:719,
        name:"Diancie",
        gen:6 },
      hoopa:{ national:720,
        name:"Hoopa",
        gen:6 },
      volcanion:{ national:721,
        name:"Volcanion",
        gen:6 },
      rowlet:{ national:722,
        name:"Rowlet",
        gen:7 },
      dartrix:{ national:723,
        name:"Dartrix",
        gen:7 },
      decidueye:{ national:724,
        name:"Decidueye",
        gen:7 },
      litten:{ national:725,
        name:"Litten",
        gen:7 },
      torracat:{ national:726,
        name:"Torracat",
        gen:7 },
      incineroar:{ national:727,
        name:"Incineroar",
        gen:7 },
      popplio:{ national:728,
        name:"Popplio",
        gen:7 },
      brionne:{ national:729,
        name:"Brionne",
        gen:7 },
      primarina:{ national:730,
        name:"Primarina",
        gen:7 },
      pikipek:{ national:731,
        name:"Pikipek",
        gen:7 },
      trumbeak:{ national:732,
        name:"Trumbeak",
        gen:7 },
      toucannon:{ national:733,
        name:"Toucannon",
        gen:7 },
      yungoos:{ national:734,
        name:"Yungoos",
        gen:7 },
      gumshoos:{ national:735,
        name:"Gumshoos",
        gen:7 },
      grubbin:{ national:736,
        name:"Grubbin",
        gen:7 },
      charjabug:{ national:737,
        name:"Charjabug",
        gen:7 },
      vikavolt:{ national:738,
        name:"Vikavolt",
        gen:7 },
      crabrawler:{ national:739,
        name:"Crabrawler",
        gen:7 },
      crabominable:{ national:740,
        name:"Crabominable",
        gen:7 },
      oricorio:{ national:741,
        name:"Oricorio",
        gen:7 },
      cutiefly:{ national:742,
        name:"Cutiefly",
        gen:7 },
      ribombee:{ national:743,
        name:"Ribombee",
        gen:7 },
      rockruff:{ national:744,
        name:"Rockruff",
        gen:7 },
      lycanroc:{ national:745,
        name:"Lycanroc",
        gen:7 },
      wishiwashi:{ national:746,
        name:"Wishiwashi",
        gen:7 },
      mareanie:{ national:747,
        name:"Mareanie",
        gen:7 },
      toxapex:{ national:748,
        name:"Toxapex",
        gen:7 },
      mudbray:{ national:749,
        name:"Mudbray",
        gen:7 },
      mudsdale:{ national:750,
        name:"Mudsdale",
        gen:7 },
      dewpider:{ national:751,
        name:"Dewpider",
        gen:7 },
      araquanid:{ national:752,
        name:"Araquanid",
        gen:7 },
      fomantis:{ national:753,
        name:"Fomantis",
        gen:7 },
      lurantis:{ national:754,
        name:"Lurantis",
        gen:7 },
      morelull:{ national:755,
        name:"Morelull",
        gen:7 },
      shiinotic:{ national:756,
        name:"Shiinotic",
        gen:7 },
      salandit:{ national:757,
        name:"Salandit",
        gen:7 },
      salazzle:{ national:758,
        name:"Salazzle",
        gen:7 },
      stufful:{ national:759,
        name:"Stufful",
        gen:7 },
      bewear:{ national:760,
        name:"Bewear",
        gen:7 },
      bounsweet:{ national:761,
        name:"Bounsweet",
        gen:7 },
      steenee:{ national:762,
        name:"Steenee",
        gen:7 },
      tsareena:{ national:763,
        name:"Tsareena",
        gen:7 },
      comfey:{ national:764,
        name:"Comfey",
        gen:7 },
      oranguru:{ national:765,
        name:"Oranguru",
        gen:7 },
      passimian:{ national:766,
        name:"Passimian",
        gen:7 },
      wimpod:{ national:767,
        name:"Wimpod",
        gen:7 },
      golisopod:{ national:768,
        name:"Golisopod",
        gen:7 },
      sandygast:{ national:769,
        name:"Sandygast",
        gen:7 },
      palossand:{ national:770,
        name:"Palossand",
        gen:7 },
      pyukumuku:{ national:771,
        name:"Pyukumuku",
        gen:7 },
      "type-null":{ national:772,
        name:"Type: Null",
        gen:7 },
      silvally:{ national:773,
        name:"Silvally",
        gen:7 },
      minior:{ national:774,
        name:"Minior",
        gen:7 },
      komala:{ national:775,
        name:"Komala",
        gen:7 },
      turtonator:{ national:776,
        name:"Turtonator",
        gen:7 },
      togedemaru:{ national:777,
        name:"Togedemaru",
        gen:7 },
      mimikyu:{ national:778,
        name:"Mimikyu",
        gen:7 },
      bruxish:{ national:779,
        name:"Bruxish",
        gen:7 },
      drampa:{ national:780,
        name:"Drampa",
        gen:7 },
      dhelmise:{ national:781,
        name:"Dhelmise",
        gen:7 },
      "jangmo-o":{ national:782,
        name:"Jangmo-o",
        gen:7 },
      "hakamo-o":{ national:783,
        name:"Hakamo-o",
        gen:7 },
      "kommo-o":{ national:784,
        name:"Kommo-o",
        gen:7 },
      "tapu-koko":{ national:785,
        name:"Tapu Koko",
        gen:7 },
      "tapu-lele":{ national:786,
        name:"Tapu Lele",
        gen:7 },
      "tapu-bulu":{ national:787,
        name:"Tapu Bulu",
        gen:7 },
      "tapu-fini":{ national:788,
        name:"Tapu Fini",
        gen:7 },
      cosmog:{ national:789,
        name:"Cosmog",
        gen:7 },
      cosmoem:{ national:790,
        name:"Cosmoem",
        gen:7 },
      solgaleo:{ national:791,
        name:"Solgaleo",
        gen:7 },
      lunala:{ national:792,
        name:"Lunala",
        gen:7 },
      nihilego:{ national:793,
        name:"Nihilego",
        gen:7 },
      buzzwole:{ national:794,
        name:"Buzzwole",
        gen:7 },
      pheromosa:{ national:795,
        name:"Pheromosa",
        gen:7 },
      xurkitree:{ national:796,
        name:"Xurkitree",
        gen:7 },
      celesteela:{ national:797,
        name:"Celesteela",
        gen:7 },
      kartana:{ national:798,
        name:"Kartana",
        gen:7 },
      guzzlord:{ national:799,
        name:"Guzzlord",
        gen:7 },
      necrozma:{ national:800,
        name:"Necrozma",
        gen:7 },
      magearna:{ national:801,
        name:"Magearna",
        gen:7 },
      marshadow:{ national:802,
        name:"Marshadow",
        gen:7 },
      poipole:{ national:803,
        name:"Poipole",
        gen:7 },
      naganadel:{ national:804,
        name:"Naganadel",
        gen:7 },
      stakataka:{ national:805,
        name:"Stakataka",
        gen:7 },
      blacephalon:{ national:806,
        name:"Blacephalon",
        gen:7 },
      zeraora:{ national:807,
        name:"Zeraora",
        gen:7 },
      meltan:{ national:808,
        name:"Meltan",
        gen:7 },
      melmetal:{ national:809,
        name:"Melmetal",
        gen:7 },
      grookey:{ national:810,
        name:"Grookey",
        gen:8 },
      thwackey:{ national:811,
        name:"Thwackey",
        gen:8 },
      rillaboom:{ national:812,
        name:"Rillaboom",
        gen:8 },
      scorbunny:{ national:813,
        name:"Scorbunny",
        gen:8 },
      raboot:{ national:814,
        name:"Raboot",
        gen:8 },
      cinderace:{ national:815,
        name:"Cinderace",
        gen:8 },
      sobble:{ national:816,
        name:"Sobble",
        gen:8 },
      drizzile:{ national:817,
        name:"Drizzile",
        gen:8 },
      inteleon:{ national:818,
        name:"Inteleon",
        gen:8 },
      skwovet:{ national:819,
        name:"Skwovet",
        gen:8 },
      greedent:{ national:820,
        name:"Greedent",
        gen:8 },
      rookidee:{ national:821,
        name:"Rookidee",
        gen:8 },
      corvisquire:{ national:822,
        name:"Corvisquire",
        gen:8 },
      corviknight:{ national:823,
        name:"Corviknight",
        gen:8 },
      blipbug:{ national:824,
        name:"Blipbug",
        gen:8 },
      dottler:{ national:825,
        name:"Dottler",
        gen:8 },
      orbeetle:{ national:826,
        name:"Orbeetle",
        gen:8 },
      nickit:{ national:827,
        name:"Nickit",
        gen:8 },
      thievul:{ national:828,
        name:"Thievul",
        gen:8 },
      gossifleur:{ national:829,
        name:"Gossifleur",
        gen:8 },
      eldegoss:{ national:830,
        name:"Eldegoss",
        gen:8 },
      wooloo:{ national:831,
        name:"Wooloo",
        gen:8 },
      dubwool:{ national:832,
        name:"Dubwool",
        gen:8 },
      chewtle:{ national:833,
        name:"Chewtle",
        gen:8 },
      drednaw:{ national:834,
        name:"Drednaw",
        gen:8 },
      yamper:{ national:835,
        name:"Yamper",
        gen:8 },
      boltund:{ national:836,
        name:"Boltund",
        gen:8 },
      rolycoly:{ national:837,
        name:"Rolycoly",
        gen:8 },
      carkol:{ national:838,
        name:"Carkol",
        gen:8 },
      coalossal:{ national:839,
        name:"Coalossal",
        gen:8 },
      applin:{ national:840,
        name:"Applin",
        gen:8 },
      flapple:{ national:841,
        name:"Flapple",
        gen:8 },
      appletun:{ national:842,
        name:"Appletun",
        gen:8 },
      silicobra:{ national:843,
        name:"Silicobra",
        gen:8 },
      sandaconda:{ national:844,
        name:"Sandaconda",
        gen:8 },
      cramorant:{ national:845,
        name:"Cramorant",
        gen:8 },
      arrokuda:{ national:846,
        name:"Arrokuda",
        gen:8 },
      barraskewda:{ national:847,
        name:"Barraskewda",
        gen:8 },
      toxel:{ national:848,
        name:"Toxel",
        gen:8 },
      toxtricity:{ national:849,
        name:"Toxtricity",
        gen:8 },
      sizzlipede:{ national:850,
        name:"Sizzlipede",
        gen:8 },
      centiskorch:{ national:851,
        name:"Centiskorch",
        gen:8 },
      clobbopus:{ national:852,
        name:"Clobbopus",
        gen:8 },
      grapploct:{ national:853,
        name:"Grapploct",
        gen:8 },
      sinistea:{ national:854,
        name:"Sinistea",
        gen:8 },
      polteageist:{ national:855,
        name:"Polteageist",
        gen:8 },
      hatenna:{ national:856,
        name:"Hatenna",
        gen:8 },
      hattrem:{ national:857,
        name:"Hattrem",
        gen:8 },
      hatterene:{ national:858,
        name:"Hatterene",
        gen:8 },
      impidimp:{ national:859,
        name:"Impidimp",
        gen:8 },
      morgrem:{ national:860,
        name:"Morgrem",
        gen:8 },
      grimmsnarl:{ national:861,
        name:"Grimmsnarl",
        gen:8 },
      obstagoon:{ national:862,
        name:"Obstagoon",
        gen:8 },
      perrserker:{ national:863,
        name:"Perrserker",
        gen:8 },
      cursola:{ national:864,
        name:"Cursola",
        gen:8 },
      sirfetchd:{ national:865,
        name:"Sirfetch'd",
        gen:8 },
      "mr-rime":{ national:866,
        name:"Mr. Rime",
        gen:8 },
      runerigus:{ national:867,
        name:"Runerigus",
        gen:8 },
      milcery:{ national:868,
        name:"Milcery",
        gen:8 },
      alcremie:{ national:869,
        name:"Alcremie",
        gen:8 },
      falinks:{ national:870,
        name:"Falinks",
        gen:8 },
      pincurchin:{ national:871,
        name:"Pincurchin",
        gen:8 },
      snom:{ national:872,
        name:"Snom",
        gen:8 },
      frosmoth:{ national:873,
        name:"Frosmoth",
        gen:8 },
      stonjourner:{ national:874,
        name:"Stonjourner",
        gen:8 },
      eiscue:{ national:875,
        name:"Eiscue",
        gen:8 },
      indeedee:{ national:876,
        name:"Indeedee",
        gen:8 },
      morpeko:{ national:877,
        name:"Morpeko",
        gen:8 },
      cufant:{ national:878,
        name:"Cufant",
        gen:8 },
      copperajah:{ national:879,
        name:"Copperajah",
        gen:8 },
      dracozolt:{ national:880,
        name:"Dracozolt",
        gen:8 },
      arctozolt:{ national:881,
        name:"Arctozolt",
        gen:8 },
      dracovish:{ national:882,
        name:"Dracovish",
        gen:8 },
      arctovish:{ national:883,
        name:"Arctovish",
        gen:8 },
      duraludon:{ national:884,
        name:"Duraludon",
        gen:8 },
      dreepy:{ national:885,
        name:"Dreepy",
        gen:8 },
      drakloak:{ national:886,
        name:"Drakloak",
        gen:8 },
      dragapult:{ national:887,
        name:"Dragapult",
        gen:8 },
      zacian:{ national:888,
        name:"Zacian",
        gen:8 },
      zamazenta:{ national:889,
        name:"Zamazenta",
        gen:8 },
      eternatus:{ national:890,
        name:"Eternatus",
        gen:8 },
      kubfu:{ national:891,
        name:"Kubfu",
        gen:8 },
      urshifu:{ national:892,
        name:"Urshifu",
        gen:8 },
      zarude:{ national:893,
        name:"Zarude",
        gen:8 },
      regieleki:{ national:894,
        name:"Regieleki",
        gen:8 },
      regidrago:{ national:895,
        name:"Regidrago",
        gen:8 },
      glastrier:{ national:896,
        name:"Glastrier",
        gen:8 },
      spectrier:{ national:897,
        name:"Spectrier",
        gen:8 },
      calyrex:{ national:898,
        name:"Calyrex",
        gen:8 } };

    // import forms from "./pokemon-forms.json";

    let pkmns = [];

    const sprite = (id) => {
      return `https://img.pokemondb.net/sprites/black-white/anim/normal/${id}.gif`;
      // return `https://img.pokemondb.net/sprites/omega-ruby-alpha-sapphire/dex/normal/${id}.png`
    };

    const icon = (id) => {
      // return `https://play.pokemonshowdown.com/sprites/bwicons/${id}.png`;
      return `https://img.pokemondb.net/sprites/sword-shield/icon/${id}.png`;
    };

    const formeName = (mon) => {
      if (mon.formname) {
        return `${mon.name} (${mon.formname})`;
      }
      return mon.name;
    };

    const label = (id, mon) => {
      const name = formeName(mon);
      const img = icon(id);
      return `<img src="${img}"> ${name}`;
    };

    Object.keys(data).forEach((id, key) => {
      const thisMon = {
        ...data$1[data[id].pokemonid],
        ...data[id]
      };
      if (thisMon.gen < 5) {
        let iconId = thisMon.national;
        if (thisMon.formid) {
          iconId = `${thisMon.national}-${thisMon.formid}`;
        }
        pkmns.push({
          iconId,
          value: formeName(thisMon),
          number: thisMon.national,
          icon: icon(id),
          sprite: sprite(id),
          label: label(id, thisMon),
          catch_rate: thisMon["catch-rate"],
          ...thisMon
        });
      }
    });

    const selectedMon = writable(pkmns[0]);

    const selectedBall = writable({});
    const health = writable(100);
    const level = writable(20);
    const player = writable(20);
    const status = writable(1);

    /* components/partials/Type.svelte generated by Svelte v3.44.3 */

    const file = "components/partials/Type.svelte";

    // (5:0) {#if type}
    function create_if_block(ctx) {
    	let span;
    	let t;
    	let span_class_value;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*type*/ ctx[0]);
    			attr_dev(span, "class", span_class_value = "type " + /*type*/ ctx[0]);
    			attr_dev(span, "title", /*type*/ ctx[0]);
    			add_location(span, file, 5, 2, 69);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*type*/ 1) set_data_dev(t, /*type*/ ctx[0]);

    			if (dirty & /*type*/ 1 && span_class_value !== (span_class_value = "type " + /*type*/ ctx[0])) {
    				attr_dev(span, "class", span_class_value);
    			}

    			if (dirty & /*type*/ 1) {
    				attr_dev(span, "title", /*type*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(5:0) {#if type}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let if_block_anchor;
    	let if_block = /*type*/ ctx[0] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*type*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Type', slots, []);
    	let { type = undefined } = $$props;
    	const writable_props = ['type'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Type> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('type' in $$props) $$invalidate(0, type = $$props.type);
    	};

    	$$self.$capture_state = () => ({ type });

    	$$self.$inject_state = $$props => {
    		if ('type' in $$props) $$invalidate(0, type = $$props.type);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [type];
    }

    class Type extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { type: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Type",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get type() {
    		throw new Error("<Type>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Type>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/partials/Difficulty.svelte generated by Svelte v3.44.3 */

    const file$1 = "components/partials/Difficulty.svelte";

    function create_fragment$1(ctx) {
    	let div1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "difficulty__bar svelte-rucyye");
    			set_style(div0, "--diff", /*diffPercent*/ ctx[0] + "%");
    			set_style(div0, "--diff-color", /*diffColor*/ ctx[1]);
    			add_location(div0, file$1, 20, 2, 419);
    			attr_dev(div1, "class", "difficulty svelte-rucyye");
    			add_location(div1, file$1, 19, 0, 391);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*diffPercent*/ 1) {
    				set_style(div0, "--diff", /*diffPercent*/ ctx[0] + "%");
    			}

    			if (dirty & /*diffColor*/ 2) {
    				set_style(div0, "--diff-color", /*diffColor*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let diffPercent;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Difficulty', slots, []);
    	let { difficulty = 255 } = $$props;
    	let diffColor = "white";
    	const writable_props = ['difficulty'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Difficulty> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('difficulty' in $$props) $$invalidate(2, difficulty = $$props.difficulty);
    	};

    	$$self.$capture_state = () => ({ difficulty, diffColor, diffPercent });

    	$$self.$inject_state = $$props => {
    		if ('difficulty' in $$props) $$invalidate(2, difficulty = $$props.difficulty);
    		if ('diffColor' in $$props) $$invalidate(1, diffColor = $$props.diffColor);
    		if ('diffPercent' in $$props) $$invalidate(0, diffPercent = $$props.diffPercent);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*difficulty*/ 4) {
    			 $$invalidate(0, diffPercent = (255 - difficulty) / 255 * 100);
    		}

    		if ($$self.$$.dirty & /*diffPercent*/ 1) {
    			 {
    				if (diffPercent <= 10) {
    					$$invalidate(1, diffColor = "green");
    				} else if (diffPercent <= 25) {
    					$$invalidate(1, diffColor = "yellow");
    				} else if (diffPercent <= 50) {
    					$$invalidate(1, diffColor = "orange");
    				} else {
    					$$invalidate(1, diffColor = "red");
    				}
    			}
    		}
    	};

    	return [diffPercent, diffColor, difficulty];
    }

    class Difficulty extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { difficulty: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Difficulty",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get difficulty() {
    		throw new Error("<Difficulty>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set difficulty(value) {
    		throw new Error("<Difficulty>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function isOutOfViewport (elem) {
        const bounding = elem.getBoundingClientRect();
        const out = {};

        out.top = bounding.top < 0;
        out.left = bounding.left < 0;
        out.bottom =
            bounding.bottom + bounding.height >
            (window.innerHeight || document.documentElement.clientHeight);
        out.right =
            bounding.right >
            (window.innerWidth || document.documentElement.clientWidth);
        out.any = out.top || out.left || out.bottom || out.right;

        return out;
    }

    /* node_modules/svelte-select/src/Item.svelte generated by Svelte v3.44.3 */

    const file$2 = "node_modules/svelte-select/src/Item.svelte";

    function create_fragment$2(ctx) {
    	let div;
    	let raw_value = /*getOptionLabel*/ ctx[0](/*item*/ ctx[1], /*filterText*/ ctx[2]) + "";
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", div_class_value = "item " + /*itemClasses*/ ctx[3] + " svelte-3e0qet");
    			add_location(div, file$2, 78, 0, 1837);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*getOptionLabel, item, filterText*/ 7 && raw_value !== (raw_value = /*getOptionLabel*/ ctx[0](/*item*/ ctx[1], /*filterText*/ ctx[2]) + "")) div.innerHTML = raw_value;
    			if (dirty & /*itemClasses*/ 8 && div_class_value !== (div_class_value = "item " + /*itemClasses*/ ctx[3] + " svelte-3e0qet")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Item', slots, []);
    	let { isActive = false } = $$props;
    	let { isFirst = false } = $$props;
    	let { isHover = false } = $$props;
    	let { isSelectable = false } = $$props;
    	let { getOptionLabel = undefined } = $$props;
    	let { item = undefined } = $$props;
    	let { filterText = '' } = $$props;
    	let itemClasses = '';

    	const writable_props = [
    		'isActive',
    		'isFirst',
    		'isHover',
    		'isSelectable',
    		'getOptionLabel',
    		'item',
    		'filterText'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Item> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('isActive' in $$props) $$invalidate(4, isActive = $$props.isActive);
    		if ('isFirst' in $$props) $$invalidate(5, isFirst = $$props.isFirst);
    		if ('isHover' in $$props) $$invalidate(6, isHover = $$props.isHover);
    		if ('isSelectable' in $$props) $$invalidate(7, isSelectable = $$props.isSelectable);
    		if ('getOptionLabel' in $$props) $$invalidate(0, getOptionLabel = $$props.getOptionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    		if ('filterText' in $$props) $$invalidate(2, filterText = $$props.filterText);
    	};

    	$$self.$capture_state = () => ({
    		isActive,
    		isFirst,
    		isHover,
    		isSelectable,
    		getOptionLabel,
    		item,
    		filterText,
    		itemClasses
    	});

    	$$self.$inject_state = $$props => {
    		if ('isActive' in $$props) $$invalidate(4, isActive = $$props.isActive);
    		if ('isFirst' in $$props) $$invalidate(5, isFirst = $$props.isFirst);
    		if ('isHover' in $$props) $$invalidate(6, isHover = $$props.isHover);
    		if ('isSelectable' in $$props) $$invalidate(7, isSelectable = $$props.isSelectable);
    		if ('getOptionLabel' in $$props) $$invalidate(0, getOptionLabel = $$props.getOptionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    		if ('filterText' in $$props) $$invalidate(2, filterText = $$props.filterText);
    		if ('itemClasses' in $$props) $$invalidate(3, itemClasses = $$props.itemClasses);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*isActive, isFirst, isHover, item, isSelectable*/ 242) {
    			 {
    				const classes = [];

    				if (isActive) {
    					classes.push('active');
    				}

    				if (isFirst) {
    					classes.push('first');
    				}

    				if (isHover) {
    					classes.push('hover');
    				}

    				if (item.isGroupHeader) {
    					classes.push('groupHeader');
    				}

    				if (item.isGroupItem) {
    					classes.push('groupItem');
    				}

    				if (!isSelectable) {
    					classes.push('notSelectable');
    				}

    				$$invalidate(3, itemClasses = classes.join(' '));
    			}
    		}
    	};

    	return [
    		getOptionLabel,
    		item,
    		filterText,
    		itemClasses,
    		isActive,
    		isFirst,
    		isHover,
    		isSelectable
    	];
    }

    class Item extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			isActive: 4,
    			isFirst: 5,
    			isHover: 6,
    			isSelectable: 7,
    			getOptionLabel: 0,
    			item: 1,
    			filterText: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Item",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get isActive() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isActive(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isFirst() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isFirst(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isHover() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isHover(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isSelectable() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isSelectable(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionLabel() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionLabel(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get item() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterText() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterText(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/List.svelte generated by Svelte v3.44.3 */
    const file$3 = "node_modules/svelte-select/src/List.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[41] = list[i];
    	child_ctx[42] = i;
    	return child_ctx;
    }

    // (309:4) {:else}
    function create_else_block(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*items*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_2(ctx);
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();

    			if (each_1_else) {
    				each_1_else.c();
    			}
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);

    			if (each_1_else) {
    				each_1_else.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*getGroupHeaderLabel, items, handleHover, handleClick, Item, filterText, getOptionLabel, value, optionIdentifier, hoverItemIndex, noOptionsMessage, hideEmptyState*/ 114390) {
    				each_value = /*items*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block_2(ctx);
    					each_1_else.c();
    					each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    			if (each_1_else) each_1_else.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(309:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (286:4) {#if isVirtualList}
    function create_if_block$1(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*VirtualList*/ ctx[3];

    	function switch_props(ctx) {
    		return {
    			props: {
    				items: /*items*/ ctx[1],
    				itemHeight: /*itemHeight*/ ctx[8],
    				$$slots: {
    					default: [
    						create_default_slot,
    						({ item, i }) => ({ 41: item, 42: i }),
    						({ item, i }) => [0, (item ? 1024 : 0) | (i ? 2048 : 0)]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty[0] & /*items*/ 2) switch_instance_changes.items = /*items*/ ctx[1];
    			if (dirty[0] & /*itemHeight*/ 256) switch_instance_changes.itemHeight = /*itemHeight*/ ctx[8];

    			if (dirty[0] & /*Item, filterText, getOptionLabel, value, optionIdentifier, hoverItemIndex, items*/ 9814 | dirty[1] & /*$$scope, item, i*/ 11264) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*VirtualList*/ ctx[3])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(286:4) {#if isVirtualList}",
    		ctx
    	});

    	return block;
    }

    // (331:8) {:else}
    function create_else_block_2(ctx) {
    	let if_block_anchor;
    	let if_block = !/*hideEmptyState*/ ctx[11] && create_if_block_2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (!/*hideEmptyState*/ ctx[11]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(331:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (332:12) {#if !hideEmptyState}
    function create_if_block_2(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*noOptionsMessage*/ ctx[12]);
    			attr_dev(div, "class", "empty svelte-1uyqfml");
    			add_location(div, file$3, 332, 16, 10325);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*noOptionsMessage*/ 4096) set_data_dev(t, /*noOptionsMessage*/ ctx[12]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(332:12) {#if !hideEmptyState}",
    		ctx
    	});

    	return block;
    }

    // (313:12) {:else}
    function create_else_block_1(ctx) {
    	let div;
    	let switch_instance;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*Item*/ ctx[4];

    	function switch_props(ctx) {
    		return {
    			props: {
    				item: /*item*/ ctx[41],
    				filterText: /*filterText*/ ctx[13],
    				getOptionLabel: /*getOptionLabel*/ ctx[6],
    				isFirst: isItemFirst(/*i*/ ctx[42]),
    				isActive: isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]),
    				isHover: isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]),
    				isSelectable: isItemSelectable(/*item*/ ctx[41])
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	function mouseover_handler_1() {
    		return /*mouseover_handler_1*/ ctx[29](/*i*/ ctx[42]);
    	}

    	function focus_handler_1() {
    		return /*focus_handler_1*/ ctx[30](/*i*/ ctx[42]);
    	}

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[31](/*item*/ ctx[41], /*i*/ ctx[42], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			t = space();
    			attr_dev(div, "class", "listItem");
    			attr_dev(div, "tabindex", "-1");
    			add_location(div, file$3, 313, 16, 9505);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			append_dev(div, t);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "mouseover", mouseover_handler_1, false, false, false),
    					listen_dev(div, "focus", focus_handler_1, false, false, false),
    					listen_dev(div, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const switch_instance_changes = {};
    			if (dirty[0] & /*items*/ 2) switch_instance_changes.item = /*item*/ ctx[41];
    			if (dirty[0] & /*filterText*/ 8192) switch_instance_changes.filterText = /*filterText*/ ctx[13];
    			if (dirty[0] & /*getOptionLabel*/ 64) switch_instance_changes.getOptionLabel = /*getOptionLabel*/ ctx[6];
    			if (dirty[0] & /*items, value, optionIdentifier*/ 1538) switch_instance_changes.isActive = isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]);
    			if (dirty[0] & /*hoverItemIndex, items*/ 6) switch_instance_changes.isHover = isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]);
    			if (dirty[0] & /*items*/ 2) switch_instance_changes.isSelectable = isItemSelectable(/*item*/ ctx[41]);

    			if (switch_value !== (switch_value = /*Item*/ ctx[4])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, t);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(313:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (311:12) {#if item.isGroupHeader && !item.isSelectable}
    function create_if_block_1(ctx) {
    	let div;
    	let t_value = /*getGroupHeaderLabel*/ ctx[7](/*item*/ ctx[41]) + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "listGroupTitle svelte-1uyqfml");
    			add_location(div, file$3, 311, 16, 9407);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*getGroupHeaderLabel, items*/ 130 && t_value !== (t_value = /*getGroupHeaderLabel*/ ctx[7](/*item*/ ctx[41]) + "")) set_data_dev(t, t_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(311:12) {#if item.isGroupHeader && !item.isSelectable}",
    		ctx
    	});

    	return block;
    }

    // (310:8) {#each items as item, i}
    function create_each_block(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*item*/ ctx[41].isGroupHeader && !/*item*/ ctx[41].isSelectable) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(310:8) {#each items as item, i}",
    		ctx
    	});

    	return block;
    }

    // (287:8) <svelte:component             this={VirtualList}             {items}             {itemHeight}             let:item             let:i>
    function create_default_slot(ctx) {
    	let div;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*Item*/ ctx[4];

    	function switch_props(ctx) {
    		return {
    			props: {
    				item: /*item*/ ctx[41],
    				filterText: /*filterText*/ ctx[13],
    				getOptionLabel: /*getOptionLabel*/ ctx[6],
    				isFirst: isItemFirst(/*i*/ ctx[42]),
    				isActive: isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]),
    				isHover: isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]),
    				isSelectable: isItemSelectable(/*item*/ ctx[41])
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	function mouseover_handler() {
    		return /*mouseover_handler*/ ctx[26](/*i*/ ctx[42]);
    	}

    	function focus_handler() {
    		return /*focus_handler*/ ctx[27](/*i*/ ctx[42]);
    	}

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[28](/*item*/ ctx[41], /*i*/ ctx[42], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "listItem");
    			add_location(div, file$3, 292, 12, 8613);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "mouseover", mouseover_handler, false, false, false),
    					listen_dev(div, "focus", focus_handler, false, false, false),
    					listen_dev(div, "click", click_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const switch_instance_changes = {};
    			if (dirty[1] & /*item*/ 1024) switch_instance_changes.item = /*item*/ ctx[41];
    			if (dirty[0] & /*filterText*/ 8192) switch_instance_changes.filterText = /*filterText*/ ctx[13];
    			if (dirty[0] & /*getOptionLabel*/ 64) switch_instance_changes.getOptionLabel = /*getOptionLabel*/ ctx[6];
    			if (dirty[1] & /*i*/ 2048) switch_instance_changes.isFirst = isItemFirst(/*i*/ ctx[42]);
    			if (dirty[0] & /*value, optionIdentifier*/ 1536 | dirty[1] & /*item*/ 1024) switch_instance_changes.isActive = isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]);
    			if (dirty[0] & /*hoverItemIndex, items*/ 6 | dirty[1] & /*item, i*/ 3072) switch_instance_changes.isHover = isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]);
    			if (dirty[1] & /*item*/ 1024) switch_instance_changes.isSelectable = isItemSelectable(/*item*/ ctx[41]);

    			if (switch_value !== (switch_value = /*Item*/ ctx[4])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(287:8) <svelte:component             this={VirtualList}             {items}             {itemHeight}             let:item             let:i>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$1, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isVirtualList*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "listContainer svelte-1uyqfml");
    			attr_dev(div, "style", /*listStyle*/ ctx[14]);
    			toggle_class(div, "virtualList", /*isVirtualList*/ ctx[5]);
    			add_location(div, file$3, 280, 0, 8317);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			/*div_binding*/ ctx[32](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "keydown", /*handleKeyDown*/ ctx[17], false, false, false),
    					listen_dev(window, "resize", /*computePlacement*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}

    			if (!current || dirty[0] & /*listStyle*/ 16384) {
    				attr_dev(div, "style", /*listStyle*/ ctx[14]);
    			}

    			if (dirty[0] & /*isVirtualList*/ 32) {
    				toggle_class(div, "virtualList", /*isVirtualList*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    			/*div_binding*/ ctx[32](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function isItemActive(item, value, optionIdentifier) {
    	return value && value[optionIdentifier] === item[optionIdentifier];
    }

    function isItemFirst(itemIndex) {
    	return itemIndex === 0;
    }

    function isItemHover(hoverItemIndex, item, itemIndex, items) {
    	return isItemSelectable(item) && (hoverItemIndex === itemIndex || items.length === 1);
    }

    function isItemSelectable(item) {
    	return item.isGroupHeader && item.isSelectable || item.selectable || !item.hasOwnProperty('selectable'); // Default; if `selectable` was not specified, the object is selectable
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('List', slots, []);
    	const dispatch = createEventDispatcher();
    	let { container = undefined } = $$props;
    	let { VirtualList = null } = $$props;
    	let { Item: Item$1 = Item } = $$props;
    	let { isVirtualList = false } = $$props;
    	let { items = [] } = $$props;
    	let { labelIdentifier = 'label' } = $$props;

    	let { getOptionLabel = (option, filterText) => {
    		if (option) return option.isCreator
    		? `Create \"${filterText}\"`
    		: option[labelIdentifier];
    	} } = $$props;

    	let { getGroupHeaderLabel = null } = $$props;
    	let { itemHeight = 40 } = $$props;
    	let { hoverItemIndex = 0 } = $$props;
    	let { value = undefined } = $$props;
    	let { optionIdentifier = 'value' } = $$props;
    	let { hideEmptyState = false } = $$props;
    	let { noOptionsMessage = 'No options' } = $$props;
    	let { isMulti = false } = $$props;
    	let { activeItemIndex = 0 } = $$props;
    	let { filterText = '' } = $$props;
    	let { parent = null } = $$props;
    	let { listPlacement = null } = $$props;
    	let { listAutoWidth = null } = $$props;
    	let { listOffset = 5 } = $$props;
    	let isScrollingTimer = 0;
    	let isScrolling = false;
    	let prev_items;

    	onMount(() => {
    		if (items.length > 0 && !isMulti && value) {
    			const _hoverItemIndex = items.findIndex(item => item[optionIdentifier] === value[optionIdentifier]);

    			if (_hoverItemIndex) {
    				$$invalidate(2, hoverItemIndex = _hoverItemIndex);
    			}
    		}

    		scrollToActiveItem('active');

    		container.addEventListener(
    			'scroll',
    			() => {
    				clearTimeout(isScrollingTimer);

    				isScrollingTimer = setTimeout(
    					() => {
    						isScrolling = false;
    					},
    					100
    				);
    			},
    			false
    		);
    	});

    	beforeUpdate(() => {
    		if (!items) $$invalidate(1, items = []);

    		if (items !== prev_items && items.length > 0) {
    			$$invalidate(2, hoverItemIndex = 0);
    		}

    		prev_items = items;
    	});

    	function handleSelect(item) {
    		if (item.isCreator) return;
    		dispatch('itemSelected', item);
    	}

    	function handleHover(i) {
    		if (isScrolling) return;
    		$$invalidate(2, hoverItemIndex = i);
    	}

    	function handleClick(args) {
    		const { item, i, event } = args;
    		event.stopPropagation();
    		if (value && !isMulti && value[optionIdentifier] === item[optionIdentifier]) return closeList();

    		if (item.isCreator) {
    			dispatch('itemCreated', filterText);
    		} else if (isItemSelectable(item)) {
    			$$invalidate(19, activeItemIndex = i);
    			$$invalidate(2, hoverItemIndex = i);
    			handleSelect(item);
    		}
    	}

    	function closeList() {
    		dispatch('closeList');
    	}

    	async function updateHoverItem(increment) {
    		if (isVirtualList) return;
    		let isNonSelectableItem = true;

    		while (isNonSelectableItem) {
    			if (increment > 0 && hoverItemIndex === items.length - 1) {
    				$$invalidate(2, hoverItemIndex = 0);
    			} else if (increment < 0 && hoverItemIndex === 0) {
    				$$invalidate(2, hoverItemIndex = items.length - 1);
    			} else {
    				$$invalidate(2, hoverItemIndex = hoverItemIndex + increment);
    			}

    			isNonSelectableItem = !isItemSelectable(items[hoverItemIndex]);
    		}

    		await tick();
    		scrollToActiveItem('hover');
    	}

    	function handleKeyDown(e) {
    		switch (e.key) {
    			case 'Escape':
    				e.preventDefault();
    				closeList();
    				break;
    			case 'ArrowDown':
    				e.preventDefault();
    				items.length && updateHoverItem(1);
    				break;
    			case 'ArrowUp':
    				e.preventDefault();
    				items.length && updateHoverItem(-1);
    				break;
    			case 'Enter':
    				e.preventDefault();
    				if (items.length === 0) break;
    				const hoverItem = items[hoverItemIndex];
    				if (value && !isMulti && value[optionIdentifier] === hoverItem[optionIdentifier]) {
    					closeList();
    					break;
    				}
    				if (hoverItem.isCreator) {
    					dispatch('itemCreated', filterText);
    				} else {
    					$$invalidate(19, activeItemIndex = hoverItemIndex);
    					handleSelect(items[hoverItemIndex]);
    				}
    				break;
    			case 'Tab':
    				e.preventDefault();
    				if (items.length === 0) {
    					return closeList();
    				}
    				if (value && value[optionIdentifier] === items[hoverItemIndex][optionIdentifier]) return closeList();
    				$$invalidate(19, activeItemIndex = hoverItemIndex);
    				handleSelect(items[hoverItemIndex]);
    				break;
    		}
    	}

    	function scrollToActiveItem(className) {
    		if (isVirtualList || !container) return;
    		let offsetBounding;
    		const focusedElemBounding = container.querySelector(`.listItem .${className}`);

    		if (focusedElemBounding) {
    			offsetBounding = container.getBoundingClientRect().bottom - focusedElemBounding.getBoundingClientRect().bottom;
    		}

    		$$invalidate(0, container.scrollTop -= offsetBounding, container);
    	}

    	let listStyle;

    	function computePlacement() {
    		const { height, width } = parent.getBoundingClientRect();
    		$$invalidate(14, listStyle = '');
    		$$invalidate(14, listStyle += `min-width:${width}px;width:${listAutoWidth ? 'auto' : '100%'};`);

    		if (listPlacement === 'top' || listPlacement === 'auto' && isOutOfViewport(container).bottom) {
    			$$invalidate(14, listStyle += `bottom:${height + listOffset}px;`);
    		} else {
    			$$invalidate(14, listStyle += `top:${height + listOffset}px;`);
    		}
    	}

    	const writable_props = [
    		'container',
    		'VirtualList',
    		'Item',
    		'isVirtualList',
    		'items',
    		'labelIdentifier',
    		'getOptionLabel',
    		'getGroupHeaderLabel',
    		'itemHeight',
    		'hoverItemIndex',
    		'value',
    		'optionIdentifier',
    		'hideEmptyState',
    		'noOptionsMessage',
    		'isMulti',
    		'activeItemIndex',
    		'filterText',
    		'parent',
    		'listPlacement',
    		'listAutoWidth',
    		'listOffset'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<List> was created with unknown prop '${key}'`);
    	});

    	const mouseover_handler = i => handleHover(i);
    	const focus_handler = i => handleHover(i);
    	const click_handler = (item, i, event) => handleClick({ item, i, event });
    	const mouseover_handler_1 = i => handleHover(i);
    	const focus_handler_1 = i => handleHover(i);
    	const click_handler_1 = (item, i, event) => handleClick({ item, i, event });

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(0, container);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('VirtualList' in $$props) $$invalidate(3, VirtualList = $$props.VirtualList);
    		if ('Item' in $$props) $$invalidate(4, Item$1 = $$props.Item);
    		if ('isVirtualList' in $$props) $$invalidate(5, isVirtualList = $$props.isVirtualList);
    		if ('items' in $$props) $$invalidate(1, items = $$props.items);
    		if ('labelIdentifier' in $$props) $$invalidate(20, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(6, getOptionLabel = $$props.getOptionLabel);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(7, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('itemHeight' in $$props) $$invalidate(8, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(2, hoverItemIndex = $$props.hoverItemIndex);
    		if ('value' in $$props) $$invalidate(9, value = $$props.value);
    		if ('optionIdentifier' in $$props) $$invalidate(10, optionIdentifier = $$props.optionIdentifier);
    		if ('hideEmptyState' in $$props) $$invalidate(11, hideEmptyState = $$props.hideEmptyState);
    		if ('noOptionsMessage' in $$props) $$invalidate(12, noOptionsMessage = $$props.noOptionsMessage);
    		if ('isMulti' in $$props) $$invalidate(21, isMulti = $$props.isMulti);
    		if ('activeItemIndex' in $$props) $$invalidate(19, activeItemIndex = $$props.activeItemIndex);
    		if ('filterText' in $$props) $$invalidate(13, filterText = $$props.filterText);
    		if ('parent' in $$props) $$invalidate(22, parent = $$props.parent);
    		if ('listPlacement' in $$props) $$invalidate(23, listPlacement = $$props.listPlacement);
    		if ('listAutoWidth' in $$props) $$invalidate(24, listAutoWidth = $$props.listAutoWidth);
    		if ('listOffset' in $$props) $$invalidate(25, listOffset = $$props.listOffset);
    	};

    	$$self.$capture_state = () => ({
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		tick,
    		isOutOfViewport,
    		ItemComponent: Item,
    		dispatch,
    		container,
    		VirtualList,
    		Item: Item$1,
    		isVirtualList,
    		items,
    		labelIdentifier,
    		getOptionLabel,
    		getGroupHeaderLabel,
    		itemHeight,
    		hoverItemIndex,
    		value,
    		optionIdentifier,
    		hideEmptyState,
    		noOptionsMessage,
    		isMulti,
    		activeItemIndex,
    		filterText,
    		parent,
    		listPlacement,
    		listAutoWidth,
    		listOffset,
    		isScrollingTimer,
    		isScrolling,
    		prev_items,
    		handleSelect,
    		handleHover,
    		handleClick,
    		closeList,
    		updateHoverItem,
    		handleKeyDown,
    		scrollToActiveItem,
    		isItemActive,
    		isItemFirst,
    		isItemHover,
    		isItemSelectable,
    		listStyle,
    		computePlacement
    	});

    	$$self.$inject_state = $$props => {
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('VirtualList' in $$props) $$invalidate(3, VirtualList = $$props.VirtualList);
    		if ('Item' in $$props) $$invalidate(4, Item$1 = $$props.Item);
    		if ('isVirtualList' in $$props) $$invalidate(5, isVirtualList = $$props.isVirtualList);
    		if ('items' in $$props) $$invalidate(1, items = $$props.items);
    		if ('labelIdentifier' in $$props) $$invalidate(20, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(6, getOptionLabel = $$props.getOptionLabel);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(7, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('itemHeight' in $$props) $$invalidate(8, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(2, hoverItemIndex = $$props.hoverItemIndex);
    		if ('value' in $$props) $$invalidate(9, value = $$props.value);
    		if ('optionIdentifier' in $$props) $$invalidate(10, optionIdentifier = $$props.optionIdentifier);
    		if ('hideEmptyState' in $$props) $$invalidate(11, hideEmptyState = $$props.hideEmptyState);
    		if ('noOptionsMessage' in $$props) $$invalidate(12, noOptionsMessage = $$props.noOptionsMessage);
    		if ('isMulti' in $$props) $$invalidate(21, isMulti = $$props.isMulti);
    		if ('activeItemIndex' in $$props) $$invalidate(19, activeItemIndex = $$props.activeItemIndex);
    		if ('filterText' in $$props) $$invalidate(13, filterText = $$props.filterText);
    		if ('parent' in $$props) $$invalidate(22, parent = $$props.parent);
    		if ('listPlacement' in $$props) $$invalidate(23, listPlacement = $$props.listPlacement);
    		if ('listAutoWidth' in $$props) $$invalidate(24, listAutoWidth = $$props.listAutoWidth);
    		if ('listOffset' in $$props) $$invalidate(25, listOffset = $$props.listOffset);
    		if ('isScrollingTimer' in $$props) isScrollingTimer = $$props.isScrollingTimer;
    		if ('isScrolling' in $$props) isScrolling = $$props.isScrolling;
    		if ('prev_items' in $$props) prev_items = $$props.prev_items;
    		if ('listStyle' in $$props) $$invalidate(14, listStyle = $$props.listStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*parent, container*/ 4194305) {
    			 {
    				if (parent && container) computePlacement();
    			}
    		}
    	};

    	return [
    		container,
    		items,
    		hoverItemIndex,
    		VirtualList,
    		Item$1,
    		isVirtualList,
    		getOptionLabel,
    		getGroupHeaderLabel,
    		itemHeight,
    		value,
    		optionIdentifier,
    		hideEmptyState,
    		noOptionsMessage,
    		filterText,
    		listStyle,
    		handleHover,
    		handleClick,
    		handleKeyDown,
    		computePlacement,
    		activeItemIndex,
    		labelIdentifier,
    		isMulti,
    		parent,
    		listPlacement,
    		listAutoWidth,
    		listOffset,
    		mouseover_handler,
    		focus_handler,
    		click_handler,
    		mouseover_handler_1,
    		focus_handler_1,
    		click_handler_1,
    		div_binding
    	];
    }

    class List extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$3,
    			create_fragment$3,
    			safe_not_equal,
    			{
    				container: 0,
    				VirtualList: 3,
    				Item: 4,
    				isVirtualList: 5,
    				items: 1,
    				labelIdentifier: 20,
    				getOptionLabel: 6,
    				getGroupHeaderLabel: 7,
    				itemHeight: 8,
    				hoverItemIndex: 2,
    				value: 9,
    				optionIdentifier: 10,
    				hideEmptyState: 11,
    				noOptionsMessage: 12,
    				isMulti: 21,
    				activeItemIndex: 19,
    				filterText: 13,
    				parent: 22,
    				listPlacement: 23,
    				listAutoWidth: 24,
    				listOffset: 25
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "List",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get container() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set container(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get VirtualList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set VirtualList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Item() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Item(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isVirtualList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isVirtualList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get items() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelIdentifier() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelIdentifier(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionLabel() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionLabel(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getGroupHeaderLabel() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getGroupHeaderLabel(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemHeight() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemHeight(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hoverItemIndex() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hoverItemIndex(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get optionIdentifier() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set optionIdentifier(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideEmptyState() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideEmptyState(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noOptionsMessage() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noOptionsMessage(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isMulti() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMulti(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeItemIndex() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeItemIndex(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterText() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterText(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get parent() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set parent(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listPlacement() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listPlacement(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listAutoWidth() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listAutoWidth(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOffset() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOffset(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/Selection.svelte generated by Svelte v3.44.3 */

    const file$4 = "node_modules/svelte-select/src/Selection.svelte";

    function create_fragment$4(ctx) {
    	let div;
    	let raw_value = /*getSelectionLabel*/ ctx[0](/*item*/ ctx[1]) + "";

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "selection svelte-pu1q1n");
    			add_location(div, file$4, 13, 0, 230);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*getSelectionLabel, item*/ 3 && raw_value !== (raw_value = /*getSelectionLabel*/ ctx[0](/*item*/ ctx[1]) + "")) div.innerHTML = raw_value;		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Selection', slots, []);
    	let { getSelectionLabel = undefined } = $$props;
    	let { item = undefined } = $$props;
    	const writable_props = ['getSelectionLabel', 'item'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Selection> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('getSelectionLabel' in $$props) $$invalidate(0, getSelectionLabel = $$props.getSelectionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    	};

    	$$self.$capture_state = () => ({ getSelectionLabel, item });

    	$$self.$inject_state = $$props => {
    		if ('getSelectionLabel' in $$props) $$invalidate(0, getSelectionLabel = $$props.getSelectionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [getSelectionLabel, item];
    }

    class Selection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { getSelectionLabel: 0, item: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Selection",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get getSelectionLabel() {
    		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getSelectionLabel(value) {
    		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get item() {
    		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/MultiSelection.svelte generated by Svelte v3.44.3 */
    const file$5 = "node_modules/svelte-select/src/MultiSelection.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    // (87:8) {#if !isDisabled && !multiFullItemClearable}
    function create_if_block$2(ctx) {
    	let div;
    	let svg;
    	let path;
    	let mounted;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[6](/*i*/ ctx[11], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z");
    			add_location(path, file$5, 97, 20, 3027);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "-2 -2 50 50");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "role", "presentation");
    			attr_dev(svg, "class", "svelte-liu9pa");
    			add_location(svg, file$5, 90, 16, 2775);
    			attr_dev(div, "class", "multiSelectItem_clear svelte-liu9pa");
    			add_location(div, file$5, 87, 12, 2647);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(87:8) {#if !isDisabled && !multiFullItemClearable}",
    		ctx
    	});

    	return block;
    }

    // (77:0) {#each value as item, i}
    function create_each_block$1(ctx) {
    	let div1;
    	let div0;
    	let raw_value = /*getSelectionLabel*/ ctx[4](/*item*/ ctx[9]) + "";
    	let t0;
    	let t1;
    	let div1_class_value;
    	let mounted;
    	let dispose;
    	let if_block = !/*isDisabled*/ ctx[2] && !/*multiFullItemClearable*/ ctx[3] && create_if_block$2(ctx);

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[7](/*i*/ ctx[11], ...args);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			attr_dev(div0, "class", "multiSelectItem_label svelte-liu9pa");
    			add_location(div0, file$5, 83, 8, 2487);
    			attr_dev(div1, "class", div1_class_value = "multiSelectItem " + (/*activeValue*/ ctx[1] === /*i*/ ctx[11] ? 'active' : '') + " " + (/*isDisabled*/ ctx[2] ? 'disabled' : '') + " svelte-liu9pa");
    			add_location(div1, file$5, 77, 4, 2256);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			div0.innerHTML = raw_value;
    			append_dev(div1, t0);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t1);

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*getSelectionLabel, value*/ 17 && raw_value !== (raw_value = /*getSelectionLabel*/ ctx[4](/*item*/ ctx[9]) + "")) div0.innerHTML = raw_value;
    			if (!/*isDisabled*/ ctx[2] && !/*multiFullItemClearable*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					if_block.m(div1, t1);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*activeValue, isDisabled*/ 6 && div1_class_value !== (div1_class_value = "multiSelectItem " + (/*activeValue*/ ctx[1] === /*i*/ ctx[11] ? 'active' : '') + " " + (/*isDisabled*/ ctx[2] ? 'disabled' : '') + " svelte-liu9pa")) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(77:0) {#each value as item, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let each_1_anchor;
    	let each_value = /*value*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*activeValue, isDisabled, multiFullItemClearable, handleClear, getSelectionLabel, value*/ 63) {
    				each_value = /*value*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MultiSelection', slots, []);
    	const dispatch = createEventDispatcher();
    	let { value = [] } = $$props;
    	let { activeValue = undefined } = $$props;
    	let { isDisabled = false } = $$props;
    	let { multiFullItemClearable = false } = $$props;
    	let { getSelectionLabel = undefined } = $$props;

    	function handleClear(i, event) {
    		event.stopPropagation();
    		dispatch('multiItemClear', { i });
    	}

    	const writable_props = [
    		'value',
    		'activeValue',
    		'isDisabled',
    		'multiFullItemClearable',
    		'getSelectionLabel'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MultiSelection> was created with unknown prop '${key}'`);
    	});

    	const click_handler = (i, event) => handleClear(i, event);
    	const click_handler_1 = (i, event) => multiFullItemClearable ? handleClear(i, event) : {};

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('activeValue' in $$props) $$invalidate(1, activeValue = $$props.activeValue);
    		if ('isDisabled' in $$props) $$invalidate(2, isDisabled = $$props.isDisabled);
    		if ('multiFullItemClearable' in $$props) $$invalidate(3, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('getSelectionLabel' in $$props) $$invalidate(4, getSelectionLabel = $$props.getSelectionLabel);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		value,
    		activeValue,
    		isDisabled,
    		multiFullItemClearable,
    		getSelectionLabel,
    		handleClear
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('activeValue' in $$props) $$invalidate(1, activeValue = $$props.activeValue);
    		if ('isDisabled' in $$props) $$invalidate(2, isDisabled = $$props.isDisabled);
    		if ('multiFullItemClearable' in $$props) $$invalidate(3, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('getSelectionLabel' in $$props) $$invalidate(4, getSelectionLabel = $$props.getSelectionLabel);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		activeValue,
    		isDisabled,
    		multiFullItemClearable,
    		getSelectionLabel,
    		handleClear,
    		click_handler,
    		click_handler_1
    	];
    }

    class MultiSelection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			value: 0,
    			activeValue: 1,
    			isDisabled: 2,
    			multiFullItemClearable: 3,
    			getSelectionLabel: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MultiSelection",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get value() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeValue() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeValue(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isDisabled() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isDisabled(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiFullItemClearable() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiFullItemClearable(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getSelectionLabel() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getSelectionLabel(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/VirtualList.svelte generated by Svelte v3.44.3 */
    const file$6 = "node_modules/svelte-select/src/VirtualList.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    const get_default_slot_changes = dirty => ({
    	item: dirty & /*visible*/ 32,
    	i: dirty & /*visible*/ 32,
    	hoverItemIndex: dirty & /*hoverItemIndex*/ 2
    });

    const get_default_slot_context = ctx => ({
    	item: /*row*/ ctx[23].data,
    	i: /*row*/ ctx[23].index,
    	hoverItemIndex: /*hoverItemIndex*/ ctx[1]
    });

    // (154:69) Missing template
    function fallback_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Missing template");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(154:69) Missing template",
    		ctx
    	});

    	return block;
    }

    // (152:8) {#each visible as row (row.index)}
    function create_each_block$2(key_1, ctx) {
    	let svelte_virtual_list_row;
    	let t;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[15].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], get_default_slot_context);
    	const default_slot_or_fallback = default_slot || fallback_block(ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			svelte_virtual_list_row = element("svelte-virtual-list-row");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			t = space();
    			set_custom_element_data(svelte_virtual_list_row, "class", "svelte-g2cagw");
    			add_location(svelte_virtual_list_row, file$6, 152, 12, 3778);
    			this.first = svelte_virtual_list_row;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svelte_virtual_list_row, anchor);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(svelte_virtual_list_row, null);
    			}

    			append_dev(svelte_virtual_list_row, t);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, visible, hoverItemIndex*/ 16418)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[14],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svelte_virtual_list_row);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(152:8) {#each visible as row (row.index)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let svelte_virtual_list_viewport;
    	let svelte_virtual_list_contents;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let svelte_virtual_list_viewport_resize_listener;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*visible*/ ctx[5];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*row*/ ctx[23].index;
    	validate_each_keys(ctx, each_value, get_each_context$2, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$2(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			svelte_virtual_list_viewport = element("svelte-virtual-list-viewport");
    			svelte_virtual_list_contents = element("svelte-virtual-list-contents");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_style(svelte_virtual_list_contents, "padding-top", /*top*/ ctx[6] + "px");
    			set_style(svelte_virtual_list_contents, "padding-bottom", /*bottom*/ ctx[7] + "px");
    			set_custom_element_data(svelte_virtual_list_contents, "class", "svelte-g2cagw");
    			add_location(svelte_virtual_list_contents, file$6, 148, 4, 3597);
    			set_style(svelte_virtual_list_viewport, "height", /*height*/ ctx[0]);
    			set_custom_element_data(svelte_virtual_list_viewport, "class", "svelte-g2cagw");
    			add_render_callback(() => /*svelte_virtual_list_viewport_elementresize_handler*/ ctx[18].call(svelte_virtual_list_viewport));
    			add_location(svelte_virtual_list_viewport, file$6, 143, 0, 3437);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svelte_virtual_list_viewport, anchor);
    			append_dev(svelte_virtual_list_viewport, svelte_virtual_list_contents);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(svelte_virtual_list_contents, null);
    			}

    			/*svelte_virtual_list_contents_binding*/ ctx[16](svelte_virtual_list_contents);
    			/*svelte_virtual_list_viewport_binding*/ ctx[17](svelte_virtual_list_viewport);
    			svelte_virtual_list_viewport_resize_listener = add_resize_listener(svelte_virtual_list_viewport, /*svelte_virtual_list_viewport_elementresize_handler*/ ctx[18].bind(svelte_virtual_list_viewport));
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(svelte_virtual_list_viewport, "scroll", /*handle_scroll*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$$scope, visible, hoverItemIndex*/ 16418) {
    				each_value = /*visible*/ ctx[5];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, svelte_virtual_list_contents, outro_and_destroy_block, create_each_block$2, null, get_each_context$2);
    				check_outros();
    			}

    			if (!current || dirty & /*top*/ 64) {
    				set_style(svelte_virtual_list_contents, "padding-top", /*top*/ ctx[6] + "px");
    			}

    			if (!current || dirty & /*bottom*/ 128) {
    				set_style(svelte_virtual_list_contents, "padding-bottom", /*bottom*/ ctx[7] + "px");
    			}

    			if (!current || dirty & /*height*/ 1) {
    				set_style(svelte_virtual_list_viewport, "height", /*height*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svelte_virtual_list_viewport);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			/*svelte_virtual_list_contents_binding*/ ctx[16](null);
    			/*svelte_virtual_list_viewport_binding*/ ctx[17](null);
    			svelte_virtual_list_viewport_resize_listener();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('VirtualList', slots, ['default']);
    	let { items = undefined } = $$props;
    	let { height = '100%' } = $$props;
    	let { itemHeight = 40 } = $$props;
    	let { hoverItemIndex = 0 } = $$props;
    	let { start = 0 } = $$props;
    	let { end = 0 } = $$props;
    	let height_map = [];
    	let rows;
    	let viewport;
    	let contents;
    	let viewport_height = 0;
    	let visible;
    	let mounted;
    	let top = 0;
    	let bottom = 0;
    	let average_height;

    	async function refresh(items, viewport_height, itemHeight) {
    		const { scrollTop } = viewport;
    		await tick();
    		let content_height = top - scrollTop;
    		let i = start;

    		while (content_height < viewport_height && i < items.length) {
    			let row = rows[i - start];

    			if (!row) {
    				$$invalidate(10, end = i + 1);
    				await tick();
    				row = rows[i - start];
    			}

    			const row_height = height_map[i] = itemHeight || row.offsetHeight;
    			content_height += row_height;
    			i += 1;
    		}

    		$$invalidate(10, end = i);
    		const remaining = items.length - end;
    		average_height = (top + content_height) / end;
    		$$invalidate(7, bottom = remaining * average_height);
    		height_map.length = items.length;
    		if (viewport) $$invalidate(3, viewport.scrollTop = 0, viewport);
    	}

    	async function handle_scroll() {
    		const { scrollTop } = viewport;
    		const old_start = start;

    		for (let v = 0; v < rows.length; v += 1) {
    			height_map[start + v] = itemHeight || rows[v].offsetHeight;
    		}

    		let i = 0;
    		let y = 0;

    		while (i < items.length) {
    			const row_height = height_map[i] || average_height;

    			if (y + row_height > scrollTop) {
    				$$invalidate(9, start = i);
    				$$invalidate(6, top = y);
    				break;
    			}

    			y += row_height;
    			i += 1;
    		}

    		while (i < items.length) {
    			y += height_map[i] || average_height;
    			i += 1;
    			if (y > scrollTop + viewport_height) break;
    		}

    		$$invalidate(10, end = i);
    		const remaining = items.length - end;
    		average_height = y / end;
    		while (i < items.length) height_map[i++] = average_height;
    		$$invalidate(7, bottom = remaining * average_height);

    		if (start < old_start) {
    			await tick();
    			let expected_height = 0;
    			let actual_height = 0;

    			for (let i = start; i < old_start; i += 1) {
    				if (rows[i - start]) {
    					expected_height += height_map[i];
    					actual_height += itemHeight || rows[i - start].offsetHeight;
    				}
    			}

    			const d = actual_height - expected_height;
    			viewport.scrollTo(0, scrollTop + d);
    		}
    	}

    	onMount(() => {
    		rows = contents.getElementsByTagName('svelte-virtual-list-row');
    		$$invalidate(13, mounted = true);
    	});

    	const writable_props = ['items', 'height', 'itemHeight', 'hoverItemIndex', 'start', 'end'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<VirtualList> was created with unknown prop '${key}'`);
    	});

    	function svelte_virtual_list_contents_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			contents = $$value;
    			$$invalidate(4, contents);
    		});
    	}

    	function svelte_virtual_list_viewport_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			viewport = $$value;
    			$$invalidate(3, viewport);
    		});
    	}

    	function svelte_virtual_list_viewport_elementresize_handler() {
    		viewport_height = this.offsetHeight;
    		$$invalidate(2, viewport_height);
    	}

    	$$self.$$set = $$props => {
    		if ('items' in $$props) $$invalidate(11, items = $$props.items);
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('itemHeight' in $$props) $$invalidate(12, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(1, hoverItemIndex = $$props.hoverItemIndex);
    		if ('start' in $$props) $$invalidate(9, start = $$props.start);
    		if ('end' in $$props) $$invalidate(10, end = $$props.end);
    		if ('$$scope' in $$props) $$invalidate(14, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		tick,
    		items,
    		height,
    		itemHeight,
    		hoverItemIndex,
    		start,
    		end,
    		height_map,
    		rows,
    		viewport,
    		contents,
    		viewport_height,
    		visible,
    		mounted,
    		top,
    		bottom,
    		average_height,
    		refresh,
    		handle_scroll
    	});

    	$$self.$inject_state = $$props => {
    		if ('items' in $$props) $$invalidate(11, items = $$props.items);
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('itemHeight' in $$props) $$invalidate(12, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(1, hoverItemIndex = $$props.hoverItemIndex);
    		if ('start' in $$props) $$invalidate(9, start = $$props.start);
    		if ('end' in $$props) $$invalidate(10, end = $$props.end);
    		if ('height_map' in $$props) height_map = $$props.height_map;
    		if ('rows' in $$props) rows = $$props.rows;
    		if ('viewport' in $$props) $$invalidate(3, viewport = $$props.viewport);
    		if ('contents' in $$props) $$invalidate(4, contents = $$props.contents);
    		if ('viewport_height' in $$props) $$invalidate(2, viewport_height = $$props.viewport_height);
    		if ('visible' in $$props) $$invalidate(5, visible = $$props.visible);
    		if ('mounted' in $$props) $$invalidate(13, mounted = $$props.mounted);
    		if ('top' in $$props) $$invalidate(6, top = $$props.top);
    		if ('bottom' in $$props) $$invalidate(7, bottom = $$props.bottom);
    		if ('average_height' in $$props) average_height = $$props.average_height;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*items, start, end*/ 3584) {
    			 $$invalidate(5, visible = items.slice(start, end).map((data, i) => {
    				return { index: i + start, data };
    			}));
    		}

    		if ($$self.$$.dirty & /*mounted, items, viewport_height, itemHeight*/ 14340) {
    			 if (mounted) refresh(items, viewport_height, itemHeight);
    		}
    	};

    	return [
    		height,
    		hoverItemIndex,
    		viewport_height,
    		viewport,
    		contents,
    		visible,
    		top,
    		bottom,
    		handle_scroll,
    		start,
    		end,
    		items,
    		itemHeight,
    		mounted,
    		$$scope,
    		slots,
    		svelte_virtual_list_contents_binding,
    		svelte_virtual_list_viewport_binding,
    		svelte_virtual_list_viewport_elementresize_handler
    	];
    }

    class VirtualList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			items: 11,
    			height: 0,
    			itemHeight: 12,
    			hoverItemIndex: 1,
    			start: 9,
    			end: 10
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "VirtualList",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get items() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemHeight() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemHeight(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hoverItemIndex() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hoverItemIndex(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get start() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set start(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get end() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set end(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/ClearIcon.svelte generated by Svelte v3.44.3 */

    const file$7 = "node_modules/svelte-select/src/ClearIcon.svelte";

    function create_fragment$7(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill", "currentColor");
    			attr_dev(path, "d", "M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124\n    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z");
    			add_location(path, file$7, 8, 4, 141);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "-2 -2 50 50");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "role", "presentation");
    			add_location(svg, file$7, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ClearIcon', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ClearIcon> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class ClearIcon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ClearIcon",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    function debounce(func, wait, immediate) {
        let timeout;

        return function executedFunction() {
            let context = this;
            let args = arguments;

            let later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };

            let callNow = immediate && !timeout;

            clearTimeout(timeout);

            timeout = setTimeout(later, wait);

            if (callNow) func.apply(context, args);
        };
    }

    /* node_modules/svelte-select/src/Select.svelte generated by Svelte v3.44.3 */

    const { Object: Object_1, console: console_1 } = globals;
    const file$8 = "node_modules/svelte-select/src/Select.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[103] = list[i];
    	return child_ctx;
    }

    // (874:8) {#if isFocused}
    function create_if_block_10(ctx) {
    	let span0;
    	let t0;
    	let t1;
    	let span1;
    	let t2;

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			t0 = text(/*ariaSelection*/ ctx[33]);
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*ariaContext*/ ctx[32]);
    			attr_dev(span0, "id", "aria-selection");
    			add_location(span0, file$8, 874, 12, 23775);
    			attr_dev(span1, "id", "aria-context");
    			add_location(span1, file$8, 875, 12, 23836);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			append_dev(span0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span1, anchor);
    			append_dev(span1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[1] & /*ariaSelection*/ 4) set_data_dev(t0, /*ariaSelection*/ ctx[33]);
    			if (dirty[1] & /*ariaContext*/ 2) set_data_dev(t2, /*ariaContext*/ ctx[32]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(874:8) {#if isFocused}",
    		ctx
    	});

    	return block;
    }

    // (882:4) {#if Icon}
    function create_if_block_9(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*iconProps*/ ctx[18]];
    	var switch_value = /*Icon*/ ctx[17];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[0] & /*iconProps*/ 262144)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*iconProps*/ ctx[18])])
    			: {};

    			if (switch_value !== (switch_value = /*Icon*/ ctx[17])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(882:4) {#if Icon}",
    		ctx
    	});

    	return block;
    }

    // (886:4) {#if showMultiSelect}
    function create_if_block_8(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*MultiSelection*/ ctx[26];

    	function switch_props(ctx) {
    		return {
    			props: {
    				value: /*value*/ ctx[2],
    				getSelectionLabel: /*getSelectionLabel*/ ctx[12],
    				activeValue: /*activeValue*/ ctx[30],
    				isDisabled: /*isDisabled*/ ctx[9],
    				multiFullItemClearable: /*multiFullItemClearable*/ ctx[8]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		switch_instance.$on("multiItemClear", /*handleMultiItemClear*/ ctx[38]);
    		switch_instance.$on("focus", /*handleFocus*/ ctx[40]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty[0] & /*value*/ 4) switch_instance_changes.value = /*value*/ ctx[2];
    			if (dirty[0] & /*getSelectionLabel*/ 4096) switch_instance_changes.getSelectionLabel = /*getSelectionLabel*/ ctx[12];
    			if (dirty[0] & /*activeValue*/ 1073741824) switch_instance_changes.activeValue = /*activeValue*/ ctx[30];
    			if (dirty[0] & /*isDisabled*/ 512) switch_instance_changes.isDisabled = /*isDisabled*/ ctx[9];
    			if (dirty[0] & /*multiFullItemClearable*/ 256) switch_instance_changes.multiFullItemClearable = /*multiFullItemClearable*/ ctx[8];

    			if (switch_value !== (switch_value = /*MultiSelection*/ ctx[26])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					switch_instance.$on("multiItemClear", /*handleMultiItemClear*/ ctx[38]);
    					switch_instance.$on("focus", /*handleFocus*/ ctx[40]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(886:4) {#if showMultiSelect}",
    		ctx
    	});

    	return block;
    }

    // (908:4) {#if !isMulti && showSelectedItem}
    function create_if_block_7(ctx) {
    	let div;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*Selection*/ ctx[25];

    	function switch_props(ctx) {
    		return {
    			props: {
    				item: /*value*/ ctx[2],
    				getSelectionLabel: /*getSelectionLabel*/ ctx[12]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "selectedItem svelte-17l1npl");
    			add_location(div, file$8, 908, 8, 24658);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "focus", /*handleFocus*/ ctx[40], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty[0] & /*value*/ 4) switch_instance_changes.item = /*value*/ ctx[2];
    			if (dirty[0] & /*getSelectionLabel*/ 4096) switch_instance_changes.getSelectionLabel = /*getSelectionLabel*/ ctx[12];

    			if (switch_value !== (switch_value = /*Selection*/ ctx[25])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(908:4) {#if !isMulti && showSelectedItem}",
    		ctx
    	});

    	return block;
    }

    // (917:4) {#if showClearIcon}
    function create_if_block_6(ctx) {
    	let div;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*ClearIcon*/ ctx[23];

    	function switch_props(ctx) {
    		return { $$inline: true };
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "clearSelect svelte-17l1npl");
    			attr_dev(div, "aria-hidden", "true");
    			add_location(div, file$8, 917, 8, 24897);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", prevent_default(/*handleClear*/ ctx[27]), false, true, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (switch_value !== (switch_value = /*ClearIcon*/ ctx[23])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(917:4) {#if showClearIcon}",
    		ctx
    	});

    	return block;
    }

    // (926:4) {#if !showClearIcon && (showIndicator || (showChevron && !value) || (!isSearchable && !isDisabled && !isWaiting && ((showSelectedItem && !isClearable) || !showSelectedItem)))}
    function create_if_block_4(ctx) {
    	let div;

    	function select_block_type(ctx, dirty) {
    		if (/*indicatorSvg*/ ctx[22]) return create_if_block_5;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "indicator svelte-17l1npl");
    			attr_dev(div, "aria-hidden", "true");
    			add_location(div, file$8, 926, 8, 25280);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(926:4) {#if !showClearIcon && (showIndicator || (showChevron && !value) || (!isSearchable && !isDisabled && !isWaiting && ((showSelectedItem && !isClearable) || !showSelectedItem)))}",
    		ctx
    	});

    	return block;
    }

    // (930:12) {:else}
    function create_else_block$1(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747\n          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0\n          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502\n          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0\n          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z");
    			add_location(path, file$8, 936, 20, 25637);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "0 0 20 20");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "class", "svelte-17l1npl");
    			add_location(svg, file$8, 930, 16, 25427);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(930:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (928:12) {#if indicatorSvg}
    function create_if_block_5(ctx) {
    	let html_tag;
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(/*indicatorSvg*/ ctx[22], target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*indicatorSvg*/ 4194304) html_tag.p(/*indicatorSvg*/ ctx[22]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(928:12) {#if indicatorSvg}",
    		ctx
    	});

    	return block;
    }

    // (948:4) {#if isWaiting}
    function create_if_block_3(ctx) {
    	let div;
    	let svg;
    	let circle;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			circle = svg_element("circle");
    			attr_dev(circle, "class", "spinner_path svelte-17l1npl");
    			attr_dev(circle, "cx", "50");
    			attr_dev(circle, "cy", "50");
    			attr_dev(circle, "r", "20");
    			attr_dev(circle, "fill", "none");
    			attr_dev(circle, "stroke", "currentColor");
    			attr_dev(circle, "stroke-width", "5");
    			attr_dev(circle, "stroke-miterlimit", "10");
    			add_location(circle, file$8, 950, 16, 26186);
    			attr_dev(svg, "class", "spinner_icon svelte-17l1npl");
    			attr_dev(svg, "viewBox", "25 25 50 50");
    			add_location(svg, file$8, 949, 12, 26121);
    			attr_dev(div, "class", "spinner svelte-17l1npl");
    			add_location(div, file$8, 948, 8, 26087);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, circle);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(948:4) {#if isWaiting}",
    		ctx
    	});

    	return block;
    }

    // (964:4) {#if listOpen}
    function create_if_block_2$1(ctx) {
    	let switch_instance;
    	let updating_hoverItemIndex;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*listProps*/ ctx[34]];

    	function switch_instance_hoverItemIndex_binding(value) {
    		/*switch_instance_hoverItemIndex_binding*/ ctx[84](value);
    	}

    	var switch_value = /*List*/ ctx[24];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		if (/*hoverItemIndex*/ ctx[28] !== void 0) {
    			switch_instance_props.hoverItemIndex = /*hoverItemIndex*/ ctx[28];
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		binding_callbacks.push(() => bind(switch_instance, 'hoverItemIndex', switch_instance_hoverItemIndex_binding));
    		switch_instance.$on("itemSelected", /*itemSelected*/ ctx[43]);
    		switch_instance.$on("itemCreated", /*itemCreated*/ ctx[44]);
    		switch_instance.$on("closeList", /*closeList*/ ctx[45]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[1] & /*listProps*/ 8)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*listProps*/ ctx[34])])
    			: {};

    			if (!updating_hoverItemIndex && dirty[0] & /*hoverItemIndex*/ 268435456) {
    				updating_hoverItemIndex = true;
    				switch_instance_changes.hoverItemIndex = /*hoverItemIndex*/ ctx[28];
    				add_flush_callback(() => updating_hoverItemIndex = false);
    			}

    			if (switch_value !== (switch_value = /*List*/ ctx[24])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					binding_callbacks.push(() => bind(switch_instance, 'hoverItemIndex', switch_instance_hoverItemIndex_binding));
    					switch_instance.$on("itemSelected", /*itemSelected*/ ctx[43]);
    					switch_instance.$on("itemCreated", /*itemCreated*/ ctx[44]);
    					switch_instance.$on("closeList", /*closeList*/ ctx[45]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(964:4) {#if listOpen}",
    		ctx
    	});

    	return block;
    }

    // (974:4) {#if !isMulti || (isMulti && !showMultiSelect)}
    function create_if_block_1$1(ctx) {
    	let input_1;
    	let input_1_name_value;
    	let input_1_value_value;

    	const block = {
    		c: function create() {
    			input_1 = element("input");
    			attr_dev(input_1, "name", input_1_name_value = /*inputAttributes*/ ctx[16].name);
    			attr_dev(input_1, "type", "hidden");

    			input_1.value = input_1_value_value = /*value*/ ctx[2]
    			? /*getSelectionLabel*/ ctx[12](/*value*/ ctx[2])
    			: null;

    			attr_dev(input_1, "class", "svelte-17l1npl");
    			add_location(input_1, file$8, 974, 8, 26843);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*inputAttributes*/ 65536 && input_1_name_value !== (input_1_name_value = /*inputAttributes*/ ctx[16].name)) {
    				attr_dev(input_1, "name", input_1_name_value);
    			}

    			if (dirty[0] & /*value, getSelectionLabel*/ 4100 && input_1_value_value !== (input_1_value_value = /*value*/ ctx[2]
    			? /*getSelectionLabel*/ ctx[12](/*value*/ ctx[2])
    			: null)) {
    				prop_dev(input_1, "value", input_1_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(974:4) {#if !isMulti || (isMulti && !showMultiSelect)}",
    		ctx
    	});

    	return block;
    }

    // (981:4) {#if isMulti && showMultiSelect}
    function create_if_block$3(ctx) {
    	let each_1_anchor;
    	let each_value = /*value*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*inputAttributes, value, getSelectionLabel*/ 69636) {
    				each_value = /*value*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(981:4) {#if isMulti && showMultiSelect}",
    		ctx
    	});

    	return block;
    }

    // (982:8) {#each value as item}
    function create_each_block$3(ctx) {
    	let input_1;
    	let input_1_name_value;
    	let input_1_value_value;

    	const block = {
    		c: function create() {
    			input_1 = element("input");
    			attr_dev(input_1, "name", input_1_name_value = /*inputAttributes*/ ctx[16].name);
    			attr_dev(input_1, "type", "hidden");

    			input_1.value = input_1_value_value = /*item*/ ctx[103]
    			? /*getSelectionLabel*/ ctx[12](/*item*/ ctx[103])
    			: null;

    			attr_dev(input_1, "class", "svelte-17l1npl");
    			add_location(input_1, file$8, 982, 12, 27069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*inputAttributes*/ 65536 && input_1_name_value !== (input_1_name_value = /*inputAttributes*/ ctx[16].name)) {
    				attr_dev(input_1, "name", input_1_name_value);
    			}

    			if (dirty[0] & /*value, getSelectionLabel*/ 4100 && input_1_value_value !== (input_1_value_value = /*item*/ ctx[103]
    			? /*getSelectionLabel*/ ctx[12](/*item*/ ctx[103])
    			: null)) {
    				prop_dev(input_1, "value", input_1_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(982:8) {#each value as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div;
    	let span;
    	let t0;
    	let t1;
    	let t2;
    	let input_1;
    	let input_1_readonly_value;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let div_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*isFocused*/ ctx[1] && create_if_block_10(ctx);
    	let if_block1 = /*Icon*/ ctx[17] && create_if_block_9(ctx);
    	let if_block2 = /*showMultiSelect*/ ctx[35] && create_if_block_8(ctx);

    	let input_1_levels = [
    		{
    			readOnly: input_1_readonly_value = !/*isSearchable*/ ctx[13]
    		},
    		/*_inputAttributes*/ ctx[31],
    		{ placeholder: /*placeholderText*/ ctx[36] },
    		{ style: /*inputStyles*/ ctx[14] },
    		{ disabled: /*isDisabled*/ ctx[9] }
    	];

    	let input_1_data = {};

    	for (let i = 0; i < input_1_levels.length; i += 1) {
    		input_1_data = assign(input_1_data, input_1_levels[i]);
    	}

    	let if_block3 = !/*isMulti*/ ctx[7] && /*showSelectedItem*/ ctx[29] && create_if_block_7(ctx);
    	let if_block4 = /*showClearIcon*/ ctx[37] && create_if_block_6(ctx);
    	let if_block5 = !/*showClearIcon*/ ctx[37] && (/*showIndicator*/ ctx[20] || /*showChevron*/ ctx[19] && !/*value*/ ctx[2] || !/*isSearchable*/ ctx[13] && !/*isDisabled*/ ctx[9] && !/*isWaiting*/ ctx[4] && (/*showSelectedItem*/ ctx[29] && !/*isClearable*/ ctx[15] || !/*showSelectedItem*/ ctx[29])) && create_if_block_4(ctx);
    	let if_block6 = /*isWaiting*/ ctx[4] && create_if_block_3(ctx);
    	let if_block7 = /*listOpen*/ ctx[5] && create_if_block_2$1(ctx);
    	let if_block8 = (!/*isMulti*/ ctx[7] || /*isMulti*/ ctx[7] && !/*showMultiSelect*/ ctx[35]) && create_if_block_1$1(ctx);
    	let if_block9 = /*isMulti*/ ctx[7] && /*showMultiSelect*/ ctx[35] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			input_1 = element("input");
    			t3 = space();
    			if (if_block3) if_block3.c();
    			t4 = space();
    			if (if_block4) if_block4.c();
    			t5 = space();
    			if (if_block5) if_block5.c();
    			t6 = space();
    			if (if_block6) if_block6.c();
    			t7 = space();
    			if (if_block7) if_block7.c();
    			t8 = space();
    			if (if_block8) if_block8.c();
    			t9 = space();
    			if (if_block9) if_block9.c();
    			attr_dev(span, "aria-live", "polite");
    			attr_dev(span, "aria-atomic", "false");
    			attr_dev(span, "aria-relevant", "additions text");
    			attr_dev(span, "class", "a11yText svelte-17l1npl");
    			add_location(span, file$8, 868, 4, 23613);
    			set_attributes(input_1, input_1_data);
    			toggle_class(input_1, "svelte-17l1npl", true);
    			add_location(input_1, file$8, 897, 4, 24352);
    			attr_dev(div, "class", div_class_value = "selectContainer " + /*containerClasses*/ ctx[21] + " svelte-17l1npl");
    			attr_dev(div, "style", /*containerStyles*/ ctx[11]);
    			toggle_class(div, "hasError", /*hasError*/ ctx[10]);
    			toggle_class(div, "multiSelect", /*isMulti*/ ctx[7]);
    			toggle_class(div, "disabled", /*isDisabled*/ ctx[9]);
    			toggle_class(div, "focused", /*isFocused*/ ctx[1]);
    			add_location(div, file$8, 859, 0, 23362);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			if (if_block0) if_block0.m(span, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    			append_dev(div, t2);
    			append_dev(div, input_1);
    			if (input_1.autofocus) input_1.focus();
    			/*input_1_binding*/ ctx[82](input_1);
    			set_input_value(input_1, /*filterText*/ ctx[3]);
    			append_dev(div, t3);
    			if (if_block3) if_block3.m(div, null);
    			append_dev(div, t4);
    			if (if_block4) if_block4.m(div, null);
    			append_dev(div, t5);
    			if (if_block5) if_block5.m(div, null);
    			append_dev(div, t6);
    			if (if_block6) if_block6.m(div, null);
    			append_dev(div, t7);
    			if (if_block7) if_block7.m(div, null);
    			append_dev(div, t8);
    			if (if_block8) if_block8.m(div, null);
    			append_dev(div, t9);
    			if (if_block9) if_block9.m(div, null);
    			/*div_binding*/ ctx[85](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "click", /*handleWindowEvent*/ ctx[41], false, false, false),
    					listen_dev(window, "focusin", /*handleWindowEvent*/ ctx[41], false, false, false),
    					listen_dev(window, "keydown", /*handleKeyDown*/ ctx[39], false, false, false),
    					listen_dev(input_1, "focus", /*handleFocus*/ ctx[40], false, false, false),
    					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[83]),
    					listen_dev(div, "click", /*handleClick*/ ctx[42], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*isFocused*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_10(ctx);
    					if_block0.c();
    					if_block0.m(span, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*Icon*/ ctx[17]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*Icon*/ 131072) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_9(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*showMultiSelect*/ ctx[35]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[1] & /*showMultiSelect*/ 16) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_8(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, t2);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			set_attributes(input_1, input_1_data = get_spread_update(input_1_levels, [
    				(!current || dirty[0] & /*isSearchable*/ 8192 && input_1_readonly_value !== (input_1_readonly_value = !/*isSearchable*/ ctx[13])) && { readOnly: input_1_readonly_value },
    				dirty[1] & /*_inputAttributes*/ 1 && /*_inputAttributes*/ ctx[31],
    				(!current || dirty[1] & /*placeholderText*/ 32) && { placeholder: /*placeholderText*/ ctx[36] },
    				(!current || dirty[0] & /*inputStyles*/ 16384) && { style: /*inputStyles*/ ctx[14] },
    				(!current || dirty[0] & /*isDisabled*/ 512) && { disabled: /*isDisabled*/ ctx[9] }
    			]));

    			if (dirty[0] & /*filterText*/ 8 && input_1.value !== /*filterText*/ ctx[3]) {
    				set_input_value(input_1, /*filterText*/ ctx[3]);
    			}

    			toggle_class(input_1, "svelte-17l1npl", true);

    			if (!/*isMulti*/ ctx[7] && /*showSelectedItem*/ ctx[29]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*isMulti, showSelectedItem*/ 536871040) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_7(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div, t4);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*showClearIcon*/ ctx[37]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty[1] & /*showClearIcon*/ 64) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_6(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div, t5);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (!/*showClearIcon*/ ctx[37] && (/*showIndicator*/ ctx[20] || /*showChevron*/ ctx[19] && !/*value*/ ctx[2] || !/*isSearchable*/ ctx[13] && !/*isDisabled*/ ctx[9] && !/*isWaiting*/ ctx[4] && (/*showSelectedItem*/ ctx[29] && !/*isClearable*/ ctx[15] || !/*showSelectedItem*/ ctx[29]))) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_4(ctx);
    					if_block5.c();
    					if_block5.m(div, t6);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*isWaiting*/ ctx[4]) {
    				if (if_block6) ; else {
    					if_block6 = create_if_block_3(ctx);
    					if_block6.c();
    					if_block6.m(div, t7);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*listOpen*/ ctx[5]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);

    					if (dirty[0] & /*listOpen*/ 32) {
    						transition_in(if_block7, 1);
    					}
    				} else {
    					if_block7 = create_if_block_2$1(ctx);
    					if_block7.c();
    					transition_in(if_block7, 1);
    					if_block7.m(div, t8);
    				}
    			} else if (if_block7) {
    				group_outros();

    				transition_out(if_block7, 1, 1, () => {
    					if_block7 = null;
    				});

    				check_outros();
    			}

    			if (!/*isMulti*/ ctx[7] || /*isMulti*/ ctx[7] && !/*showMultiSelect*/ ctx[35]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_1$1(ctx);
    					if_block8.c();
    					if_block8.m(div, t9);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*isMulti*/ ctx[7] && /*showMultiSelect*/ ctx[35]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block$3(ctx);
    					if_block9.c();
    					if_block9.m(div, null);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (!current || dirty[0] & /*containerClasses*/ 2097152 && div_class_value !== (div_class_value = "selectContainer " + /*containerClasses*/ ctx[21] + " svelte-17l1npl")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty[0] & /*containerStyles*/ 2048) {
    				attr_dev(div, "style", /*containerStyles*/ ctx[11]);
    			}

    			if (dirty[0] & /*containerClasses, hasError*/ 2098176) {
    				toggle_class(div, "hasError", /*hasError*/ ctx[10]);
    			}

    			if (dirty[0] & /*containerClasses, isMulti*/ 2097280) {
    				toggle_class(div, "multiSelect", /*isMulti*/ ctx[7]);
    			}

    			if (dirty[0] & /*containerClasses, isDisabled*/ 2097664) {
    				toggle_class(div, "disabled", /*isDisabled*/ ctx[9]);
    			}

    			if (dirty[0] & /*containerClasses, isFocused*/ 2097154) {
    				toggle_class(div, "focused", /*isFocused*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(if_block7);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(if_block7);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			/*input_1_binding*/ ctx[82](null);
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (if_block6) if_block6.d();
    			if (if_block7) if_block7.d();
    			if (if_block8) if_block8.d();
    			if (if_block9) if_block9.d();
    			/*div_binding*/ ctx[85](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function convertStringItemsToObjects(_items) {
    	return _items.map((item, index) => {
    		return { index, value: item, label: `${item}` };
    	});
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let filteredItems;
    	let showSelectedItem;
    	let showClearIcon;
    	let placeholderText;
    	let showMultiSelect;
    	let listProps;
    	let ariaSelection;
    	let ariaContext;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Select', slots, []);
    	const dispatch = createEventDispatcher();
    	let { id = null } = $$props;
    	let { container = undefined } = $$props;
    	let { input = undefined } = $$props;
    	let { isMulti = false } = $$props;
    	let { multiFullItemClearable = false } = $$props;
    	let { isDisabled = false } = $$props;
    	let { isCreatable = false } = $$props;
    	let { isFocused = false } = $$props;
    	let { value = null } = $$props;
    	let { filterText = '' } = $$props;
    	let { placeholder = 'Select...' } = $$props;
    	let { placeholderAlwaysShow = false } = $$props;
    	let { items = null } = $$props;
    	let { itemFilter = (label, filterText, option) => `${label}`.toLowerCase().includes(filterText.toLowerCase()) } = $$props;
    	let { groupBy = undefined } = $$props;
    	let { groupFilter = groups => groups } = $$props;
    	let { isGroupHeaderSelectable = false } = $$props;

    	let { getGroupHeaderLabel = option => {
    		return option[labelIdentifier] || option.id;
    	} } = $$props;

    	let { labelIdentifier = 'label' } = $$props;

    	let { getOptionLabel = (option, filterText) => {
    		return option.isCreator
    		? `Create \"${filterText}\"`
    		: option[labelIdentifier];
    	} } = $$props;

    	let { optionIdentifier = 'value' } = $$props;
    	let { loadOptions = undefined } = $$props;
    	let { hasError = false } = $$props;
    	let { containerStyles = '' } = $$props;

    	let { getSelectionLabel = option => {
    		if (option) return option[labelIdentifier]; else return null;
    	} } = $$props;

    	let { createGroupHeaderItem = groupValue => {
    		return { value: groupValue, label: groupValue };
    	} } = $$props;

    	let { createItem = filterText => {
    		return { value: filterText, label: filterText };
    	} } = $$props;

    	const getFilteredItems = () => {
    		return filteredItems;
    	};

    	let { isSearchable = true } = $$props;
    	let { inputStyles = '' } = $$props;
    	let { isClearable = true } = $$props;
    	let { isWaiting = false } = $$props;
    	let { listPlacement = 'auto' } = $$props;
    	let { listOpen = false } = $$props;
    	let { isVirtualList = false } = $$props;
    	let { loadOptionsInterval = 300 } = $$props;
    	let { noOptionsMessage = 'No options' } = $$props;
    	let { hideEmptyState = false } = $$props;
    	let { inputAttributes = {} } = $$props;
    	let { listAutoWidth = true } = $$props;
    	let { itemHeight = 40 } = $$props;
    	let { Icon = undefined } = $$props;
    	let { iconProps = {} } = $$props;
    	let { showChevron = false } = $$props;
    	let { showIndicator = false } = $$props;
    	let { containerClasses = '' } = $$props;
    	let { indicatorSvg = undefined } = $$props;
    	let { listOffset = 5 } = $$props;
    	let { ClearIcon: ClearIcon$1 = ClearIcon } = $$props;
    	let { Item: Item$1 = Item } = $$props;
    	let { List: List$1 = List } = $$props;
    	let { Selection: Selection$1 = Selection } = $$props;
    	let { MultiSelection: MultiSelection$1 = MultiSelection } = $$props;
    	let { VirtualList: VirtualList$1 = VirtualList } = $$props;

    	function filterMethod(args) {
    		if (args.loadOptions && args.filterText.length > 0) return;
    		if (!args.items) return [];

    		if (args.items && args.items.length > 0 && typeof args.items[0] !== 'object') {
    			args.items = convertStringItemsToObjects(args.items);
    		}

    		let filterResults = args.items.filter(item => {
    			let matchesFilter = itemFilter(getOptionLabel(item, args.filterText), args.filterText, item);

    			if (matchesFilter && args.isMulti && args.value && Array.isArray(args.value)) {
    				matchesFilter = !args.value.some(x => {
    					return x[args.optionIdentifier] === item[args.optionIdentifier];
    				});
    			}

    			return matchesFilter;
    		});

    		if (args.groupBy) {
    			filterResults = filterGroupedItems(filterResults);
    		}

    		if (args.isCreatable) {
    			filterResults = addCreatableItem(filterResults, args.filterText);
    		}

    		return filterResults;
    	}

    	function addCreatableItem(_items, _filterText) {
    		if (_filterText.length === 0) return _items;
    		const itemToCreate = createItem(_filterText);
    		if (_items[0] && _filterText === _items[0][labelIdentifier]) return _items;
    		itemToCreate.isCreator = true;
    		return [..._items, itemToCreate];
    	}

    	let { selectedValue = null } = $$props;
    	let activeValue;
    	let prev_value;
    	let prev_filterText;
    	let prev_isFocused;
    	let prev_isMulti;
    	let hoverItemIndex;

    	const getItems = debounce(
    		async () => {
    			$$invalidate(4, isWaiting = true);

    			let res = await loadOptions(filterText).catch(err => {
    				console.warn('svelte-select loadOptions error :>> ', err);
    				dispatch('error', { type: 'loadOptions', details: err });
    			});

    			if (res && !res.cancelled) {
    				if (res) {
    					if (res && res.length > 0 && typeof res[0] !== 'object') {
    						res = convertStringItemsToObjects(res);
    					}

    					$$invalidate(81, filteredItems = [...res]);
    					dispatch('loaded', { items: filteredItems });
    				} else {
    					$$invalidate(81, filteredItems = []);
    				}

    				if (isCreatable) {
    					$$invalidate(81, filteredItems = addCreatableItem(filteredItems, filterText));
    				}

    				$$invalidate(4, isWaiting = false);
    				$$invalidate(1, isFocused = true);
    				$$invalidate(5, listOpen = true);
    			}
    		},
    		loadOptionsInterval
    	);

    	function setValue() {
    		if (typeof value === 'string') {
    			$$invalidate(2, value = { [optionIdentifier]: value, label: value });
    		} else if (isMulti && Array.isArray(value) && value.length > 0) {
    			$$invalidate(2, value = value.map(item => typeof item === 'string'
    			? { value: item, label: item }
    			: item));
    		}
    	}

    	let _inputAttributes;

    	function assignInputAttributes() {
    		$$invalidate(31, _inputAttributes = Object.assign(
    			{
    				autocapitalize: 'none',
    				autocomplete: 'off',
    				autocorrect: 'off',
    				spellcheck: false,
    				tabindex: 0,
    				type: 'text',
    				'aria-autocomplete': 'list'
    			},
    			inputAttributes
    		));

    		if (id) {
    			$$invalidate(31, _inputAttributes.id = id, _inputAttributes);
    		}

    		if (!isSearchable) {
    			$$invalidate(31, _inputAttributes.readonly = true, _inputAttributes);
    		}
    	}

    	function filterGroupedItems(_items) {
    		const groupValues = [];
    		const groups = {};

    		_items.forEach(item => {
    			const groupValue = groupBy(item);

    			if (!groupValues.includes(groupValue)) {
    				groupValues.push(groupValue);
    				groups[groupValue] = [];

    				if (groupValue) {
    					groups[groupValue].push(Object.assign(createGroupHeaderItem(groupValue, item), {
    						id: groupValue,
    						isGroupHeader: true,
    						isSelectable: isGroupHeaderSelectable
    					}));
    				}
    			}

    			groups[groupValue].push(Object.assign({ isGroupItem: !!groupValue }, item));
    		});

    		const sortedGroupedItems = [];

    		groupFilter(groupValues).forEach(groupValue => {
    			sortedGroupedItems.push(...groups[groupValue]);
    		});

    		return sortedGroupedItems;
    	}

    	function dispatchSelectedItem() {
    		if (isMulti) {
    			if (JSON.stringify(value) !== JSON.stringify(prev_value)) {
    				if (checkValueForDuplicates()) {
    					dispatch('select', value);
    				}
    			}

    			return;
    		}

    		if (!prev_value || JSON.stringify(value[optionIdentifier]) !== JSON.stringify(prev_value[optionIdentifier])) {
    			dispatch('select', value);
    		}
    	}

    	function setupFocus() {
    		if (isFocused || listOpen) {
    			handleFocus();
    		} else {
    			if (input) input.blur();
    		}
    	}

    	function setupMulti() {
    		if (value) {
    			if (Array.isArray(value)) {
    				$$invalidate(2, value = [...value]);
    			} else {
    				$$invalidate(2, value = [value]);
    			}
    		}
    	}

    	function setupSingle() {
    		if (value) $$invalidate(2, value = null);
    	}

    	function setupFilterText() {
    		if (filterText.length === 0) return;
    		$$invalidate(1, isFocused = true);
    		$$invalidate(5, listOpen = true);

    		if (loadOptions) {
    			getItems();
    		} else {
    			$$invalidate(5, listOpen = true);

    			if (isMulti) {
    				$$invalidate(30, activeValue = undefined);
    			}
    		}
    	}

    	beforeUpdate(async () => {
    		$$invalidate(77, prev_value = value);
    		$$invalidate(78, prev_filterText = filterText);
    		$$invalidate(79, prev_isFocused = isFocused);
    		$$invalidate(80, prev_isMulti = isMulti);
    	});

    	function checkValueForDuplicates() {
    		let noDuplicates = true;

    		if (value) {
    			const ids = [];
    			const uniqueValues = [];

    			value.forEach(val => {
    				if (!ids.includes(val[optionIdentifier])) {
    					ids.push(val[optionIdentifier]);
    					uniqueValues.push(val);
    				} else {
    					noDuplicates = false;
    				}
    			});

    			if (!noDuplicates) $$invalidate(2, value = uniqueValues);
    		}

    		return noDuplicates;
    	}

    	function findItem(selection) {
    		let matchTo = selection
    		? selection[optionIdentifier]
    		: value[optionIdentifier];

    		return items.find(item => item[optionIdentifier] === matchTo);
    	}

    	function updateValueDisplay(items) {
    		if (!items || items.length === 0 || items.some(item => typeof item !== 'object')) return;

    		if (!value || (isMulti
    		? value.some(selection => !selection || !selection[optionIdentifier])
    		: !value[optionIdentifier])) return;

    		if (Array.isArray(value)) {
    			$$invalidate(2, value = value.map(selection => findItem(selection) || selection));
    		} else {
    			$$invalidate(2, value = findItem() || value);
    		}
    	}

    	function handleMultiItemClear(event) {
    		const { detail } = event;
    		const itemToRemove = value[detail ? detail.i : value.length - 1];

    		if (value.length === 1) {
    			$$invalidate(2, value = undefined);
    		} else {
    			$$invalidate(2, value = value.filter(item => {
    				return item !== itemToRemove;
    			}));
    		}

    		dispatch('clear', itemToRemove);
    	}

    	function handleKeyDown(e) {
    		if (!isFocused) return;

    		switch (e.key) {
    			case 'ArrowDown':
    				e.preventDefault();
    				$$invalidate(5, listOpen = true);
    				$$invalidate(30, activeValue = undefined);
    				break;
    			case 'ArrowUp':
    				e.preventDefault();
    				$$invalidate(5, listOpen = true);
    				$$invalidate(30, activeValue = undefined);
    				break;
    			case 'Tab':
    				if (!listOpen) $$invalidate(1, isFocused = false);
    				break;
    			case 'Backspace':
    				if (!isMulti || filterText.length > 0) return;
    				if (isMulti && value && value.length > 0) {
    					handleMultiItemClear(activeValue !== undefined
    					? activeValue
    					: value.length - 1);

    					if (activeValue === 0 || activeValue === undefined) break;
    					$$invalidate(30, activeValue = value.length > activeValue ? activeValue - 1 : undefined);
    				}
    				break;
    			case 'ArrowLeft':
    				if (!isMulti || filterText.length > 0) return;
    				if (activeValue === undefined) {
    					$$invalidate(30, activeValue = value.length - 1);
    				} else if (value.length > activeValue && activeValue !== 0) {
    					$$invalidate(30, activeValue -= 1);
    				}
    				break;
    			case 'ArrowRight':
    				if (!isMulti || filterText.length > 0 || activeValue === undefined) return;
    				if (activeValue === value.length - 1) {
    					$$invalidate(30, activeValue = undefined);
    				} else if (activeValue < value.length - 1) {
    					$$invalidate(30, activeValue += 1);
    				}
    				break;
    		}
    	}

    	function handleFocus() {
    		$$invalidate(1, isFocused = true);
    		if (input) input.focus();
    	}

    	function handleWindowEvent(event) {
    		if (!container) return;

    		const eventTarget = event.path && event.path.length > 0
    		? event.path[0]
    		: event.target;

    		if (container.contains(eventTarget)) return;
    		$$invalidate(1, isFocused = false);
    		$$invalidate(5, listOpen = false);
    		$$invalidate(30, activeValue = undefined);
    		if (input) input.blur();
    	}

    	function handleClick() {
    		if (isDisabled) return;
    		$$invalidate(1, isFocused = true);
    		$$invalidate(5, listOpen = !listOpen);
    	}

    	function handleClear() {
    		$$invalidate(2, value = undefined);
    		$$invalidate(5, listOpen = false);
    		dispatch('clear', value);
    		handleFocus();
    	}

    	onMount(() => {
    		if (isFocused && input) input.focus();
    	});

    	function itemSelected(event) {
    		const { detail } = event;

    		if (detail) {
    			$$invalidate(3, filterText = '');
    			const item = Object.assign({}, detail);

    			if (!item.isGroupHeader || item.isSelectable) {
    				if (isMulti) {
    					$$invalidate(2, value = value ? value.concat([item]) : [item]);
    				} else {
    					$$invalidate(2, value = item);
    				}

    				$$invalidate(2, value);

    				setTimeout(() => {
    					$$invalidate(5, listOpen = false);
    					$$invalidate(30, activeValue = undefined);
    				});
    			}
    		}
    	}

    	function itemCreated(event) {
    		const { detail } = event;

    		if (isMulti) {
    			$$invalidate(2, value = value || []);
    			$$invalidate(2, value = [...value, createItem(detail)]);
    		} else {
    			$$invalidate(2, value = createItem(detail));
    		}

    		dispatch('itemCreated', detail);
    		$$invalidate(3, filterText = '');
    		$$invalidate(5, listOpen = false);
    		$$invalidate(30, activeValue = undefined);
    	}

    	function closeList() {
    		$$invalidate(3, filterText = '');
    		$$invalidate(5, listOpen = false);
    	}

    	let { ariaValues = values => {
    		return `Option ${values}, selected.`;
    	} } = $$props;

    	let { ariaListOpen = (label, count) => {
    		return `You are currently focused on option ${label}. There are ${count} results available.`;
    	} } = $$props;

    	let { ariaFocused = () => {
    		return `Select is focused, type to refine list, press down to open the menu.`;
    	} } = $$props;

    	function handleAriaSelection() {
    		let selected = undefined;

    		if (isMulti && value.length > 0) {
    			selected = value.map(v => getSelectionLabel(v)).join(', ');
    		} else {
    			selected = getSelectionLabel(value);
    		}

    		return ariaValues(selected);
    	}

    	function handleAriaContent() {
    		if (!isFocused || !filteredItems || filteredItems.length === 0) return '';
    		let _item = filteredItems[hoverItemIndex];

    		if (listOpen && _item) {
    			let label = getSelectionLabel(_item);
    			let count = filteredItems ? filteredItems.length : 0;
    			return ariaListOpen(label, count);
    		} else {
    			return ariaFocused();
    		}
    	}

    	const writable_props = [
    		'id',
    		'container',
    		'input',
    		'isMulti',
    		'multiFullItemClearable',
    		'isDisabled',
    		'isCreatable',
    		'isFocused',
    		'value',
    		'filterText',
    		'placeholder',
    		'placeholderAlwaysShow',
    		'items',
    		'itemFilter',
    		'groupBy',
    		'groupFilter',
    		'isGroupHeaderSelectable',
    		'getGroupHeaderLabel',
    		'labelIdentifier',
    		'getOptionLabel',
    		'optionIdentifier',
    		'loadOptions',
    		'hasError',
    		'containerStyles',
    		'getSelectionLabel',
    		'createGroupHeaderItem',
    		'createItem',
    		'isSearchable',
    		'inputStyles',
    		'isClearable',
    		'isWaiting',
    		'listPlacement',
    		'listOpen',
    		'isVirtualList',
    		'loadOptionsInterval',
    		'noOptionsMessage',
    		'hideEmptyState',
    		'inputAttributes',
    		'listAutoWidth',
    		'itemHeight',
    		'Icon',
    		'iconProps',
    		'showChevron',
    		'showIndicator',
    		'containerClasses',
    		'indicatorSvg',
    		'listOffset',
    		'ClearIcon',
    		'Item',
    		'List',
    		'Selection',
    		'MultiSelection',
    		'VirtualList',
    		'selectedValue',
    		'ariaValues',
    		'ariaListOpen',
    		'ariaFocused'
    	];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Select> was created with unknown prop '${key}'`);
    	});

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(6, input);
    		});
    	}

    	function input_1_input_handler() {
    		filterText = this.value;
    		$$invalidate(3, filterText);
    	}

    	function switch_instance_hoverItemIndex_binding(value) {
    		hoverItemIndex = value;
    		$$invalidate(28, hoverItemIndex);
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(0, container);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(46, id = $$props.id);
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('input' in $$props) $$invalidate(6, input = $$props.input);
    		if ('isMulti' in $$props) $$invalidate(7, isMulti = $$props.isMulti);
    		if ('multiFullItemClearable' in $$props) $$invalidate(8, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('isDisabled' in $$props) $$invalidate(9, isDisabled = $$props.isDisabled);
    		if ('isCreatable' in $$props) $$invalidate(47, isCreatable = $$props.isCreatable);
    		if ('isFocused' in $$props) $$invalidate(1, isFocused = $$props.isFocused);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('filterText' in $$props) $$invalidate(3, filterText = $$props.filterText);
    		if ('placeholder' in $$props) $$invalidate(48, placeholder = $$props.placeholder);
    		if ('placeholderAlwaysShow' in $$props) $$invalidate(49, placeholderAlwaysShow = $$props.placeholderAlwaysShow);
    		if ('items' in $$props) $$invalidate(50, items = $$props.items);
    		if ('itemFilter' in $$props) $$invalidate(51, itemFilter = $$props.itemFilter);
    		if ('groupBy' in $$props) $$invalidate(52, groupBy = $$props.groupBy);
    		if ('groupFilter' in $$props) $$invalidate(53, groupFilter = $$props.groupFilter);
    		if ('isGroupHeaderSelectable' in $$props) $$invalidate(54, isGroupHeaderSelectable = $$props.isGroupHeaderSelectable);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(55, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('labelIdentifier' in $$props) $$invalidate(56, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(57, getOptionLabel = $$props.getOptionLabel);
    		if ('optionIdentifier' in $$props) $$invalidate(58, optionIdentifier = $$props.optionIdentifier);
    		if ('loadOptions' in $$props) $$invalidate(59, loadOptions = $$props.loadOptions);
    		if ('hasError' in $$props) $$invalidate(10, hasError = $$props.hasError);
    		if ('containerStyles' in $$props) $$invalidate(11, containerStyles = $$props.containerStyles);
    		if ('getSelectionLabel' in $$props) $$invalidate(12, getSelectionLabel = $$props.getSelectionLabel);
    		if ('createGroupHeaderItem' in $$props) $$invalidate(60, createGroupHeaderItem = $$props.createGroupHeaderItem);
    		if ('createItem' in $$props) $$invalidate(61, createItem = $$props.createItem);
    		if ('isSearchable' in $$props) $$invalidate(13, isSearchable = $$props.isSearchable);
    		if ('inputStyles' in $$props) $$invalidate(14, inputStyles = $$props.inputStyles);
    		if ('isClearable' in $$props) $$invalidate(15, isClearable = $$props.isClearable);
    		if ('isWaiting' in $$props) $$invalidate(4, isWaiting = $$props.isWaiting);
    		if ('listPlacement' in $$props) $$invalidate(63, listPlacement = $$props.listPlacement);
    		if ('listOpen' in $$props) $$invalidate(5, listOpen = $$props.listOpen);
    		if ('isVirtualList' in $$props) $$invalidate(64, isVirtualList = $$props.isVirtualList);
    		if ('loadOptionsInterval' in $$props) $$invalidate(65, loadOptionsInterval = $$props.loadOptionsInterval);
    		if ('noOptionsMessage' in $$props) $$invalidate(66, noOptionsMessage = $$props.noOptionsMessage);
    		if ('hideEmptyState' in $$props) $$invalidate(67, hideEmptyState = $$props.hideEmptyState);
    		if ('inputAttributes' in $$props) $$invalidate(16, inputAttributes = $$props.inputAttributes);
    		if ('listAutoWidth' in $$props) $$invalidate(68, listAutoWidth = $$props.listAutoWidth);
    		if ('itemHeight' in $$props) $$invalidate(69, itemHeight = $$props.itemHeight);
    		if ('Icon' in $$props) $$invalidate(17, Icon = $$props.Icon);
    		if ('iconProps' in $$props) $$invalidate(18, iconProps = $$props.iconProps);
    		if ('showChevron' in $$props) $$invalidate(19, showChevron = $$props.showChevron);
    		if ('showIndicator' in $$props) $$invalidate(20, showIndicator = $$props.showIndicator);
    		if ('containerClasses' in $$props) $$invalidate(21, containerClasses = $$props.containerClasses);
    		if ('indicatorSvg' in $$props) $$invalidate(22, indicatorSvg = $$props.indicatorSvg);
    		if ('listOffset' in $$props) $$invalidate(70, listOffset = $$props.listOffset);
    		if ('ClearIcon' in $$props) $$invalidate(23, ClearIcon$1 = $$props.ClearIcon);
    		if ('Item' in $$props) $$invalidate(71, Item$1 = $$props.Item);
    		if ('List' in $$props) $$invalidate(24, List$1 = $$props.List);
    		if ('Selection' in $$props) $$invalidate(25, Selection$1 = $$props.Selection);
    		if ('MultiSelection' in $$props) $$invalidate(26, MultiSelection$1 = $$props.MultiSelection);
    		if ('VirtualList' in $$props) $$invalidate(72, VirtualList$1 = $$props.VirtualList);
    		if ('selectedValue' in $$props) $$invalidate(73, selectedValue = $$props.selectedValue);
    		if ('ariaValues' in $$props) $$invalidate(74, ariaValues = $$props.ariaValues);
    		if ('ariaListOpen' in $$props) $$invalidate(75, ariaListOpen = $$props.ariaListOpen);
    		if ('ariaFocused' in $$props) $$invalidate(76, ariaFocused = $$props.ariaFocused);
    	};

    	$$self.$capture_state = () => ({
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		_List: List,
    		_Item: Item,
    		_Selection: Selection,
    		_MultiSelection: MultiSelection,
    		_VirtualList: VirtualList,
    		_ClearIcon: ClearIcon,
    		debounce,
    		dispatch,
    		id,
    		container,
    		input,
    		isMulti,
    		multiFullItemClearable,
    		isDisabled,
    		isCreatable,
    		isFocused,
    		value,
    		filterText,
    		placeholder,
    		placeholderAlwaysShow,
    		items,
    		itemFilter,
    		groupBy,
    		groupFilter,
    		isGroupHeaderSelectable,
    		getGroupHeaderLabel,
    		labelIdentifier,
    		getOptionLabel,
    		optionIdentifier,
    		loadOptions,
    		hasError,
    		containerStyles,
    		getSelectionLabel,
    		createGroupHeaderItem,
    		createItem,
    		getFilteredItems,
    		isSearchable,
    		inputStyles,
    		isClearable,
    		isWaiting,
    		listPlacement,
    		listOpen,
    		isVirtualList,
    		loadOptionsInterval,
    		noOptionsMessage,
    		hideEmptyState,
    		inputAttributes,
    		listAutoWidth,
    		itemHeight,
    		Icon,
    		iconProps,
    		showChevron,
    		showIndicator,
    		containerClasses,
    		indicatorSvg,
    		listOffset,
    		ClearIcon: ClearIcon$1,
    		Item: Item$1,
    		List: List$1,
    		Selection: Selection$1,
    		MultiSelection: MultiSelection$1,
    		VirtualList: VirtualList$1,
    		filterMethod,
    		addCreatableItem,
    		selectedValue,
    		activeValue,
    		prev_value,
    		prev_filterText,
    		prev_isFocused,
    		prev_isMulti,
    		hoverItemIndex,
    		getItems,
    		setValue,
    		_inputAttributes,
    		assignInputAttributes,
    		convertStringItemsToObjects,
    		filterGroupedItems,
    		dispatchSelectedItem,
    		setupFocus,
    		setupMulti,
    		setupSingle,
    		setupFilterText,
    		checkValueForDuplicates,
    		findItem,
    		updateValueDisplay,
    		handleMultiItemClear,
    		handleKeyDown,
    		handleFocus,
    		handleWindowEvent,
    		handleClick,
    		handleClear,
    		itemSelected,
    		itemCreated,
    		closeList,
    		ariaValues,
    		ariaListOpen,
    		ariaFocused,
    		handleAriaSelection,
    		handleAriaContent,
    		filteredItems,
    		ariaContext,
    		ariaSelection,
    		listProps,
    		showMultiSelect,
    		placeholderText,
    		showSelectedItem,
    		showClearIcon
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(46, id = $$props.id);
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('input' in $$props) $$invalidate(6, input = $$props.input);
    		if ('isMulti' in $$props) $$invalidate(7, isMulti = $$props.isMulti);
    		if ('multiFullItemClearable' in $$props) $$invalidate(8, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('isDisabled' in $$props) $$invalidate(9, isDisabled = $$props.isDisabled);
    		if ('isCreatable' in $$props) $$invalidate(47, isCreatable = $$props.isCreatable);
    		if ('isFocused' in $$props) $$invalidate(1, isFocused = $$props.isFocused);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('filterText' in $$props) $$invalidate(3, filterText = $$props.filterText);
    		if ('placeholder' in $$props) $$invalidate(48, placeholder = $$props.placeholder);
    		if ('placeholderAlwaysShow' in $$props) $$invalidate(49, placeholderAlwaysShow = $$props.placeholderAlwaysShow);
    		if ('items' in $$props) $$invalidate(50, items = $$props.items);
    		if ('itemFilter' in $$props) $$invalidate(51, itemFilter = $$props.itemFilter);
    		if ('groupBy' in $$props) $$invalidate(52, groupBy = $$props.groupBy);
    		if ('groupFilter' in $$props) $$invalidate(53, groupFilter = $$props.groupFilter);
    		if ('isGroupHeaderSelectable' in $$props) $$invalidate(54, isGroupHeaderSelectable = $$props.isGroupHeaderSelectable);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(55, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('labelIdentifier' in $$props) $$invalidate(56, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(57, getOptionLabel = $$props.getOptionLabel);
    		if ('optionIdentifier' in $$props) $$invalidate(58, optionIdentifier = $$props.optionIdentifier);
    		if ('loadOptions' in $$props) $$invalidate(59, loadOptions = $$props.loadOptions);
    		if ('hasError' in $$props) $$invalidate(10, hasError = $$props.hasError);
    		if ('containerStyles' in $$props) $$invalidate(11, containerStyles = $$props.containerStyles);
    		if ('getSelectionLabel' in $$props) $$invalidate(12, getSelectionLabel = $$props.getSelectionLabel);
    		if ('createGroupHeaderItem' in $$props) $$invalidate(60, createGroupHeaderItem = $$props.createGroupHeaderItem);
    		if ('createItem' in $$props) $$invalidate(61, createItem = $$props.createItem);
    		if ('isSearchable' in $$props) $$invalidate(13, isSearchable = $$props.isSearchable);
    		if ('inputStyles' in $$props) $$invalidate(14, inputStyles = $$props.inputStyles);
    		if ('isClearable' in $$props) $$invalidate(15, isClearable = $$props.isClearable);
    		if ('isWaiting' in $$props) $$invalidate(4, isWaiting = $$props.isWaiting);
    		if ('listPlacement' in $$props) $$invalidate(63, listPlacement = $$props.listPlacement);
    		if ('listOpen' in $$props) $$invalidate(5, listOpen = $$props.listOpen);
    		if ('isVirtualList' in $$props) $$invalidate(64, isVirtualList = $$props.isVirtualList);
    		if ('loadOptionsInterval' in $$props) $$invalidate(65, loadOptionsInterval = $$props.loadOptionsInterval);
    		if ('noOptionsMessage' in $$props) $$invalidate(66, noOptionsMessage = $$props.noOptionsMessage);
    		if ('hideEmptyState' in $$props) $$invalidate(67, hideEmptyState = $$props.hideEmptyState);
    		if ('inputAttributes' in $$props) $$invalidate(16, inputAttributes = $$props.inputAttributes);
    		if ('listAutoWidth' in $$props) $$invalidate(68, listAutoWidth = $$props.listAutoWidth);
    		if ('itemHeight' in $$props) $$invalidate(69, itemHeight = $$props.itemHeight);
    		if ('Icon' in $$props) $$invalidate(17, Icon = $$props.Icon);
    		if ('iconProps' in $$props) $$invalidate(18, iconProps = $$props.iconProps);
    		if ('showChevron' in $$props) $$invalidate(19, showChevron = $$props.showChevron);
    		if ('showIndicator' in $$props) $$invalidate(20, showIndicator = $$props.showIndicator);
    		if ('containerClasses' in $$props) $$invalidate(21, containerClasses = $$props.containerClasses);
    		if ('indicatorSvg' in $$props) $$invalidate(22, indicatorSvg = $$props.indicatorSvg);
    		if ('listOffset' in $$props) $$invalidate(70, listOffset = $$props.listOffset);
    		if ('ClearIcon' in $$props) $$invalidate(23, ClearIcon$1 = $$props.ClearIcon);
    		if ('Item' in $$props) $$invalidate(71, Item$1 = $$props.Item);
    		if ('List' in $$props) $$invalidate(24, List$1 = $$props.List);
    		if ('Selection' in $$props) $$invalidate(25, Selection$1 = $$props.Selection);
    		if ('MultiSelection' in $$props) $$invalidate(26, MultiSelection$1 = $$props.MultiSelection);
    		if ('VirtualList' in $$props) $$invalidate(72, VirtualList$1 = $$props.VirtualList);
    		if ('selectedValue' in $$props) $$invalidate(73, selectedValue = $$props.selectedValue);
    		if ('activeValue' in $$props) $$invalidate(30, activeValue = $$props.activeValue);
    		if ('prev_value' in $$props) $$invalidate(77, prev_value = $$props.prev_value);
    		if ('prev_filterText' in $$props) $$invalidate(78, prev_filterText = $$props.prev_filterText);
    		if ('prev_isFocused' in $$props) $$invalidate(79, prev_isFocused = $$props.prev_isFocused);
    		if ('prev_isMulti' in $$props) $$invalidate(80, prev_isMulti = $$props.prev_isMulti);
    		if ('hoverItemIndex' in $$props) $$invalidate(28, hoverItemIndex = $$props.hoverItemIndex);
    		if ('_inputAttributes' in $$props) $$invalidate(31, _inputAttributes = $$props._inputAttributes);
    		if ('ariaValues' in $$props) $$invalidate(74, ariaValues = $$props.ariaValues);
    		if ('ariaListOpen' in $$props) $$invalidate(75, ariaListOpen = $$props.ariaListOpen);
    		if ('ariaFocused' in $$props) $$invalidate(76, ariaFocused = $$props.ariaFocused);
    		if ('filteredItems' in $$props) $$invalidate(81, filteredItems = $$props.filteredItems);
    		if ('ariaContext' in $$props) $$invalidate(32, ariaContext = $$props.ariaContext);
    		if ('ariaSelection' in $$props) $$invalidate(33, ariaSelection = $$props.ariaSelection);
    		if ('listProps' in $$props) $$invalidate(34, listProps = $$props.listProps);
    		if ('showMultiSelect' in $$props) $$invalidate(35, showMultiSelect = $$props.showMultiSelect);
    		if ('placeholderText' in $$props) $$invalidate(36, placeholderText = $$props.placeholderText);
    		if ('showSelectedItem' in $$props) $$invalidate(29, showSelectedItem = $$props.showSelectedItem);
    		if ('showClearIcon' in $$props) $$invalidate(37, showClearIcon = $$props.showClearIcon);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*filterText, value, isMulti*/ 140 | $$self.$$.dirty[1] & /*loadOptions, items, optionIdentifier, groupBy, isCreatable*/ 405340160) {
    			 $$invalidate(81, filteredItems = filterMethod({
    				loadOptions,
    				filterText,
    				items,
    				value,
    				isMulti,
    				optionIdentifier,
    				groupBy,
    				isCreatable
    			}));
    		}

    		if ($$self.$$.dirty[2] & /*selectedValue*/ 2048) {
    			 {
    				if (selectedValue) console.warn('selectedValue is no longer used. Please use value instead.');
    			}
    		}

    		if ($$self.$$.dirty[1] & /*items*/ 524288) {
    			 updateValueDisplay(items);
    		}

    		if ($$self.$$.dirty[0] & /*value*/ 4) {
    			 {
    				if (value) setValue();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*inputAttributes, isSearchable*/ 73728) {
    			 {
    				if (inputAttributes || !isSearchable) assignInputAttributes();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*isMulti*/ 128 | $$self.$$.dirty[2] & /*prev_isMulti*/ 262144) {
    			 {
    				if (isMulti) {
    					setupMulti();
    				}

    				if (prev_isMulti && !isMulti) {
    					setupSingle();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*isMulti, value*/ 132) {
    			 {
    				if (isMulti && value && value.length > 1) {
    					checkValueForDuplicates();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value*/ 4) {
    			 {
    				if (value) dispatchSelectedItem();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value, isMulti*/ 132 | $$self.$$.dirty[2] & /*prev_value*/ 32768) {
    			 {
    				if (!value && isMulti && prev_value) {
    					dispatch('select', value);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*isFocused*/ 2 | $$self.$$.dirty[2] & /*prev_isFocused*/ 131072) {
    			 {
    				if (isFocused !== prev_isFocused) {
    					setupFocus();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*filterText*/ 8 | $$self.$$.dirty[2] & /*prev_filterText*/ 65536) {
    			 {
    				if (filterText !== prev_filterText) {
    					setupFilterText();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value, filterText*/ 12) {
    			 $$invalidate(29, showSelectedItem = value && filterText.length === 0);
    		}

    		if ($$self.$$.dirty[0] & /*showSelectedItem, isClearable, isDisabled, isWaiting*/ 536904208) {
    			 $$invalidate(37, showClearIcon = showSelectedItem && isClearable && !isDisabled && !isWaiting);
    		}

    		if ($$self.$$.dirty[0] & /*isMulti, value*/ 132 | $$self.$$.dirty[1] & /*placeholderAlwaysShow, placeholder*/ 393216) {
    			 $$invalidate(36, placeholderText = placeholderAlwaysShow && isMulti
    			? placeholder
    			: value ? '' : placeholder);
    		}

    		if ($$self.$$.dirty[0] & /*isMulti, value*/ 132) {
    			 $$invalidate(35, showMultiSelect = isMulti && value && value.length > 0);
    		}

    		if ($$self.$$.dirty[0] & /*filterText, value, isMulti, container*/ 141 | $$self.$$.dirty[1] & /*optionIdentifier, getGroupHeaderLabel, getOptionLabel*/ 218103808 | $$self.$$.dirty[2] & /*Item, noOptionsMessage, hideEmptyState, isVirtualList, VirtualList, filteredItems, itemHeight, listPlacement, listAutoWidth, listOffset*/ 526326) {
    			 $$invalidate(34, listProps = {
    				Item: Item$1,
    				filterText,
    				optionIdentifier,
    				noOptionsMessage,
    				hideEmptyState,
    				isVirtualList,
    				VirtualList: VirtualList$1,
    				value,
    				isMulti,
    				getGroupHeaderLabel,
    				items: filteredItems,
    				itemHeight,
    				getOptionLabel,
    				listPlacement,
    				parent: container,
    				listAutoWidth,
    				listOffset
    			});
    		}

    		if ($$self.$$.dirty[0] & /*value, isMulti*/ 132) {
    			 $$invalidate(33, ariaSelection = value ? handleAriaSelection() : '');
    		}

    		if ($$self.$$.dirty[0] & /*hoverItemIndex, isFocused, listOpen*/ 268435490 | $$self.$$.dirty[2] & /*filteredItems*/ 524288) {
    			 $$invalidate(32, ariaContext = handleAriaContent());
    		}
    	};

    	return [
    		container,
    		isFocused,
    		value,
    		filterText,
    		isWaiting,
    		listOpen,
    		input,
    		isMulti,
    		multiFullItemClearable,
    		isDisabled,
    		hasError,
    		containerStyles,
    		getSelectionLabel,
    		isSearchable,
    		inputStyles,
    		isClearable,
    		inputAttributes,
    		Icon,
    		iconProps,
    		showChevron,
    		showIndicator,
    		containerClasses,
    		indicatorSvg,
    		ClearIcon$1,
    		List$1,
    		Selection$1,
    		MultiSelection$1,
    		handleClear,
    		hoverItemIndex,
    		showSelectedItem,
    		activeValue,
    		_inputAttributes,
    		ariaContext,
    		ariaSelection,
    		listProps,
    		showMultiSelect,
    		placeholderText,
    		showClearIcon,
    		handleMultiItemClear,
    		handleKeyDown,
    		handleFocus,
    		handleWindowEvent,
    		handleClick,
    		itemSelected,
    		itemCreated,
    		closeList,
    		id,
    		isCreatable,
    		placeholder,
    		placeholderAlwaysShow,
    		items,
    		itemFilter,
    		groupBy,
    		groupFilter,
    		isGroupHeaderSelectable,
    		getGroupHeaderLabel,
    		labelIdentifier,
    		getOptionLabel,
    		optionIdentifier,
    		loadOptions,
    		createGroupHeaderItem,
    		createItem,
    		getFilteredItems,
    		listPlacement,
    		isVirtualList,
    		loadOptionsInterval,
    		noOptionsMessage,
    		hideEmptyState,
    		listAutoWidth,
    		itemHeight,
    		listOffset,
    		Item$1,
    		VirtualList$1,
    		selectedValue,
    		ariaValues,
    		ariaListOpen,
    		ariaFocused,
    		prev_value,
    		prev_filterText,
    		prev_isFocused,
    		prev_isMulti,
    		filteredItems,
    		input_1_binding,
    		input_1_input_handler,
    		switch_instance_hoverItemIndex_binding,
    		div_binding
    	];
    }

    class Select extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$8,
    			create_fragment$8,
    			safe_not_equal,
    			{
    				id: 46,
    				container: 0,
    				input: 6,
    				isMulti: 7,
    				multiFullItemClearable: 8,
    				isDisabled: 9,
    				isCreatable: 47,
    				isFocused: 1,
    				value: 2,
    				filterText: 3,
    				placeholder: 48,
    				placeholderAlwaysShow: 49,
    				items: 50,
    				itemFilter: 51,
    				groupBy: 52,
    				groupFilter: 53,
    				isGroupHeaderSelectable: 54,
    				getGroupHeaderLabel: 55,
    				labelIdentifier: 56,
    				getOptionLabel: 57,
    				optionIdentifier: 58,
    				loadOptions: 59,
    				hasError: 10,
    				containerStyles: 11,
    				getSelectionLabel: 12,
    				createGroupHeaderItem: 60,
    				createItem: 61,
    				getFilteredItems: 62,
    				isSearchable: 13,
    				inputStyles: 14,
    				isClearable: 15,
    				isWaiting: 4,
    				listPlacement: 63,
    				listOpen: 5,
    				isVirtualList: 64,
    				loadOptionsInterval: 65,
    				noOptionsMessage: 66,
    				hideEmptyState: 67,
    				inputAttributes: 16,
    				listAutoWidth: 68,
    				itemHeight: 69,
    				Icon: 17,
    				iconProps: 18,
    				showChevron: 19,
    				showIndicator: 20,
    				containerClasses: 21,
    				indicatorSvg: 22,
    				listOffset: 70,
    				ClearIcon: 23,
    				Item: 71,
    				List: 24,
    				Selection: 25,
    				MultiSelection: 26,
    				VirtualList: 72,
    				selectedValue: 73,
    				handleClear: 27,
    				ariaValues: 74,
    				ariaListOpen: 75,
    				ariaFocused: 76
    			},
    			null,
    			[-1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Select",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get id() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get container() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set container(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isMulti() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMulti(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiFullItemClearable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiFullItemClearable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isDisabled() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isDisabled(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isCreatable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isCreatable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isFocused() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isFocused(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterText() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterText(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholderAlwaysShow() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholderAlwaysShow(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get items() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemFilter() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemFilter(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupBy() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupBy(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupFilter() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupFilter(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isGroupHeaderSelectable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isGroupHeaderSelectable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getGroupHeaderLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getGroupHeaderLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelIdentifier() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelIdentifier(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get optionIdentifier() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set optionIdentifier(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loadOptions() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loadOptions(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hasError() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hasError(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerStyles() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerStyles(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getSelectionLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getSelectionLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get createGroupHeaderItem() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set createGroupHeaderItem(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get createItem() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set createItem(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getFilteredItems() {
    		return this.$$.ctx[62];
    	}

    	set getFilteredItems(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isSearchable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isSearchable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputStyles() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputStyles(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isClearable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isClearable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isWaiting() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isWaiting(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listPlacement() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listPlacement(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOpen() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOpen(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isVirtualList() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isVirtualList(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loadOptionsInterval() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loadOptionsInterval(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noOptionsMessage() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noOptionsMessage(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideEmptyState() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideEmptyState(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputAttributes() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputAttributes(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listAutoWidth() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listAutoWidth(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemHeight() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemHeight(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Icon() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Icon(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get iconProps() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set iconProps(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showChevron() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showChevron(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showIndicator() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showIndicator(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerClasses() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerClasses(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indicatorSvg() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indicatorSvg(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOffset() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOffset(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ClearIcon() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ClearIcon(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Item() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Item(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get List() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set List(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Selection() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Selection(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get MultiSelection() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set MultiSelection(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get VirtualList() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set VirtualList(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedValue() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedValue(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get handleClear() {
    		return this.$$.ctx[27];
    	}

    	set handleClear(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaValues() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaValues(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaListOpen() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaListOpen(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaFocused() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaFocused(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/Pokemon.svelte generated by Svelte v3.44.3 */
    const file$9 = "components/Pokemon.svelte";

    function create_fragment$9(ctx) {
    	let section;
    	let div0;
    	let select;
    	let updating_value;
    	let updating_listOpen;
    	let t0;
    	let difficulty;
    	let t1;
    	let div1;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t2;
    	let div2;
    	let table;
    	let tr0;
    	let th0;
    	let t4;
    	let td0;
    	let t5;
    	let t6_value = /*pokemon*/ ctx[0].number + "";
    	let t6;
    	let t7;
    	let tr1;
    	let th1;
    	let t9;
    	let td1;
    	let t10_value = /*pokemon*/ ctx[0].species + "";
    	let t10;
    	let t11;
    	let t12;
    	let tr2;
    	let th2;
    	let t14;
    	let td2;
    	let type0;
    	let t15;
    	let type1;
    	let t16;
    	let tr3;
    	let th3;
    	let t18;
    	let td3;
    	let t19_value = /*pokemon*/ ctx[0].catch_rate + "";
    	let t19;
    	let current;

    	function select_value_binding(value) {
    		/*select_value_binding*/ ctx[2](value);
    	}

    	function select_listOpen_binding(value) {
    		/*select_listOpen_binding*/ ctx[3](value);
    	}

    	let select_props = {
    		items: pkmns,
    		optionIdentifier: "value",
    		getSelectionLabel: func,
    		getOptionLabel: func_1,
    		containerClasses: "autopoke",
    		noOptionsMessage: "This Pokemon may be in another region.",
    		isClearable: false,
    		isVirtualList: true
    	};

    	if (/*pokemon*/ ctx[0] !== void 0) {
    		select_props.value = /*pokemon*/ ctx[0];
    	}

    	if (/*listOpen*/ ctx[1] !== void 0) {
    		select_props.listOpen = /*listOpen*/ ctx[1];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'value', select_value_binding));
    	binding_callbacks.push(() => bind(select, 'listOpen', select_listOpen_binding));

    	difficulty = new Difficulty({
    			props: {
    				difficulty: /*pokemon*/ ctx[0].catch_rate
    			},
    			$$inline: true
    		});

    	type0 = new Type({
    			props: { type: /*pokemon*/ ctx[0].type1 },
    			$$inline: true
    		});

    	type1 = new Type({
    			props: { type: /*pokemon*/ ctx[0].type2 },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			create_component(select.$$.fragment);
    			t0 = space();
    			create_component(difficulty.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			img = element("img");
    			t2 = space();
    			div2 = element("div");
    			table = element("table");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Number:";
    			t4 = space();
    			td0 = element("td");
    			t5 = text("#");
    			t6 = text(t6_value);
    			t7 = space();
    			tr1 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Species:";
    			t9 = space();
    			td1 = element("td");
    			t10 = text(t10_value);
    			t11 = text(" Pokemon");
    			t12 = space();
    			tr2 = element("tr");
    			th2 = element("th");
    			th2.textContent = "Type:";
    			t14 = space();
    			td2 = element("td");
    			create_component(type0.$$.fragment);
    			t15 = space();
    			create_component(type1.$$.fragment);
    			t16 = space();
    			tr3 = element("tr");
    			th3 = element("th");
    			th3.textContent = "Catch Rate:";
    			t18 = space();
    			td3 = element("td");
    			t19 = text(t19_value);
    			attr_dev(div0, "class", "selector svelte-4ckmro");
    			toggle_class(div0, "listOpen", /*listOpen*/ ctx[1]);
    			add_location(div0, file$9, 13, 2, 321);
    			attr_dev(img, "class", "sprite__image svelte-4ckmro");
    			if (!src_url_equal(img.src, img_src_value = /*pokemon*/ ctx[0].sprite)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = "animated image of the pokemon: " + /*pokemon*/ ctx[0].name);
    			add_location(img, file$9, 31, 4, 823);
    			attr_dev(div1, "class", "sprite svelte-4ckmro");
    			add_location(div1, file$9, 30, 2, 797);
    			attr_dev(th0, "class", "svelte-4ckmro");
    			add_location(th0, file$9, 38, 8, 1004);
    			attr_dev(td0, "class", "svelte-4ckmro");
    			add_location(td0, file$9, 39, 8, 1030);
    			attr_dev(tr0, "class", "svelte-4ckmro");
    			add_location(tr0, file$9, 37, 6, 990);
    			attr_dev(th1, "class", "svelte-4ckmro");
    			add_location(th1, file$9, 42, 8, 1091);
    			attr_dev(td1, "class", "svelte-4ckmro");
    			add_location(td1, file$9, 43, 8, 1118);
    			attr_dev(tr1, "class", "svelte-4ckmro");
    			add_location(tr1, file$9, 41, 6, 1077);
    			attr_dev(th2, "class", "svelte-4ckmro");
    			add_location(th2, file$9, 46, 8, 1187);
    			attr_dev(td2, "class", "svelte-4ckmro");
    			add_location(td2, file$9, 47, 8, 1211);
    			attr_dev(tr2, "class", "svelte-4ckmro");
    			add_location(tr2, file$9, 45, 6, 1173);
    			attr_dev(th3, "class", "svelte-4ckmro");
    			add_location(th3, file$9, 53, 8, 1351);
    			attr_dev(td3, "class", "svelte-4ckmro");
    			add_location(td3, file$9, 54, 8, 1381);
    			attr_dev(tr3, "class", "svelte-4ckmro");
    			add_location(tr3, file$9, 52, 6, 1337);
    			add_location(table, file$9, 36, 4, 975);
    			attr_dev(div2, "class", "data svelte-4ckmro");
    			add_location(div2, file$9, 35, 2, 951);
    			attr_dev(section, "class", "pokemon svelte-4ckmro");
    			add_location(section, file$9, 12, 0, 292);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			mount_component(select, div0, null);
    			append_dev(section, t0);
    			mount_component(difficulty, section, null);
    			append_dev(section, t1);
    			append_dev(section, div1);
    			append_dev(div1, img);
    			append_dev(section, t2);
    			append_dev(section, div2);
    			append_dev(div2, table);
    			append_dev(table, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t4);
    			append_dev(tr0, td0);
    			append_dev(td0, t5);
    			append_dev(td0, t6);
    			append_dev(table, t7);
    			append_dev(table, tr1);
    			append_dev(tr1, th1);
    			append_dev(tr1, t9);
    			append_dev(tr1, td1);
    			append_dev(td1, t10);
    			append_dev(td1, t11);
    			append_dev(table, t12);
    			append_dev(table, tr2);
    			append_dev(tr2, th2);
    			append_dev(tr2, t14);
    			append_dev(tr2, td2);
    			mount_component(type0, td2, null);
    			append_dev(td2, t15);
    			mount_component(type1, td2, null);
    			append_dev(table, t16);
    			append_dev(table, tr3);
    			append_dev(tr3, th3);
    			append_dev(tr3, t18);
    			append_dev(tr3, td3);
    			append_dev(td3, t19);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const select_changes = {};

    			if (!updating_value && dirty & /*pokemon*/ 1) {
    				updating_value = true;
    				select_changes.value = /*pokemon*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			if (!updating_listOpen && dirty & /*listOpen*/ 2) {
    				updating_listOpen = true;
    				select_changes.listOpen = /*listOpen*/ ctx[1];
    				add_flush_callback(() => updating_listOpen = false);
    			}

    			select.$set(select_changes);

    			if (dirty & /*listOpen*/ 2) {
    				toggle_class(div0, "listOpen", /*listOpen*/ ctx[1]);
    			}

    			const difficulty_changes = {};
    			if (dirty & /*pokemon*/ 1) difficulty_changes.difficulty = /*pokemon*/ ctx[0].catch_rate;
    			difficulty.$set(difficulty_changes);

    			if (!current || dirty & /*pokemon*/ 1 && !src_url_equal(img.src, img_src_value = /*pokemon*/ ctx[0].sprite)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty & /*pokemon*/ 1 && img_alt_value !== (img_alt_value = "animated image of the pokemon: " + /*pokemon*/ ctx[0].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if ((!current || dirty & /*pokemon*/ 1) && t6_value !== (t6_value = /*pokemon*/ ctx[0].number + "")) set_data_dev(t6, t6_value);
    			if ((!current || dirty & /*pokemon*/ 1) && t10_value !== (t10_value = /*pokemon*/ ctx[0].species + "")) set_data_dev(t10, t10_value);
    			const type0_changes = {};
    			if (dirty & /*pokemon*/ 1) type0_changes.type = /*pokemon*/ ctx[0].type1;
    			type0.$set(type0_changes);
    			const type1_changes = {};
    			if (dirty & /*pokemon*/ 1) type1_changes.type = /*pokemon*/ ctx[0].type2;
    			type1.$set(type1_changes);
    			if ((!current || dirty & /*pokemon*/ 1) && t19_value !== (t19_value = /*pokemon*/ ctx[0].catch_rate + "")) set_data_dev(t19, t19_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			transition_in(difficulty.$$.fragment, local);
    			transition_in(type0.$$.fragment, local);
    			transition_in(type1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			transition_out(difficulty.$$.fragment, local);
    			transition_out(type0.$$.fragment, local);
    			transition_out(type1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(select);
    			destroy_component(difficulty);
    			destroy_component(type0);
    			destroy_component(type1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func = item => item.name;
    const func_1 = item => item.label;

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Pokemon', slots, []);
    	let { pokemon = pkmns[150] } = $$props;
    	let { listOpen = true } = $$props;
    	const writable_props = ['pokemon', 'listOpen'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Pokemon> was created with unknown prop '${key}'`);
    	});

    	function select_value_binding(value) {
    		pokemon = value;
    		$$invalidate(0, pokemon);
    	}

    	function select_listOpen_binding(value) {
    		listOpen = value;
    		$$invalidate(1, listOpen);
    	}

    	$$self.$$set = $$props => {
    		if ('pokemon' in $$props) $$invalidate(0, pokemon = $$props.pokemon);
    		if ('listOpen' in $$props) $$invalidate(1, listOpen = $$props.listOpen);
    	};

    	$$self.$capture_state = () => ({
    		Type,
    		Difficulty,
    		Select,
    		pokemons: pkmns,
    		pokemon,
    		listOpen
    	});

    	$$self.$inject_state = $$props => {
    		if ('pokemon' in $$props) $$invalidate(0, pokemon = $$props.pokemon);
    		if ('listOpen' in $$props) $$invalidate(1, listOpen = $$props.listOpen);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [pokemon, listOpen, select_value_binding, select_listOpen_binding];
    }

    class Pokemon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { pokemon: 0, listOpen: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Pokemon",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get pokemon() {
    		throw new Error("<Pokemon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pokemon(value) {
    		throw new Error("<Pokemon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOpen() {
    		throw new Error("<Pokemon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOpen(value) {
    		throw new Error("<Pokemon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/partials/Ball.svelte generated by Svelte v3.44.3 */

    const file$a = "components/partials/Ball.svelte";

    function create_fragment$a(ctx) {
    	let span;
    	let span_class_value;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", span_class_value = "ball " + /*type*/ ctx[0] + " " + /*anim*/ ctx[2]);
    			attr_dev(span, "title", /*title*/ ctx[1]);
    			add_location(span, file$a, 12, 0, 229);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*type, anim*/ 5 && span_class_value !== (span_class_value = "ball " + /*type*/ ctx[0] + " " + /*anim*/ ctx[2])) {
    				attr_dev(span, "class", span_class_value);
    			}

    			if (dirty & /*title*/ 2) {
    				attr_dev(span, "title", /*title*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Ball', slots, []);
    	let { anim = false } = $$props;
    	let { ball = undefined } = $$props;
    	let { type = "poke" } = $$props;
    	let { title = "" } = $$props;

    	if (ball) {
    		type = ball.type;
    		title = ball.name + ", " + ball.flavour;
    	}

    	const writable_props = ['anim', 'ball', 'type', 'title'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Ball> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('anim' in $$props) $$invalidate(2, anim = $$props.anim);
    		if ('ball' in $$props) $$invalidate(3, ball = $$props.ball);
    		if ('type' in $$props) $$invalidate(0, type = $$props.type);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    	};

    	$$self.$capture_state = () => ({ anim, ball, type, title });

    	$$self.$inject_state = $$props => {
    		if ('anim' in $$props) $$invalidate(2, anim = $$props.anim);
    		if ('ball' in $$props) $$invalidate(3, ball = $$props.ball);
    		if ('type' in $$props) $$invalidate(0, type = $$props.type);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [type, title, anim, ball];
    }

    class Ball extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { anim: 2, ball: 3, type: 0, title: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Ball",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get anim() {
    		throw new Error("<Ball>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anim(value) {
    		throw new Error("<Ball>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ball() {
    		throw new Error("<Ball>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ball(value) {
    		throw new Error("<Ball>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Ball>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Ball>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<Ball>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Ball>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*!
     * Chart.js v3.7.0
     * https://www.chartjs.org
     * (c) 2021 Chart.js Contributors
     * Released under the MIT License
     */
    const requestAnimFrame = (function() {
      if (typeof window === 'undefined') {
        return function(callback) {
          return callback();
        };
      }
      return window.requestAnimationFrame;
    }());
    function throttled(fn, thisArg, updateFn) {
      const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));
      let ticking = false;
      let args = [];
      return function(...rest) {
        args = updateArgs(rest);
        if (!ticking) {
          ticking = true;
          requestAnimFrame.call(window, () => {
            ticking = false;
            fn.apply(thisArg, args);
          });
        }
      };
    }
    function debounce$1(fn, delay) {
      let timeout;
      return function(...args) {
        if (delay) {
          clearTimeout(timeout);
          timeout = setTimeout(fn, delay, args);
        } else {
          fn.apply(this, args);
        }
        return delay;
      };
    }
    const _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';
    const _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;
    const _textX = (align, left, right, rtl) => {
      const check = rtl ? 'left' : 'right';
      return align === check ? right : align === 'center' ? (left + right) / 2 : left;
    };

    function noop$1() {}
    const uid = (function() {
      let id = 0;
      return function() {
        return id++;
      };
    }());
    function isNullOrUndef(value) {
      return value === null || typeof value === 'undefined';
    }
    function isArray(value) {
      if (Array.isArray && Array.isArray(value)) {
        return true;
      }
      const type = Object.prototype.toString.call(value);
      if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
        return true;
      }
      return false;
    }
    function isObject(value) {
      return value !== null && Object.prototype.toString.call(value) === '[object Object]';
    }
    const isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);
    function finiteOrDefault(value, defaultValue) {
      return isNumberFinite(value) ? value : defaultValue;
    }
    function valueOrDefault(value, defaultValue) {
      return typeof value === 'undefined' ? defaultValue : value;
    }
    const toPercentage = (value, dimension) =>
      typeof value === 'string' && value.endsWith('%') ?
        parseFloat(value) / 100
        : value / dimension;
    const toDimension = (value, dimension) =>
      typeof value === 'string' && value.endsWith('%') ?
        parseFloat(value) / 100 * dimension
        : +value;
    function callback(fn, args, thisArg) {
      if (fn && typeof fn.call === 'function') {
        return fn.apply(thisArg, args);
      }
    }
    function each(loopable, fn, thisArg, reverse) {
      let i, len, keys;
      if (isArray(loopable)) {
        len = loopable.length;
        if (reverse) {
          for (i = len - 1; i >= 0; i--) {
            fn.call(thisArg, loopable[i], i);
          }
        } else {
          for (i = 0; i < len; i++) {
            fn.call(thisArg, loopable[i], i);
          }
        }
      } else if (isObject(loopable)) {
        keys = Object.keys(loopable);
        len = keys.length;
        for (i = 0; i < len; i++) {
          fn.call(thisArg, loopable[keys[i]], keys[i]);
        }
      }
    }
    function _elementsEqual(a0, a1) {
      let i, ilen, v0, v1;
      if (!a0 || !a1 || a0.length !== a1.length) {
        return false;
      }
      for (i = 0, ilen = a0.length; i < ilen; ++i) {
        v0 = a0[i];
        v1 = a1[i];
        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
          return false;
        }
      }
      return true;
    }
    function clone$1(source) {
      if (isArray(source)) {
        return source.map(clone$1);
      }
      if (isObject(source)) {
        const target = Object.create(null);
        const keys = Object.keys(source);
        const klen = keys.length;
        let k = 0;
        for (; k < klen; ++k) {
          target[keys[k]] = clone$1(source[keys[k]]);
        }
        return target;
      }
      return source;
    }
    function isValidKey(key) {
      return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;
    }
    function _merger(key, target, source, options) {
      if (!isValidKey(key)) {
        return;
      }
      const tval = target[key];
      const sval = source[key];
      if (isObject(tval) && isObject(sval)) {
        merge(tval, sval, options);
      } else {
        target[key] = clone$1(sval);
      }
    }
    function merge(target, source, options) {
      const sources = isArray(source) ? source : [source];
      const ilen = sources.length;
      if (!isObject(target)) {
        return target;
      }
      options = options || {};
      const merger = options.merger || _merger;
      for (let i = 0; i < ilen; ++i) {
        source = sources[i];
        if (!isObject(source)) {
          continue;
        }
        const keys = Object.keys(source);
        for (let k = 0, klen = keys.length; k < klen; ++k) {
          merger(keys[k], target, source, options);
        }
      }
      return target;
    }
    function mergeIf(target, source) {
      return merge(target, source, {merger: _mergerIf});
    }
    function _mergerIf(key, target, source) {
      if (!isValidKey(key)) {
        return;
      }
      const tval = target[key];
      const sval = source[key];
      if (isObject(tval) && isObject(sval)) {
        mergeIf(tval, sval);
      } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
        target[key] = clone$1(sval);
      }
    }
    const emptyString = '';
    const dot = '.';
    function indexOfDotOrLength(key, start) {
      const idx = key.indexOf(dot, start);
      return idx === -1 ? key.length : idx;
    }
    function resolveObjectKey(obj, key) {
      if (key === emptyString) {
        return obj;
      }
      let pos = 0;
      let idx = indexOfDotOrLength(key, pos);
      while (obj && idx > pos) {
        obj = obj[key.substr(pos, idx - pos)];
        pos = idx + 1;
        idx = indexOfDotOrLength(key, pos);
      }
      return obj;
    }
    function _capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    const defined = (value) => typeof value !== 'undefined';
    const isFunction = (value) => typeof value === 'function';
    const setsEqual = (a, b) => {
      if (a.size !== b.size) {
        return false;
      }
      for (const item of a) {
        if (!b.has(item)) {
          return false;
        }
      }
      return true;
    };
    function _isClickEvent(e) {
      return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';
    }

    const PI = Math.PI;
    const TAU = 2 * PI;
    const PITAU = TAU + PI;
    const INFINITY = Number.POSITIVE_INFINITY;
    const RAD_PER_DEG = PI / 180;
    const HALF_PI = PI / 2;
    const QUARTER_PI = PI / 4;
    const TWO_THIRDS_PI = PI * 2 / 3;
    const log10 = Math.log10;
    const sign = Math.sign;
    function niceNum(range) {
      const roundedRange = Math.round(range);
      range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
      const niceRange = Math.pow(10, Math.floor(log10(range)));
      const fraction = range / niceRange;
      const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
      return niceFraction * niceRange;
    }
    function _factorize(value) {
      const result = [];
      const sqrt = Math.sqrt(value);
      let i;
      for (i = 1; i < sqrt; i++) {
        if (value % i === 0) {
          result.push(i);
          result.push(value / i);
        }
      }
      if (sqrt === (sqrt | 0)) {
        result.push(sqrt);
      }
      result.sort((a, b) => a - b).pop();
      return result;
    }
    function isNumber(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
    function almostEquals(x, y, epsilon) {
      return Math.abs(x - y) < epsilon;
    }
    function almostWhole(x, epsilon) {
      const rounded = Math.round(x);
      return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
    }
    function _setMinAndMaxByKey(array, target, property) {
      let i, ilen, value;
      for (i = 0, ilen = array.length; i < ilen; i++) {
        value = array[i][property];
        if (!isNaN(value)) {
          target.min = Math.min(target.min, value);
          target.max = Math.max(target.max, value);
        }
      }
    }
    function toRadians(degrees) {
      return degrees * (PI / 180);
    }
    function toDegrees(radians) {
      return radians * (180 / PI);
    }
    function _decimalPlaces(x) {
      if (!isNumberFinite(x)) {
        return;
      }
      let e = 1;
      let p = 0;
      while (Math.round(x * e) / e !== x) {
        e *= 10;
        p++;
      }
      return p;
    }
    function getAngleFromPoint(centrePoint, anglePoint) {
      const distanceFromXCenter = anglePoint.x - centrePoint.x;
      const distanceFromYCenter = anglePoint.y - centrePoint.y;
      const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
      let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
      if (angle < (-0.5 * PI)) {
        angle += TAU;
      }
      return {
        angle,
        distance: radialDistanceFromCenter
      };
    }
    function distanceBetweenPoints(pt1, pt2) {
      return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
    }
    function _angleDiff(a, b) {
      return (a - b + PITAU) % TAU - PI;
    }
    function _normalizeAngle(a) {
      return (a % TAU + TAU) % TAU;
    }
    function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
      const a = _normalizeAngle(angle);
      const s = _normalizeAngle(start);
      const e = _normalizeAngle(end);
      const angleToStart = _normalizeAngle(s - a);
      const angleToEnd = _normalizeAngle(e - a);
      const startToAngle = _normalizeAngle(a - s);
      const endToAngle = _normalizeAngle(a - e);
      return a === s || a === e || (sameAngleIsFullCircle && s === e)
        || (angleToStart > angleToEnd && startToAngle < endToAngle);
    }
    function _limitValue(value, min, max) {
      return Math.max(min, Math.min(max, value));
    }
    function _int16Range(value) {
      return _limitValue(value, -32768, 32767);
    }
    function _isBetween(value, start, end, epsilon = 1e-6) {
      return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
    }

    const atEdge = (t) => t === 0 || t === 1;
    const elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
    const elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
    const effects = {
      linear: t => t,
      easeInQuad: t => t * t,
      easeOutQuad: t => -t * (t - 2),
      easeInOutQuad: t => ((t /= 0.5) < 1)
        ? 0.5 * t * t
        : -0.5 * ((--t) * (t - 2) - 1),
      easeInCubic: t => t * t * t,
      easeOutCubic: t => (t -= 1) * t * t + 1,
      easeInOutCubic: t => ((t /= 0.5) < 1)
        ? 0.5 * t * t * t
        : 0.5 * ((t -= 2) * t * t + 2),
      easeInQuart: t => t * t * t * t,
      easeOutQuart: t => -((t -= 1) * t * t * t - 1),
      easeInOutQuart: t => ((t /= 0.5) < 1)
        ? 0.5 * t * t * t * t
        : -0.5 * ((t -= 2) * t * t * t - 2),
      easeInQuint: t => t * t * t * t * t,
      easeOutQuint: t => (t -= 1) * t * t * t * t + 1,
      easeInOutQuint: t => ((t /= 0.5) < 1)
        ? 0.5 * t * t * t * t * t
        : 0.5 * ((t -= 2) * t * t * t * t + 2),
      easeInSine: t => -Math.cos(t * HALF_PI) + 1,
      easeOutSine: t => Math.sin(t * HALF_PI),
      easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),
      easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),
      easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,
      easeInOutExpo: t => atEdge(t) ? t : t < 0.5
        ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))
        : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
      easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),
      easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),
      easeInOutCirc: t => ((t /= 0.5) < 1)
        ? -0.5 * (Math.sqrt(1 - t * t) - 1)
        : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
      easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
      easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
      easeInOutElastic(t) {
        const s = 0.1125;
        const p = 0.45;
        return atEdge(t) ? t :
          t < 0.5
            ? 0.5 * elasticIn(t * 2, s, p)
            : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
      },
      easeInBack(t) {
        const s = 1.70158;
        return t * t * ((s + 1) * t - s);
      },
      easeOutBack(t) {
        const s = 1.70158;
        return (t -= 1) * t * ((s + 1) * t + s) + 1;
      },
      easeInOutBack(t) {
        let s = 1.70158;
        if ((t /= 0.5) < 1) {
          return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
        }
        return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
      },
      easeInBounce: t => 1 - effects.easeOutBounce(1 - t),
      easeOutBounce(t) {
        const m = 7.5625;
        const d = 2.75;
        if (t < (1 / d)) {
          return m * t * t;
        }
        if (t < (2 / d)) {
          return m * (t -= (1.5 / d)) * t + 0.75;
        }
        if (t < (2.5 / d)) {
          return m * (t -= (2.25 / d)) * t + 0.9375;
        }
        return m * (t -= (2.625 / d)) * t + 0.984375;
      },
      easeInOutBounce: t => (t < 0.5)
        ? effects.easeInBounce(t * 2) * 0.5
        : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,
    };

    /*!
     * @kurkle/color v0.1.9
     * https://github.com/kurkle/color#readme
     * (c) 2020 Jukka Kurkela
     * Released under the MIT License
     */
    const map = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};
    const hex = '0123456789ABCDEF';
    const h1 = (b) => hex[b & 0xF];
    const h2 = (b) => hex[(b & 0xF0) >> 4] + hex[b & 0xF];
    const eq = (b) => (((b & 0xF0) >> 4) === (b & 0xF));
    function isShort(v) {
    	return eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
    }
    function hexParse(str) {
    	var len = str.length;
    	var ret;
    	if (str[0] === '#') {
    		if (len === 4 || len === 5) {
    			ret = {
    				r: 255 & map[str[1]] * 17,
    				g: 255 & map[str[2]] * 17,
    				b: 255 & map[str[3]] * 17,
    				a: len === 5 ? map[str[4]] * 17 : 255
    			};
    		} else if (len === 7 || len === 9) {
    			ret = {
    				r: map[str[1]] << 4 | map[str[2]],
    				g: map[str[3]] << 4 | map[str[4]],
    				b: map[str[5]] << 4 | map[str[6]],
    				a: len === 9 ? (map[str[7]] << 4 | map[str[8]]) : 255
    			};
    		}
    	}
    	return ret;
    }
    function hexString(v) {
    	var f = isShort(v) ? h1 : h2;
    	return v
    		? '#' + f(v.r) + f(v.g) + f(v.b) + (v.a < 255 ? f(v.a) : '')
    		: v;
    }
    function round(v) {
    	return v + 0.5 | 0;
    }
    const lim = (v, l, h) => Math.max(Math.min(v, h), l);
    function p2b(v) {
    	return lim(round(v * 2.55), 0, 255);
    }
    function n2b(v) {
    	return lim(round(v * 255), 0, 255);
    }
    function b2n(v) {
    	return lim(round(v / 2.55) / 100, 0, 1);
    }
    function n2p(v) {
    	return lim(round(v * 100), 0, 100);
    }
    const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
    function rgbParse(str) {
    	const m = RGB_RE.exec(str);
    	let a = 255;
    	let r, g, b;
    	if (!m) {
    		return;
    	}
    	if (m[7] !== r) {
    		const v = +m[7];
    		a = 255 & (m[8] ? p2b(v) : v * 255);
    	}
    	r = +m[1];
    	g = +m[3];
    	b = +m[5];
    	r = 255 & (m[2] ? p2b(r) : r);
    	g = 255 & (m[4] ? p2b(g) : g);
    	b = 255 & (m[6] ? p2b(b) : b);
    	return {
    		r: r,
    		g: g,
    		b: b,
    		a: a
    	};
    }
    function rgbString(v) {
    	return v && (
    		v.a < 255
    			? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`
    			: `rgb(${v.r}, ${v.g}, ${v.b})`
    	);
    }
    const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
    function hsl2rgbn(h, s, l) {
    	const a = s * Math.min(l, 1 - l);
    	const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    	return [f(0), f(8), f(4)];
    }
    function hsv2rgbn(h, s, v) {
    	const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
    	return [f(5), f(3), f(1)];
    }
    function hwb2rgbn(h, w, b) {
    	const rgb = hsl2rgbn(h, 1, 0.5);
    	let i;
    	if (w + b > 1) {
    		i = 1 / (w + b);
    		w *= i;
    		b *= i;
    	}
    	for (i = 0; i < 3; i++) {
    		rgb[i] *= 1 - w - b;
    		rgb[i] += w;
    	}
    	return rgb;
    }
    function rgb2hsl(v) {
    	const range = 255;
    	const r = v.r / range;
    	const g = v.g / range;
    	const b = v.b / range;
    	const max = Math.max(r, g, b);
    	const min = Math.min(r, g, b);
    	const l = (max + min) / 2;
    	let h, s, d;
    	if (max !== min) {
    		d = max - min;
    		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    		h = max === r
    			? ((g - b) / d) + (g < b ? 6 : 0)
    			: max === g
    				? (b - r) / d + 2
    				: (r - g) / d + 4;
    		h = h * 60 + 0.5;
    	}
    	return [h | 0, s || 0, l];
    }
    function calln(f, a, b, c) {
    	return (
    		Array.isArray(a)
    			? f(a[0], a[1], a[2])
    			: f(a, b, c)
    	).map(n2b);
    }
    function hsl2rgb(h, s, l) {
    	return calln(hsl2rgbn, h, s, l);
    }
    function hwb2rgb(h, w, b) {
    	return calln(hwb2rgbn, h, w, b);
    }
    function hsv2rgb(h, s, v) {
    	return calln(hsv2rgbn, h, s, v);
    }
    function hue(h) {
    	return (h % 360 + 360) % 360;
    }
    function hueParse(str) {
    	const m = HUE_RE.exec(str);
    	let a = 255;
    	let v;
    	if (!m) {
    		return;
    	}
    	if (m[5] !== v) {
    		a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
    	}
    	const h = hue(+m[2]);
    	const p1 = +m[3] / 100;
    	const p2 = +m[4] / 100;
    	if (m[1] === 'hwb') {
    		v = hwb2rgb(h, p1, p2);
    	} else if (m[1] === 'hsv') {
    		v = hsv2rgb(h, p1, p2);
    	} else {
    		v = hsl2rgb(h, p1, p2);
    	}
    	return {
    		r: v[0],
    		g: v[1],
    		b: v[2],
    		a: a
    	};
    }
    function rotate(v, deg) {
    	var h = rgb2hsl(v);
    	h[0] = hue(h[0] + deg);
    	h = hsl2rgb(h);
    	v.r = h[0];
    	v.g = h[1];
    	v.b = h[2];
    }
    function hslString(v) {
    	if (!v) {
    		return;
    	}
    	const a = rgb2hsl(v);
    	const h = a[0];
    	const s = n2p(a[1]);
    	const l = n2p(a[2]);
    	return v.a < 255
    		? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`
    		: `hsl(${h}, ${s}%, ${l}%)`;
    }
    const map$1 = {
    	x: 'dark',
    	Z: 'light',
    	Y: 're',
    	X: 'blu',
    	W: 'gr',
    	V: 'medium',
    	U: 'slate',
    	A: 'ee',
    	T: 'ol',
    	S: 'or',
    	B: 'ra',
    	C: 'lateg',
    	D: 'ights',
    	R: 'in',
    	Q: 'turquois',
    	E: 'hi',
    	P: 'ro',
    	O: 'al',
    	N: 'le',
    	M: 'de',
    	L: 'yello',
    	F: 'en',
    	K: 'ch',
    	G: 'arks',
    	H: 'ea',
    	I: 'ightg',
    	J: 'wh'
    };
    const names = {
    	OiceXe: 'f0f8ff',
    	antiquewEte: 'faebd7',
    	aqua: 'ffff',
    	aquamarRe: '7fffd4',
    	azuY: 'f0ffff',
    	beige: 'f5f5dc',
    	bisque: 'ffe4c4',
    	black: '0',
    	blanKedOmond: 'ffebcd',
    	Xe: 'ff',
    	XeviTet: '8a2be2',
    	bPwn: 'a52a2a',
    	burlywood: 'deb887',
    	caMtXe: '5f9ea0',
    	KartYuse: '7fff00',
    	KocTate: 'd2691e',
    	cSO: 'ff7f50',
    	cSnflowerXe: '6495ed',
    	cSnsilk: 'fff8dc',
    	crimson: 'dc143c',
    	cyan: 'ffff',
    	xXe: '8b',
    	xcyan: '8b8b',
    	xgTMnPd: 'b8860b',
    	xWay: 'a9a9a9',
    	xgYF: '6400',
    	xgYy: 'a9a9a9',
    	xkhaki: 'bdb76b',
    	xmagFta: '8b008b',
    	xTivegYF: '556b2f',
    	xSange: 'ff8c00',
    	xScEd: '9932cc',
    	xYd: '8b0000',
    	xsOmon: 'e9967a',
    	xsHgYF: '8fbc8f',
    	xUXe: '483d8b',
    	xUWay: '2f4f4f',
    	xUgYy: '2f4f4f',
    	xQe: 'ced1',
    	xviTet: '9400d3',
    	dAppRk: 'ff1493',
    	dApskyXe: 'bfff',
    	dimWay: '696969',
    	dimgYy: '696969',
    	dodgerXe: '1e90ff',
    	fiYbrick: 'b22222',
    	flSOwEte: 'fffaf0',
    	foYstWAn: '228b22',
    	fuKsia: 'ff00ff',
    	gaRsbSo: 'dcdcdc',
    	ghostwEte: 'f8f8ff',
    	gTd: 'ffd700',
    	gTMnPd: 'daa520',
    	Way: '808080',
    	gYF: '8000',
    	gYFLw: 'adff2f',
    	gYy: '808080',
    	honeyMw: 'f0fff0',
    	hotpRk: 'ff69b4',
    	RdianYd: 'cd5c5c',
    	Rdigo: '4b0082',
    	ivSy: 'fffff0',
    	khaki: 'f0e68c',
    	lavFMr: 'e6e6fa',
    	lavFMrXsh: 'fff0f5',
    	lawngYF: '7cfc00',
    	NmoncEffon: 'fffacd',
    	ZXe: 'add8e6',
    	ZcSO: 'f08080',
    	Zcyan: 'e0ffff',
    	ZgTMnPdLw: 'fafad2',
    	ZWay: 'd3d3d3',
    	ZgYF: '90ee90',
    	ZgYy: 'd3d3d3',
    	ZpRk: 'ffb6c1',
    	ZsOmon: 'ffa07a',
    	ZsHgYF: '20b2aa',
    	ZskyXe: '87cefa',
    	ZUWay: '778899',
    	ZUgYy: '778899',
    	ZstAlXe: 'b0c4de',
    	ZLw: 'ffffe0',
    	lime: 'ff00',
    	limegYF: '32cd32',
    	lRF: 'faf0e6',
    	magFta: 'ff00ff',
    	maPon: '800000',
    	VaquamarRe: '66cdaa',
    	VXe: 'cd',
    	VScEd: 'ba55d3',
    	VpurpN: '9370db',
    	VsHgYF: '3cb371',
    	VUXe: '7b68ee',
    	VsprRggYF: 'fa9a',
    	VQe: '48d1cc',
    	VviTetYd: 'c71585',
    	midnightXe: '191970',
    	mRtcYam: 'f5fffa',
    	mistyPse: 'ffe4e1',
    	moccasR: 'ffe4b5',
    	navajowEte: 'ffdead',
    	navy: '80',
    	Tdlace: 'fdf5e6',
    	Tive: '808000',
    	TivedBb: '6b8e23',
    	Sange: 'ffa500',
    	SangeYd: 'ff4500',
    	ScEd: 'da70d6',
    	pOegTMnPd: 'eee8aa',
    	pOegYF: '98fb98',
    	pOeQe: 'afeeee',
    	pOeviTetYd: 'db7093',
    	papayawEp: 'ffefd5',
    	pHKpuff: 'ffdab9',
    	peru: 'cd853f',
    	pRk: 'ffc0cb',
    	plum: 'dda0dd',
    	powMrXe: 'b0e0e6',
    	purpN: '800080',
    	YbeccapurpN: '663399',
    	Yd: 'ff0000',
    	Psybrown: 'bc8f8f',
    	PyOXe: '4169e1',
    	saddNbPwn: '8b4513',
    	sOmon: 'fa8072',
    	sandybPwn: 'f4a460',
    	sHgYF: '2e8b57',
    	sHshell: 'fff5ee',
    	siFna: 'a0522d',
    	silver: 'c0c0c0',
    	skyXe: '87ceeb',
    	UXe: '6a5acd',
    	UWay: '708090',
    	UgYy: '708090',
    	snow: 'fffafa',
    	sprRggYF: 'ff7f',
    	stAlXe: '4682b4',
    	tan: 'd2b48c',
    	teO: '8080',
    	tEstN: 'd8bfd8',
    	tomato: 'ff6347',
    	Qe: '40e0d0',
    	viTet: 'ee82ee',
    	JHt: 'f5deb3',
    	wEte: 'ffffff',
    	wEtesmoke: 'f5f5f5',
    	Lw: 'ffff00',
    	LwgYF: '9acd32'
    };
    function unpack() {
    	const unpacked = {};
    	const keys = Object.keys(names);
    	const tkeys = Object.keys(map$1);
    	let i, j, k, ok, nk;
    	for (i = 0; i < keys.length; i++) {
    		ok = nk = keys[i];
    		for (j = 0; j < tkeys.length; j++) {
    			k = tkeys[j];
    			nk = nk.replace(k, map$1[k]);
    		}
    		k = parseInt(names[ok], 16);
    		unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
    	}
    	return unpacked;
    }
    let names$1;
    function nameParse(str) {
    	if (!names$1) {
    		names$1 = unpack();
    		names$1.transparent = [0, 0, 0, 0];
    	}
    	const a = names$1[str.toLowerCase()];
    	return a && {
    		r: a[0],
    		g: a[1],
    		b: a[2],
    		a: a.length === 4 ? a[3] : 255
    	};
    }
    function modHSL(v, i, ratio) {
    	if (v) {
    		let tmp = rgb2hsl(v);
    		tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
    		tmp = hsl2rgb(tmp);
    		v.r = tmp[0];
    		v.g = tmp[1];
    		v.b = tmp[2];
    	}
    }
    function clone(v, proto) {
    	return v ? Object.assign(proto || {}, v) : v;
    }
    function fromObject(input) {
    	var v = {r: 0, g: 0, b: 0, a: 255};
    	if (Array.isArray(input)) {
    		if (input.length >= 3) {
    			v = {r: input[0], g: input[1], b: input[2], a: 255};
    			if (input.length > 3) {
    				v.a = n2b(input[3]);
    			}
    		}
    	} else {
    		v = clone(input, {r: 0, g: 0, b: 0, a: 1});
    		v.a = n2b(v.a);
    	}
    	return v;
    }
    function functionParse(str) {
    	if (str.charAt(0) === 'r') {
    		return rgbParse(str);
    	}
    	return hueParse(str);
    }
    class Color {
    	constructor(input) {
    		if (input instanceof Color) {
    			return input;
    		}
    		const type = typeof input;
    		let v;
    		if (type === 'object') {
    			v = fromObject(input);
    		} else if (type === 'string') {
    			v = hexParse(input) || nameParse(input) || functionParse(input);
    		}
    		this._rgb = v;
    		this._valid = !!v;
    	}
    	get valid() {
    		return this._valid;
    	}
    	get rgb() {
    		var v = clone(this._rgb);
    		if (v) {
    			v.a = b2n(v.a);
    		}
    		return v;
    	}
    	set rgb(obj) {
    		this._rgb = fromObject(obj);
    	}
    	rgbString() {
    		return this._valid ? rgbString(this._rgb) : this._rgb;
    	}
    	hexString() {
    		return this._valid ? hexString(this._rgb) : this._rgb;
    	}
    	hslString() {
    		return this._valid ? hslString(this._rgb) : this._rgb;
    	}
    	mix(color, weight) {
    		const me = this;
    		if (color) {
    			const c1 = me.rgb;
    			const c2 = color.rgb;
    			let w2;
    			const p = weight === w2 ? 0.5 : weight;
    			const w = 2 * p - 1;
    			const a = c1.a - c2.a;
    			const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    			w2 = 1 - w1;
    			c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
    			c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
    			c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
    			c1.a = p * c1.a + (1 - p) * c2.a;
    			me.rgb = c1;
    		}
    		return me;
    	}
    	clone() {
    		return new Color(this.rgb);
    	}
    	alpha(a) {
    		this._rgb.a = n2b(a);
    		return this;
    	}
    	clearer(ratio) {
    		const rgb = this._rgb;
    		rgb.a *= 1 - ratio;
    		return this;
    	}
    	greyscale() {
    		const rgb = this._rgb;
    		const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    		rgb.r = rgb.g = rgb.b = val;
    		return this;
    	}
    	opaquer(ratio) {
    		const rgb = this._rgb;
    		rgb.a *= 1 + ratio;
    		return this;
    	}
    	negate() {
    		const v = this._rgb;
    		v.r = 255 - v.r;
    		v.g = 255 - v.g;
    		v.b = 255 - v.b;
    		return this;
    	}
    	lighten(ratio) {
    		modHSL(this._rgb, 2, ratio);
    		return this;
    	}
    	darken(ratio) {
    		modHSL(this._rgb, 2, -ratio);
    		return this;
    	}
    	saturate(ratio) {
    		modHSL(this._rgb, 1, ratio);
    		return this;
    	}
    	desaturate(ratio) {
    		modHSL(this._rgb, 1, -ratio);
    		return this;
    	}
    	rotate(deg) {
    		rotate(this._rgb, deg);
    		return this;
    	}
    }
    function index_esm(input) {
    	return new Color(input);
    }

    const isPatternOrGradient = (value) => value instanceof CanvasGradient || value instanceof CanvasPattern;
    function color(value) {
      return isPatternOrGradient(value) ? value : index_esm(value);
    }
    function getHoverColor(value) {
      return isPatternOrGradient(value)
        ? value
        : index_esm(value).saturate(0.5).darken(0.1).hexString();
    }

    const overrides = Object.create(null);
    const descriptors = Object.create(null);
    function getScope$1(node, key) {
      if (!key) {
        return node;
      }
      const keys = key.split('.');
      for (let i = 0, n = keys.length; i < n; ++i) {
        const k = keys[i];
        node = node[k] || (node[k] = Object.create(null));
      }
      return node;
    }
    function set(root, scope, values) {
      if (typeof scope === 'string') {
        return merge(getScope$1(root, scope), values);
      }
      return merge(getScope$1(root, ''), scope);
    }
    class Defaults {
      constructor(_descriptors) {
        this.animation = undefined;
        this.backgroundColor = 'rgba(0,0,0,0.1)';
        this.borderColor = 'rgba(0,0,0,0.1)';
        this.color = '#666';
        this.datasets = {};
        this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
        this.elements = {};
        this.events = [
          'mousemove',
          'mouseout',
          'click',
          'touchstart',
          'touchmove'
        ];
        this.font = {
          family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
          size: 12,
          style: 'normal',
          lineHeight: 1.2,
          weight: null
        };
        this.hover = {};
        this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);
        this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);
        this.hoverColor = (ctx, options) => getHoverColor(options.color);
        this.indexAxis = 'x';
        this.interaction = {
          mode: 'nearest',
          intersect: true
        };
        this.maintainAspectRatio = true;
        this.onHover = null;
        this.onClick = null;
        this.parsing = true;
        this.plugins = {};
        this.responsive = true;
        this.scale = undefined;
        this.scales = {};
        this.showLine = true;
        this.drawActiveElementsOnTop = true;
        this.describe(_descriptors);
      }
      set(scope, values) {
        return set(this, scope, values);
      }
      get(scope) {
        return getScope$1(this, scope);
      }
      describe(scope, values) {
        return set(descriptors, scope, values);
      }
      override(scope, values) {
        return set(overrides, scope, values);
      }
      route(scope, name, targetScope, targetName) {
        const scopeObject = getScope$1(this, scope);
        const targetScopeObject = getScope$1(this, targetScope);
        const privateName = '_' + name;
        Object.defineProperties(scopeObject, {
          [privateName]: {
            value: scopeObject[name],
            writable: true
          },
          [name]: {
            enumerable: true,
            get() {
              const local = this[privateName];
              const target = targetScopeObject[targetName];
              if (isObject(local)) {
                return Object.assign({}, target, local);
              }
              return valueOrDefault(local, target);
            },
            set(value) {
              this[privateName] = value;
            }
          }
        });
      }
    }
    var defaults = new Defaults({
      _scriptable: (name) => !name.startsWith('on'),
      _indexable: (name) => name !== 'events',
      hover: {
        _fallback: 'interaction'
      },
      interaction: {
        _scriptable: false,
        _indexable: false,
      }
    });

    function toFontString(font) {
      if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
        return null;
      }
      return (font.style ? font.style + ' ' : '')
    		+ (font.weight ? font.weight + ' ' : '')
    		+ font.size + 'px '
    		+ font.family;
    }
    function _measureText(ctx, data, gc, longest, string) {
      let textWidth = data[string];
      if (!textWidth) {
        textWidth = data[string] = ctx.measureText(string).width;
        gc.push(string);
      }
      if (textWidth > longest) {
        longest = textWidth;
      }
      return longest;
    }
    function _longestText(ctx, font, arrayOfThings, cache) {
      cache = cache || {};
      let data = cache.data = cache.data || {};
      let gc = cache.garbageCollect = cache.garbageCollect || [];
      if (cache.font !== font) {
        data = cache.data = {};
        gc = cache.garbageCollect = [];
        cache.font = font;
      }
      ctx.save();
      ctx.font = font;
      let longest = 0;
      const ilen = arrayOfThings.length;
      let i, j, jlen, thing, nestedThing;
      for (i = 0; i < ilen; i++) {
        thing = arrayOfThings[i];
        if (thing !== undefined && thing !== null && isArray(thing) !== true) {
          longest = _measureText(ctx, data, gc, longest, thing);
        } else if (isArray(thing)) {
          for (j = 0, jlen = thing.length; j < jlen; j++) {
            nestedThing = thing[j];
            if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {
              longest = _measureText(ctx, data, gc, longest, nestedThing);
            }
          }
        }
      }
      ctx.restore();
      const gcLen = gc.length / 2;
      if (gcLen > arrayOfThings.length) {
        for (i = 0; i < gcLen; i++) {
          delete data[gc[i]];
        }
        gc.splice(0, gcLen);
      }
      return longest;
    }
    function _alignPixel(chart, pixel, width) {
      const devicePixelRatio = chart.currentDevicePixelRatio;
      const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
      return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
    }
    function clearCanvas(canvas, ctx) {
      ctx = ctx || canvas.getContext('2d');
      ctx.save();
      ctx.resetTransform();
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.restore();
    }
    function drawPoint(ctx, options, x, y) {
      let type, xOffset, yOffset, size, cornerRadius;
      const style = options.pointStyle;
      const rotation = options.rotation;
      const radius = options.radius;
      let rad = (rotation || 0) * RAD_PER_DEG;
      if (style && typeof style === 'object') {
        type = style.toString();
        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
          ctx.save();
          ctx.translate(x, y);
          ctx.rotate(rad);
          ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
          ctx.restore();
          return;
        }
      }
      if (isNaN(radius) || radius <= 0) {
        return;
      }
      ctx.beginPath();
      switch (style) {
      default:
        ctx.arc(x, y, radius, 0, TAU);
        ctx.closePath();
        break;
      case 'triangle':
        ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
        rad += TWO_THIRDS_PI;
        ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
        rad += TWO_THIRDS_PI;
        ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
        ctx.closePath();
        break;
      case 'rectRounded':
        cornerRadius = radius * 0.516;
        size = radius - cornerRadius;
        xOffset = Math.cos(rad + QUARTER_PI) * size;
        yOffset = Math.sin(rad + QUARTER_PI) * size;
        ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
        ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
        ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
        ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
        ctx.closePath();
        break;
      case 'rect':
        if (!rotation) {
          size = Math.SQRT1_2 * radius;
          ctx.rect(x - size, y - size, 2 * size, 2 * size);
          break;
        }
        rad += QUARTER_PI;
      case 'rectRot':
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + yOffset, y - xOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        ctx.lineTo(x - yOffset, y + xOffset);
        ctx.closePath();
        break;
      case 'crossRot':
        rad += QUARTER_PI;
      case 'cross':
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        ctx.moveTo(x + yOffset, y - xOffset);
        ctx.lineTo(x - yOffset, y + xOffset);
        break;
      case 'star':
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        ctx.moveTo(x + yOffset, y - xOffset);
        ctx.lineTo(x - yOffset, y + xOffset);
        rad += QUARTER_PI;
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        ctx.moveTo(x + yOffset, y - xOffset);
        ctx.lineTo(x - yOffset, y + xOffset);
        break;
      case 'line':
        xOffset = Math.cos(rad) * radius;
        yOffset = Math.sin(rad) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        break;
      case 'dash':
        ctx.moveTo(x, y);
        ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
        break;
      }
      ctx.fill();
      if (options.borderWidth > 0) {
        ctx.stroke();
      }
    }
    function _isPointInArea(point, area, margin) {
      margin = margin || 0.5;
      return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&
    		point.y > area.top - margin && point.y < area.bottom + margin);
    }
    function clipArea(ctx, area) {
      ctx.save();
      ctx.beginPath();
      ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
      ctx.clip();
    }
    function unclipArea(ctx) {
      ctx.restore();
    }
    function _steppedLineTo(ctx, previous, target, flip, mode) {
      if (!previous) {
        return ctx.lineTo(target.x, target.y);
      }
      if (mode === 'middle') {
        const midpoint = (previous.x + target.x) / 2.0;
        ctx.lineTo(midpoint, previous.y);
        ctx.lineTo(midpoint, target.y);
      } else if (mode === 'after' !== !!flip) {
        ctx.lineTo(previous.x, target.y);
      } else {
        ctx.lineTo(target.x, previous.y);
      }
      ctx.lineTo(target.x, target.y);
    }
    function _bezierCurveTo(ctx, previous, target, flip) {
      if (!previous) {
        return ctx.lineTo(target.x, target.y);
      }
      ctx.bezierCurveTo(
        flip ? previous.cp1x : previous.cp2x,
        flip ? previous.cp1y : previous.cp2y,
        flip ? target.cp2x : target.cp1x,
        flip ? target.cp2y : target.cp1y,
        target.x,
        target.y);
    }
    function renderText(ctx, text, x, y, font, opts = {}) {
      const lines = isArray(text) ? text : [text];
      const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
      let i, line;
      ctx.save();
      ctx.font = font.string;
      setRenderOpts(ctx, opts);
      for (i = 0; i < lines.length; ++i) {
        line = lines[i];
        if (stroke) {
          if (opts.strokeColor) {
            ctx.strokeStyle = opts.strokeColor;
          }
          if (!isNullOrUndef(opts.strokeWidth)) {
            ctx.lineWidth = opts.strokeWidth;
          }
          ctx.strokeText(line, x, y, opts.maxWidth);
        }
        ctx.fillText(line, x, y, opts.maxWidth);
        decorateText(ctx, x, y, line, opts);
        y += font.lineHeight;
      }
      ctx.restore();
    }
    function setRenderOpts(ctx, opts) {
      if (opts.translation) {
        ctx.translate(opts.translation[0], opts.translation[1]);
      }
      if (!isNullOrUndef(opts.rotation)) {
        ctx.rotate(opts.rotation);
      }
      if (opts.color) {
        ctx.fillStyle = opts.color;
      }
      if (opts.textAlign) {
        ctx.textAlign = opts.textAlign;
      }
      if (opts.textBaseline) {
        ctx.textBaseline = opts.textBaseline;
      }
    }
    function decorateText(ctx, x, y, line, opts) {
      if (opts.strikethrough || opts.underline) {
        const metrics = ctx.measureText(line);
        const left = x - metrics.actualBoundingBoxLeft;
        const right = x + metrics.actualBoundingBoxRight;
        const top = y - metrics.actualBoundingBoxAscent;
        const bottom = y + metrics.actualBoundingBoxDescent;
        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
        ctx.strokeStyle = ctx.fillStyle;
        ctx.beginPath();
        ctx.lineWidth = opts.decorationWidth || 2;
        ctx.moveTo(left, yDecoration);
        ctx.lineTo(right, yDecoration);
        ctx.stroke();
      }
    }
    function addRoundedRectPath(ctx, rect) {
      const {x, y, w, h, radius} = rect;
      ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);
      ctx.lineTo(x, y + h - radius.bottomLeft);
      ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
      ctx.lineTo(x + w - radius.bottomRight, y + h);
      ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
      ctx.lineTo(x + w, y + radius.topRight);
      ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
      ctx.lineTo(x + radius.topLeft, y);
    }

    const LINE_HEIGHT = new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
    const FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);
    function toLineHeight(value, size) {
      const matches = ('' + value).match(LINE_HEIGHT);
      if (!matches || matches[1] === 'normal') {
        return size * 1.2;
      }
      value = +matches[2];
      switch (matches[3]) {
      case 'px':
        return value;
      case '%':
        value /= 100;
        break;
      }
      return size * value;
    }
    const numberOrZero = v => +v || 0;
    function _readValueToProps(value, props) {
      const ret = {};
      const objProps = isObject(props);
      const keys = objProps ? Object.keys(props) : props;
      const read = isObject(value)
        ? objProps
          ? prop => valueOrDefault(value[prop], value[props[prop]])
          : prop => value[prop]
        : () => value;
      for (const prop of keys) {
        ret[prop] = numberOrZero(read(prop));
      }
      return ret;
    }
    function toTRBL(value) {
      return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});
    }
    function toTRBLCorners(value) {
      return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);
    }
    function toPadding(value) {
      const obj = toTRBL(value);
      obj.width = obj.left + obj.right;
      obj.height = obj.top + obj.bottom;
      return obj;
    }
    function toFont(options, fallback) {
      options = options || {};
      fallback = fallback || defaults.font;
      let size = valueOrDefault(options.size, fallback.size);
      if (typeof size === 'string') {
        size = parseInt(size, 10);
      }
      let style = valueOrDefault(options.style, fallback.style);
      if (style && !('' + style).match(FONT_STYLE)) {
        console.warn('Invalid font style specified: "' + style + '"');
        style = '';
      }
      const font = {
        family: valueOrDefault(options.family, fallback.family),
        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
        size,
        style,
        weight: valueOrDefault(options.weight, fallback.weight),
        string: ''
      };
      font.string = toFontString(font);
      return font;
    }
    function resolve(inputs, context, index, info) {
      let cacheable = true;
      let i, ilen, value;
      for (i = 0, ilen = inputs.length; i < ilen; ++i) {
        value = inputs[i];
        if (value === undefined) {
          continue;
        }
        if (context !== undefined && typeof value === 'function') {
          value = value(context);
          cacheable = false;
        }
        if (index !== undefined && isArray(value)) {
          value = value[index % value.length];
          cacheable = false;
        }
        if (value !== undefined) {
          if (info && !cacheable) {
            info.cacheable = false;
          }
          return value;
        }
      }
    }
    function _addGrace(minmax, grace, beginAtZero) {
      const {min, max} = minmax;
      const change = toDimension(grace, (max - min) / 2);
      const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;
      return {
        min: keepZero(min, -Math.abs(change)),
        max: keepZero(max, change)
      };
    }
    function createContext(parentContext, context) {
      return Object.assign(Object.create(parentContext), context);
    }

    function _lookup(table, value, cmp) {
      cmp = cmp || ((index) => table[index] < value);
      let hi = table.length - 1;
      let lo = 0;
      let mid;
      while (hi - lo > 1) {
        mid = (lo + hi) >> 1;
        if (cmp(mid)) {
          lo = mid;
        } else {
          hi = mid;
        }
      }
      return {lo, hi};
    }
    const _lookupByKey = (table, key, value) =>
      _lookup(table, value, index => table[index][key] < value);
    const _rlookupByKey = (table, key, value) =>
      _lookup(table, value, index => table[index][key] >= value);
    function _filterBetween(values, min, max) {
      let start = 0;
      let end = values.length;
      while (start < end && values[start] < min) {
        start++;
      }
      while (end > start && values[end - 1] > max) {
        end--;
      }
      return start > 0 || end < values.length
        ? values.slice(start, end)
        : values;
    }
    const arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
    function listenArrayEvents(array, listener) {
      if (array._chartjs) {
        array._chartjs.listeners.push(listener);
        return;
      }
      Object.defineProperty(array, '_chartjs', {
        configurable: true,
        enumerable: false,
        value: {
          listeners: [listener]
        }
      });
      arrayEvents.forEach((key) => {
        const method = '_onData' + _capitalize(key);
        const base = array[key];
        Object.defineProperty(array, key, {
          configurable: true,
          enumerable: false,
          value(...args) {
            const res = base.apply(this, args);
            array._chartjs.listeners.forEach((object) => {
              if (typeof object[method] === 'function') {
                object[method](...args);
              }
            });
            return res;
          }
        });
      });
    }
    function unlistenArrayEvents(array, listener) {
      const stub = array._chartjs;
      if (!stub) {
        return;
      }
      const listeners = stub.listeners;
      const index = listeners.indexOf(listener);
      if (index !== -1) {
        listeners.splice(index, 1);
      }
      if (listeners.length > 0) {
        return;
      }
      arrayEvents.forEach((key) => {
        delete array[key];
      });
      delete array._chartjs;
    }
    function _arrayUnique(items) {
      const set = new Set();
      let i, ilen;
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        set.add(items[i]);
      }
      if (set.size === ilen) {
        return items;
      }
      return Array.from(set);
    }

    function _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {
      if (!defined(fallback)) {
        fallback = _resolve('_fallback', scopes);
      }
      const cache = {
        [Symbol.toStringTag]: 'Object',
        _cacheable: true,
        _scopes: scopes,
        _rootScopes: rootScopes,
        _fallback: fallback,
        _getTarget: getTarget,
        override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),
      };
      return new Proxy(cache, {
        deleteProperty(target, prop) {
          delete target[prop];
          delete target._keys;
          delete scopes[0][prop];
          return true;
        },
        get(target, prop) {
          return _cached(target, prop,
            () => _resolveWithPrefixes(prop, prefixes, scopes, target));
        },
        getOwnPropertyDescriptor(target, prop) {
          return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
        },
        getPrototypeOf() {
          return Reflect.getPrototypeOf(scopes[0]);
        },
        has(target, prop) {
          return getKeysFromAllScopes(target).includes(prop);
        },
        ownKeys(target) {
          return getKeysFromAllScopes(target);
        },
        set(target, prop, value) {
          const storage = target._storage || (target._storage = getTarget());
          target[prop] = storage[prop] = value;
          delete target._keys;
          return true;
        }
      });
    }
    function _attachContext(proxy, context, subProxy, descriptorDefaults) {
      const cache = {
        _cacheable: false,
        _proxy: proxy,
        _context: context,
        _subProxy: subProxy,
        _stack: new Set(),
        _descriptors: _descriptors(proxy, descriptorDefaults),
        setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
        override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
      };
      return new Proxy(cache, {
        deleteProperty(target, prop) {
          delete target[prop];
          delete proxy[prop];
          return true;
        },
        get(target, prop, receiver) {
          return _cached(target, prop,
            () => _resolveWithContext(target, prop, receiver));
        },
        getOwnPropertyDescriptor(target, prop) {
          return target._descriptors.allKeys
            ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined
            : Reflect.getOwnPropertyDescriptor(proxy, prop);
        },
        getPrototypeOf() {
          return Reflect.getPrototypeOf(proxy);
        },
        has(target, prop) {
          return Reflect.has(proxy, prop);
        },
        ownKeys() {
          return Reflect.ownKeys(proxy);
        },
        set(target, prop, value) {
          proxy[prop] = value;
          delete target[prop];
          return true;
        }
      });
    }
    function _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {
      const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;
      return {
        allKeys: _allKeys,
        scriptable: _scriptable,
        indexable: _indexable,
        isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
        isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
      };
    }
    const readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;
    const needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' &&
      (Object.getPrototypeOf(value) === null || value.constructor === Object);
    function _cached(target, prop, resolve) {
      if (Object.prototype.hasOwnProperty.call(target, prop)) {
        return target[prop];
      }
      const value = resolve();
      target[prop] = value;
      return value;
    }
    function _resolveWithContext(target, prop, receiver) {
      const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;
      let value = _proxy[prop];
      if (isFunction(value) && descriptors.isScriptable(prop)) {
        value = _resolveScriptable(prop, value, target, receiver);
      }
      if (isArray(value) && value.length) {
        value = _resolveArray(prop, value, target, descriptors.isIndexable);
      }
      if (needsSubResolver(prop, value)) {
        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
      }
      return value;
    }
    function _resolveScriptable(prop, value, target, receiver) {
      const {_proxy, _context, _subProxy, _stack} = target;
      if (_stack.has(prop)) {
        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);
      }
      _stack.add(prop);
      value = value(_context, _subProxy || receiver);
      _stack.delete(prop);
      if (needsSubResolver(prop, value)) {
        value = createSubResolver(_proxy._scopes, _proxy, prop, value);
      }
      return value;
    }
    function _resolveArray(prop, value, target, isIndexable) {
      const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;
      if (defined(_context.index) && isIndexable(prop)) {
        value = value[_context.index % value.length];
      } else if (isObject(value[0])) {
        const arr = value;
        const scopes = _proxy._scopes.filter(s => s !== arr);
        value = [];
        for (const item of arr) {
          const resolver = createSubResolver(scopes, _proxy, prop, item);
          value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
        }
      }
      return value;
    }
    function resolveFallback(fallback, prop, value) {
      return isFunction(fallback) ? fallback(prop, value) : fallback;
    }
    const getScope = (key, parent) => key === true ? parent
      : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;
    function addScopes(set, parentScopes, key, parentFallback, value) {
      for (const parent of parentScopes) {
        const scope = getScope(key, parent);
        if (scope) {
          set.add(scope);
          const fallback = resolveFallback(scope._fallback, key, value);
          if (defined(fallback) && fallback !== key && fallback !== parentFallback) {
            return fallback;
          }
        } else if (scope === false && defined(parentFallback) && key !== parentFallback) {
          return null;
        }
      }
      return false;
    }
    function createSubResolver(parentScopes, resolver, prop, value) {
      const rootScopes = resolver._rootScopes;
      const fallback = resolveFallback(resolver._fallback, prop, value);
      const allScopes = [...parentScopes, ...rootScopes];
      const set = new Set();
      set.add(value);
      let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
      if (key === null) {
        return false;
      }
      if (defined(fallback) && fallback !== prop) {
        key = addScopesFromKey(set, allScopes, fallback, key, value);
        if (key === null) {
          return false;
        }
      }
      return _createResolver(Array.from(set), [''], rootScopes, fallback,
        () => subGetTarget(resolver, prop, value));
    }
    function addScopesFromKey(set, allScopes, key, fallback, item) {
      while (key) {
        key = addScopes(set, allScopes, key, fallback, item);
      }
      return key;
    }
    function subGetTarget(resolver, prop, value) {
      const parent = resolver._getTarget();
      if (!(prop in parent)) {
        parent[prop] = {};
      }
      const target = parent[prop];
      if (isArray(target) && isObject(value)) {
        return value;
      }
      return target;
    }
    function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
      let value;
      for (const prefix of prefixes) {
        value = _resolve(readKey(prefix, prop), scopes);
        if (defined(value)) {
          return needsSubResolver(prop, value)
            ? createSubResolver(scopes, proxy, prop, value)
            : value;
        }
      }
    }
    function _resolve(key, scopes) {
      for (const scope of scopes) {
        if (!scope) {
          continue;
        }
        const value = scope[key];
        if (defined(value)) {
          return value;
        }
      }
    }
    function getKeysFromAllScopes(target) {
      let keys = target._keys;
      if (!keys) {
        keys = target._keys = resolveKeysFromAllScopes(target._scopes);
      }
      return keys;
    }
    function resolveKeysFromAllScopes(scopes) {
      const set = new Set();
      for (const scope of scopes) {
        for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {
          set.add(key);
        }
      }
      return Array.from(set);
    }

    const EPSILON = Number.EPSILON || 1e-14;
    const getPoint = (points, i) => i < points.length && !points[i].skip && points[i];
    const getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';
    function splineCurve(firstPoint, middlePoint, afterPoint, t) {
      const previous = firstPoint.skip ? middlePoint : firstPoint;
      const current = middlePoint;
      const next = afterPoint.skip ? middlePoint : afterPoint;
      const d01 = distanceBetweenPoints(current, previous);
      const d12 = distanceBetweenPoints(next, current);
      let s01 = d01 / (d01 + d12);
      let s12 = d12 / (d01 + d12);
      s01 = isNaN(s01) ? 0 : s01;
      s12 = isNaN(s12) ? 0 : s12;
      const fa = t * s01;
      const fb = t * s12;
      return {
        previous: {
          x: current.x - fa * (next.x - previous.x),
          y: current.y - fa * (next.y - previous.y)
        },
        next: {
          x: current.x + fb * (next.x - previous.x),
          y: current.y + fb * (next.y - previous.y)
        }
      };
    }
    function monotoneAdjust(points, deltaK, mK) {
      const pointsLen = points.length;
      let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
      let pointAfter = getPoint(points, 0);
      for (let i = 0; i < pointsLen - 1; ++i) {
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent || !pointAfter) {
          continue;
        }
        if (almostEquals(deltaK[i], 0, EPSILON)) {
          mK[i] = mK[i + 1] = 0;
          continue;
        }
        alphaK = mK[i] / deltaK[i];
        betaK = mK[i + 1] / deltaK[i];
        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
        if (squaredMagnitude <= 9) {
          continue;
        }
        tauK = 3 / Math.sqrt(squaredMagnitude);
        mK[i] = alphaK * tauK * deltaK[i];
        mK[i + 1] = betaK * tauK * deltaK[i];
      }
    }
    function monotoneCompute(points, mK, indexAxis = 'x') {
      const valueAxis = getValueAxis(indexAxis);
      const pointsLen = points.length;
      let delta, pointBefore, pointCurrent;
      let pointAfter = getPoint(points, 0);
      for (let i = 0; i < pointsLen; ++i) {
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) {
          continue;
        }
        const iPixel = pointCurrent[indexAxis];
        const vPixel = pointCurrent[valueAxis];
        if (pointBefore) {
          delta = (iPixel - pointBefore[indexAxis]) / 3;
          pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
          pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
        }
        if (pointAfter) {
          delta = (pointAfter[indexAxis] - iPixel) / 3;
          pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
          pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
        }
      }
    }
    function splineCurveMonotone(points, indexAxis = 'x') {
      const valueAxis = getValueAxis(indexAxis);
      const pointsLen = points.length;
      const deltaK = Array(pointsLen).fill(0);
      const mK = Array(pointsLen);
      let i, pointBefore, pointCurrent;
      let pointAfter = getPoint(points, 0);
      for (i = 0; i < pointsLen; ++i) {
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) {
          continue;
        }
        if (pointAfter) {
          const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
          deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
        }
        mK[i] = !pointBefore ? deltaK[i]
          : !pointAfter ? deltaK[i - 1]
          : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0
          : (deltaK[i - 1] + deltaK[i]) / 2;
      }
      monotoneAdjust(points, deltaK, mK);
      monotoneCompute(points, mK, indexAxis);
    }
    function capControlPoint(pt, min, max) {
      return Math.max(Math.min(pt, max), min);
    }
    function capBezierPoints(points, area) {
      let i, ilen, point, inArea, inAreaPrev;
      let inAreaNext = _isPointInArea(points[0], area);
      for (i = 0, ilen = points.length; i < ilen; ++i) {
        inAreaPrev = inArea;
        inArea = inAreaNext;
        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
        if (!inArea) {
          continue;
        }
        point = points[i];
        if (inAreaPrev) {
          point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
          point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
        }
        if (inAreaNext) {
          point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
          point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
        }
      }
    }
    function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
      let i, ilen, point, controlPoints;
      if (options.spanGaps) {
        points = points.filter((pt) => !pt.skip);
      }
      if (options.cubicInterpolationMode === 'monotone') {
        splineCurveMonotone(points, indexAxis);
      } else {
        let prev = loop ? points[points.length - 1] : points[0];
        for (i = 0, ilen = points.length; i < ilen; ++i) {
          point = points[i];
          controlPoints = splineCurve(
            prev,
            point,
            points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],
            options.tension
          );
          point.cp1x = controlPoints.previous.x;
          point.cp1y = controlPoints.previous.y;
          point.cp2x = controlPoints.next.x;
          point.cp2y = controlPoints.next.y;
          prev = point;
        }
      }
      if (options.capBezierPoints) {
        capBezierPoints(points, area);
      }
    }

    function _isDomSupported() {
      return typeof window !== 'undefined' && typeof document !== 'undefined';
    }
    function _getParentNode(domNode) {
      let parent = domNode.parentNode;
      if (parent && parent.toString() === '[object ShadowRoot]') {
        parent = parent.host;
      }
      return parent;
    }
    function parseMaxStyle(styleValue, node, parentProperty) {
      let valueInPixels;
      if (typeof styleValue === 'string') {
        valueInPixels = parseInt(styleValue, 10);
        if (styleValue.indexOf('%') !== -1) {
          valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
        }
      } else {
        valueInPixels = styleValue;
      }
      return valueInPixels;
    }
    const getComputedStyle$1 = (element) => window.getComputedStyle(element, null);
    function getStyle(el, property) {
      return getComputedStyle$1(el).getPropertyValue(property);
    }
    const positions = ['top', 'right', 'bottom', 'left'];
    function getPositionedStyle(styles, style, suffix) {
      const result = {};
      suffix = suffix ? '-' + suffix : '';
      for (let i = 0; i < 4; i++) {
        const pos = positions[i];
        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
      }
      result.width = result.left + result.right;
      result.height = result.top + result.bottom;
      return result;
    }
    const useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);
    function getCanvasPosition(evt, canvas) {
      const e = evt.native || evt;
      const touches = e.touches;
      const source = touches && touches.length ? touches[0] : e;
      const {offsetX, offsetY} = source;
      let box = false;
      let x, y;
      if (useOffsetPos(offsetX, offsetY, e.target)) {
        x = offsetX;
        y = offsetY;
      } else {
        const rect = canvas.getBoundingClientRect();
        x = source.clientX - rect.left;
        y = source.clientY - rect.top;
        box = true;
      }
      return {x, y, box};
    }
    function getRelativePosition(evt, chart) {
      const {canvas, currentDevicePixelRatio} = chart;
      const style = getComputedStyle$1(canvas);
      const borderBox = style.boxSizing === 'border-box';
      const paddings = getPositionedStyle(style, 'padding');
      const borders = getPositionedStyle(style, 'border', 'width');
      const {x, y, box} = getCanvasPosition(evt, canvas);
      const xOffset = paddings.left + (box && borders.left);
      const yOffset = paddings.top + (box && borders.top);
      let {width, height} = chart;
      if (borderBox) {
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
      }
      return {
        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
      };
    }
    function getContainerSize(canvas, width, height) {
      let maxWidth, maxHeight;
      if (width === undefined || height === undefined) {
        const container = _getParentNode(canvas);
        if (!container) {
          width = canvas.clientWidth;
          height = canvas.clientHeight;
        } else {
          const rect = container.getBoundingClientRect();
          const containerStyle = getComputedStyle$1(container);
          const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
          const containerPadding = getPositionedStyle(containerStyle, 'padding');
          width = rect.width - containerPadding.width - containerBorder.width;
          height = rect.height - containerPadding.height - containerBorder.height;
          maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
          maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
        }
      }
      return {
        width,
        height,
        maxWidth: maxWidth || INFINITY,
        maxHeight: maxHeight || INFINITY
      };
    }
    const round1 = v => Math.round(v * 10) / 10;
    function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
      const style = getComputedStyle$1(canvas);
      const margins = getPositionedStyle(style, 'margin');
      const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
      const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
      const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
      let {width, height} = containerSize;
      if (style.boxSizing === 'content-box') {
        const borders = getPositionedStyle(style, 'border', 'width');
        const paddings = getPositionedStyle(style, 'padding');
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
      }
      width = Math.max(0, width - margins.width);
      height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);
      width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
      height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
      if (width && !height) {
        height = round1(width / 2);
      }
      return {
        width,
        height
      };
    }
    function retinaScale(chart, forceRatio, forceStyle) {
      const pixelRatio = forceRatio || 1;
      const deviceHeight = Math.floor(chart.height * pixelRatio);
      const deviceWidth = Math.floor(chart.width * pixelRatio);
      chart.height = deviceHeight / pixelRatio;
      chart.width = deviceWidth / pixelRatio;
      const canvas = chart.canvas;
      if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {
        canvas.style.height = `${chart.height}px`;
        canvas.style.width = `${chart.width}px`;
      }
      if (chart.currentDevicePixelRatio !== pixelRatio
          || canvas.height !== deviceHeight
          || canvas.width !== deviceWidth) {
        chart.currentDevicePixelRatio = pixelRatio;
        canvas.height = deviceHeight;
        canvas.width = deviceWidth;
        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
        return true;
      }
      return false;
    }
    const supportsEventListenerOptions = (function() {
      let passiveSupported = false;
      try {
        const options = {
          get passive() {
            passiveSupported = true;
            return false;
          }
        };
        window.addEventListener('test', null, options);
        window.removeEventListener('test', null, options);
      } catch (e) {
      }
      return passiveSupported;
    }());
    function readUsedSize(element, property) {
      const value = getStyle(element, property);
      const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
      return matches ? +matches[1] : undefined;
    }

    function _pointInLine(p1, p2, t, mode) {
      return {
        x: p1.x + t * (p2.x - p1.x),
        y: p1.y + t * (p2.y - p1.y)
      };
    }
    function _steppedInterpolation(p1, p2, t, mode) {
      return {
        x: p1.x + t * (p2.x - p1.x),
        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y
        : mode === 'after' ? t < 1 ? p1.y : p2.y
        : t > 0 ? p2.y : p1.y
      };
    }
    function _bezierInterpolation(p1, p2, t, mode) {
      const cp1 = {x: p1.cp2x, y: p1.cp2y};
      const cp2 = {x: p2.cp1x, y: p2.cp1y};
      const a = _pointInLine(p1, cp1, t);
      const b = _pointInLine(cp1, cp2, t);
      const c = _pointInLine(cp2, p2, t);
      const d = _pointInLine(a, b, t);
      const e = _pointInLine(b, c, t);
      return _pointInLine(d, e, t);
    }

    const intlCache = new Map();
    function getNumberFormat(locale, options) {
      options = options || {};
      const cacheKey = locale + JSON.stringify(options);
      let formatter = intlCache.get(cacheKey);
      if (!formatter) {
        formatter = new Intl.NumberFormat(locale, options);
        intlCache.set(cacheKey, formatter);
      }
      return formatter;
    }
    function formatNumber(num, locale, options) {
      return getNumberFormat(locale, options).format(num);
    }

    const getRightToLeftAdapter = function(rectX, width) {
      return {
        x(x) {
          return rectX + rectX + width - x;
        },
        setWidth(w) {
          width = w;
        },
        textAlign(align) {
          if (align === 'center') {
            return align;
          }
          return align === 'right' ? 'left' : 'right';
        },
        xPlus(x, value) {
          return x - value;
        },
        leftForLtr(x, itemWidth) {
          return x - itemWidth;
        },
      };
    };
    const getLeftToRightAdapter = function() {
      return {
        x(x) {
          return x;
        },
        setWidth(w) {
        },
        textAlign(align) {
          return align;
        },
        xPlus(x, value) {
          return x + value;
        },
        leftForLtr(x, _itemWidth) {
          return x;
        },
      };
    };
    function getRtlAdapter(rtl, rectX, width) {
      return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
    }
    function overrideTextDirection(ctx, direction) {
      let style, original;
      if (direction === 'ltr' || direction === 'rtl') {
        style = ctx.canvas.style;
        original = [
          style.getPropertyValue('direction'),
          style.getPropertyPriority('direction'),
        ];
        style.setProperty('direction', direction, 'important');
        ctx.prevTextDirection = original;
      }
    }
    function restoreTextDirection(ctx, original) {
      if (original !== undefined) {
        delete ctx.prevTextDirection;
        ctx.canvas.style.setProperty('direction', original[0], original[1]);
      }
    }

    function propertyFn(property) {
      if (property === 'angle') {
        return {
          between: _angleBetween,
          compare: _angleDiff,
          normalize: _normalizeAngle,
        };
      }
      return {
        between: _isBetween,
        compare: (a, b) => a - b,
        normalize: x => x
      };
    }
    function normalizeSegment({start, end, count, loop, style}) {
      return {
        start: start % count,
        end: end % count,
        loop: loop && (end - start + 1) % count === 0,
        style
      };
    }
    function getSegment(segment, points, bounds) {
      const {property, start: startBound, end: endBound} = bounds;
      const {between, normalize} = propertyFn(property);
      const count = points.length;
      let {start, end, loop} = segment;
      let i, ilen;
      if (loop) {
        start += count;
        end += count;
        for (i = 0, ilen = count; i < ilen; ++i) {
          if (!between(normalize(points[start % count][property]), startBound, endBound)) {
            break;
          }
          start--;
          end--;
        }
        start %= count;
        end %= count;
      }
      if (end < start) {
        end += count;
      }
      return {start, end, loop, style: segment.style};
    }
    function _boundSegment(segment, points, bounds) {
      if (!bounds) {
        return [segment];
      }
      const {property, start: startBound, end: endBound} = bounds;
      const count = points.length;
      const {compare, between, normalize} = propertyFn(property);
      const {start, end, loop, style} = getSegment(segment, points, bounds);
      const result = [];
      let inside = false;
      let subStart = null;
      let value, point, prevValue;
      const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
      const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
      const shouldStart = () => inside || startIsBefore();
      const shouldStop = () => !inside || endIsBefore();
      for (let i = start, prev = start; i <= end; ++i) {
        point = points[i % count];
        if (point.skip) {
          continue;
        }
        value = normalize(point[property]);
        if (value === prevValue) {
          continue;
        }
        inside = between(value, startBound, endBound);
        if (subStart === null && shouldStart()) {
          subStart = compare(value, startBound) === 0 ? i : prev;
        }
        if (subStart !== null && shouldStop()) {
          result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));
          subStart = null;
        }
        prev = i;
        prevValue = value;
      }
      if (subStart !== null) {
        result.push(normalizeSegment({start: subStart, end, loop, count, style}));
      }
      return result;
    }
    function _boundSegments(line, bounds) {
      const result = [];
      const segments = line.segments;
      for (let i = 0; i < segments.length; i++) {
        const sub = _boundSegment(segments[i], line.points, bounds);
        if (sub.length) {
          result.push(...sub);
        }
      }
      return result;
    }
    function findStartAndEnd(points, count, loop, spanGaps) {
      let start = 0;
      let end = count - 1;
      if (loop && !spanGaps) {
        while (start < count && !points[start].skip) {
          start++;
        }
      }
      while (start < count && points[start].skip) {
        start++;
      }
      start %= count;
      if (loop) {
        end += start;
      }
      while (end > start && points[end % count].skip) {
        end--;
      }
      end %= count;
      return {start, end};
    }
    function solidSegments(points, start, max, loop) {
      const count = points.length;
      const result = [];
      let last = start;
      let prev = points[start];
      let end;
      for (end = start + 1; end <= max; ++end) {
        const cur = points[end % count];
        if (cur.skip || cur.stop) {
          if (!prev.skip) {
            loop = false;
            result.push({start: start % count, end: (end - 1) % count, loop});
            start = last = cur.stop ? end : null;
          }
        } else {
          last = end;
          if (prev.skip) {
            start = end;
          }
        }
        prev = cur;
      }
      if (last !== null) {
        result.push({start: start % count, end: last % count, loop});
      }
      return result;
    }
    function _computeSegments(line, segmentOptions) {
      const points = line.points;
      const spanGaps = line.options.spanGaps;
      const count = points.length;
      if (!count) {
        return [];
      }
      const loop = !!line._loop;
      const {start, end} = findStartAndEnd(points, count, loop, spanGaps);
      if (spanGaps === true) {
        return splitByStyles(line, [{start, end, loop}], points, segmentOptions);
      }
      const max = end < start ? end + count : end;
      const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
      return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
    }
    function splitByStyles(line, segments, points, segmentOptions) {
      if (!segmentOptions || !segmentOptions.setContext || !points) {
        return segments;
      }
      return doSplitByStyles(line, segments, points, segmentOptions);
    }
    function doSplitByStyles(line, segments, points, segmentOptions) {
      const chartContext = line._chart.getContext();
      const baseStyle = readStyle(line.options);
      const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;
      const count = points.length;
      const result = [];
      let prevStyle = baseStyle;
      let start = segments[0].start;
      let i = start;
      function addStyle(s, e, l, st) {
        const dir = spanGaps ? -1 : 1;
        if (s === e) {
          return;
        }
        s += count;
        while (points[s % count].skip) {
          s -= dir;
        }
        while (points[e % count].skip) {
          e += dir;
        }
        if (s % count !== e % count) {
          result.push({start: s % count, end: e % count, loop: l, style: st});
          prevStyle = st;
          start = e % count;
        }
      }
      for (const segment of segments) {
        start = spanGaps ? start : segment.start;
        let prev = points[start % count];
        let style;
        for (i = start + 1; i <= segment.end; i++) {
          const pt = points[i % count];
          style = readStyle(segmentOptions.setContext(createContext(chartContext, {
            type: 'segment',
            p0: prev,
            p1: pt,
            p0DataIndex: (i - 1) % count,
            p1DataIndex: i % count,
            datasetIndex
          })));
          if (styleChanged(style, prevStyle)) {
            addStyle(start, i - 1, segment.loop, prevStyle);
          }
          prev = pt;
          prevStyle = style;
        }
        if (start < i - 1) {
          addStyle(start, i - 1, segment.loop, prevStyle);
        }
      }
      return result;
    }
    function readStyle(options) {
      return {
        backgroundColor: options.backgroundColor,
        borderCapStyle: options.borderCapStyle,
        borderDash: options.borderDash,
        borderDashOffset: options.borderDashOffset,
        borderJoinStyle: options.borderJoinStyle,
        borderWidth: options.borderWidth,
        borderColor: options.borderColor
      };
    }
    function styleChanged(style, prevStyle) {
      return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);
    }

    /*!
     * Chart.js v3.7.0
     * https://www.chartjs.org
     * (c) 2021 Chart.js Contributors
     * Released under the MIT License
     */

    class Animator {
      constructor() {
        this._request = null;
        this._charts = new Map();
        this._running = false;
        this._lastDate = undefined;
      }
      _notify(chart, anims, date, type) {
        const callbacks = anims.listeners[type];
        const numSteps = anims.duration;
        callbacks.forEach(fn => fn({
          chart,
          initial: anims.initial,
          numSteps,
          currentStep: Math.min(date - anims.start, numSteps)
        }));
      }
      _refresh() {
        if (this._request) {
          return;
        }
        this._running = true;
        this._request = requestAnimFrame.call(window, () => {
          this._update();
          this._request = null;
          if (this._running) {
            this._refresh();
          }
        });
      }
      _update(date = Date.now()) {
        let remaining = 0;
        this._charts.forEach((anims, chart) => {
          if (!anims.running || !anims.items.length) {
            return;
          }
          const items = anims.items;
          let i = items.length - 1;
          let draw = false;
          let item;
          for (; i >= 0; --i) {
            item = items[i];
            if (item._active) {
              if (item._total > anims.duration) {
                anims.duration = item._total;
              }
              item.tick(date);
              draw = true;
            } else {
              items[i] = items[items.length - 1];
              items.pop();
            }
          }
          if (draw) {
            chart.draw();
            this._notify(chart, anims, date, 'progress');
          }
          if (!items.length) {
            anims.running = false;
            this._notify(chart, anims, date, 'complete');
            anims.initial = false;
          }
          remaining += items.length;
        });
        this._lastDate = date;
        if (remaining === 0) {
          this._running = false;
        }
      }
      _getAnims(chart) {
        const charts = this._charts;
        let anims = charts.get(chart);
        if (!anims) {
          anims = {
            running: false,
            initial: true,
            items: [],
            listeners: {
              complete: [],
              progress: []
            }
          };
          charts.set(chart, anims);
        }
        return anims;
      }
      listen(chart, event, cb) {
        this._getAnims(chart).listeners[event].push(cb);
      }
      add(chart, items) {
        if (!items || !items.length) {
          return;
        }
        this._getAnims(chart).items.push(...items);
      }
      has(chart) {
        return this._getAnims(chart).items.length > 0;
      }
      start(chart) {
        const anims = this._charts.get(chart);
        if (!anims) {
          return;
        }
        anims.running = true;
        anims.start = Date.now();
        anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
        this._refresh();
      }
      running(chart) {
        if (!this._running) {
          return false;
        }
        const anims = this._charts.get(chart);
        if (!anims || !anims.running || !anims.items.length) {
          return false;
        }
        return true;
      }
      stop(chart) {
        const anims = this._charts.get(chart);
        if (!anims || !anims.items.length) {
          return;
        }
        const items = anims.items;
        let i = items.length - 1;
        for (; i >= 0; --i) {
          items[i].cancel();
        }
        anims.items = [];
        this._notify(chart, anims, Date.now(), 'complete');
      }
      remove(chart) {
        return this._charts.delete(chart);
      }
    }
    var animator = new Animator();

    const transparent = 'transparent';
    const interpolators = {
      boolean(from, to, factor) {
        return factor > 0.5 ? to : from;
      },
      color(from, to, factor) {
        const c0 = color(from || transparent);
        const c1 = c0.valid && color(to || transparent);
        return c1 && c1.valid
          ? c1.mix(c0, factor).hexString()
          : to;
      },
      number(from, to, factor) {
        return from + (to - from) * factor;
      }
    };
    class Animation {
      constructor(cfg, target, prop, to) {
        const currentValue = target[prop];
        to = resolve([cfg.to, to, currentValue, cfg.from]);
        const from = resolve([cfg.from, currentValue, to]);
        this._active = true;
        this._fn = cfg.fn || interpolators[cfg.type || typeof from];
        this._easing = effects[cfg.easing] || effects.linear;
        this._start = Math.floor(Date.now() + (cfg.delay || 0));
        this._duration = this._total = Math.floor(cfg.duration);
        this._loop = !!cfg.loop;
        this._target = target;
        this._prop = prop;
        this._from = from;
        this._to = to;
        this._promises = undefined;
      }
      active() {
        return this._active;
      }
      update(cfg, to, date) {
        if (this._active) {
          this._notify(false);
          const currentValue = this._target[this._prop];
          const elapsed = date - this._start;
          const remain = this._duration - elapsed;
          this._start = date;
          this._duration = Math.floor(Math.max(remain, cfg.duration));
          this._total += elapsed;
          this._loop = !!cfg.loop;
          this._to = resolve([cfg.to, to, currentValue, cfg.from]);
          this._from = resolve([cfg.from, currentValue, to]);
        }
      }
      cancel() {
        if (this._active) {
          this.tick(Date.now());
          this._active = false;
          this._notify(false);
        }
      }
      tick(date) {
        const elapsed = date - this._start;
        const duration = this._duration;
        const prop = this._prop;
        const from = this._from;
        const loop = this._loop;
        const to = this._to;
        let factor;
        this._active = from !== to && (loop || (elapsed < duration));
        if (!this._active) {
          this._target[prop] = to;
          this._notify(true);
          return;
        }
        if (elapsed < 0) {
          this._target[prop] = from;
          return;
        }
        factor = (elapsed / duration) % 2;
        factor = loop && factor > 1 ? 2 - factor : factor;
        factor = this._easing(Math.min(1, Math.max(0, factor)));
        this._target[prop] = this._fn(from, to, factor);
      }
      wait() {
        const promises = this._promises || (this._promises = []);
        return new Promise((res, rej) => {
          promises.push({res, rej});
        });
      }
      _notify(resolved) {
        const method = resolved ? 'res' : 'rej';
        const promises = this._promises || [];
        for (let i = 0; i < promises.length; i++) {
          promises[i][method]();
        }
      }
    }

    const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];
    const colors = ['color', 'borderColor', 'backgroundColor'];
    defaults.set('animation', {
      delay: undefined,
      duration: 1000,
      easing: 'easeOutQuart',
      fn: undefined,
      from: undefined,
      loop: undefined,
      to: undefined,
      type: undefined,
    });
    const animationOptions = Object.keys(defaults.animation);
    defaults.describe('animation', {
      _fallback: false,
      _indexable: false,
      _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',
    });
    defaults.set('animations', {
      colors: {
        type: 'color',
        properties: colors
      },
      numbers: {
        type: 'number',
        properties: numbers
      },
    });
    defaults.describe('animations', {
      _fallback: 'animation',
    });
    defaults.set('transitions', {
      active: {
        animation: {
          duration: 400
        }
      },
      resize: {
        animation: {
          duration: 0
        }
      },
      show: {
        animations: {
          colors: {
            from: 'transparent'
          },
          visible: {
            type: 'boolean',
            duration: 0
          },
        }
      },
      hide: {
        animations: {
          colors: {
            to: 'transparent'
          },
          visible: {
            type: 'boolean',
            easing: 'linear',
            fn: v => v | 0
          },
        }
      }
    });
    class Animations {
      constructor(chart, config) {
        this._chart = chart;
        this._properties = new Map();
        this.configure(config);
      }
      configure(config) {
        if (!isObject(config)) {
          return;
        }
        const animatedProps = this._properties;
        Object.getOwnPropertyNames(config).forEach(key => {
          const cfg = config[key];
          if (!isObject(cfg)) {
            return;
          }
          const resolved = {};
          for (const option of animationOptions) {
            resolved[option] = cfg[option];
          }
          (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {
            if (prop === key || !animatedProps.has(prop)) {
              animatedProps.set(prop, resolved);
            }
          });
        });
      }
      _animateOptions(target, values) {
        const newOptions = values.options;
        const options = resolveTargetOptions(target, newOptions);
        if (!options) {
          return [];
        }
        const animations = this._createAnimations(options, newOptions);
        if (newOptions.$shared) {
          awaitAll(target.options.$animations, newOptions).then(() => {
            target.options = newOptions;
          }, () => {
          });
        }
        return animations;
      }
      _createAnimations(target, values) {
        const animatedProps = this._properties;
        const animations = [];
        const running = target.$animations || (target.$animations = {});
        const props = Object.keys(values);
        const date = Date.now();
        let i;
        for (i = props.length - 1; i >= 0; --i) {
          const prop = props[i];
          if (prop.charAt(0) === '$') {
            continue;
          }
          if (prop === 'options') {
            animations.push(...this._animateOptions(target, values));
            continue;
          }
          const value = values[prop];
          let animation = running[prop];
          const cfg = animatedProps.get(prop);
          if (animation) {
            if (cfg && animation.active()) {
              animation.update(cfg, value, date);
              continue;
            } else {
              animation.cancel();
            }
          }
          if (!cfg || !cfg.duration) {
            target[prop] = value;
            continue;
          }
          running[prop] = animation = new Animation(cfg, target, prop, value);
          animations.push(animation);
        }
        return animations;
      }
      update(target, values) {
        if (this._properties.size === 0) {
          Object.assign(target, values);
          return;
        }
        const animations = this._createAnimations(target, values);
        if (animations.length) {
          animator.add(this._chart, animations);
          return true;
        }
      }
    }
    function awaitAll(animations, properties) {
      const running = [];
      const keys = Object.keys(properties);
      for (let i = 0; i < keys.length; i++) {
        const anim = animations[keys[i]];
        if (anim && anim.active()) {
          running.push(anim.wait());
        }
      }
      return Promise.all(running);
    }
    function resolveTargetOptions(target, newOptions) {
      if (!newOptions) {
        return;
      }
      let options = target.options;
      if (!options) {
        target.options = newOptions;
        return;
      }
      if (options.$shared) {
        target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});
      }
      return options;
    }

    function scaleClip(scale, allowedOverflow) {
      const opts = scale && scale.options || {};
      const reverse = opts.reverse;
      const min = opts.min === undefined ? allowedOverflow : 0;
      const max = opts.max === undefined ? allowedOverflow : 0;
      return {
        start: reverse ? max : min,
        end: reverse ? min : max
      };
    }
    function defaultClip(xScale, yScale, allowedOverflow) {
      if (allowedOverflow === false) {
        return false;
      }
      const x = scaleClip(xScale, allowedOverflow);
      const y = scaleClip(yScale, allowedOverflow);
      return {
        top: y.end,
        right: x.end,
        bottom: y.start,
        left: x.start
      };
    }
    function toClip(value) {
      let t, r, b, l;
      if (isObject(value)) {
        t = value.top;
        r = value.right;
        b = value.bottom;
        l = value.left;
      } else {
        t = r = b = l = value;
      }
      return {
        top: t,
        right: r,
        bottom: b,
        left: l,
        disabled: value === false
      };
    }
    function getSortedDatasetIndices(chart, filterVisible) {
      const keys = [];
      const metasets = chart._getSortedDatasetMetas(filterVisible);
      let i, ilen;
      for (i = 0, ilen = metasets.length; i < ilen; ++i) {
        keys.push(metasets[i].index);
      }
      return keys;
    }
    function applyStack(stack, value, dsIndex, options = {}) {
      const keys = stack.keys;
      const singleMode = options.mode === 'single';
      let i, ilen, datasetIndex, otherValue;
      if (value === null) {
        return;
      }
      for (i = 0, ilen = keys.length; i < ilen; ++i) {
        datasetIndex = +keys[i];
        if (datasetIndex === dsIndex) {
          if (options.all) {
            continue;
          }
          break;
        }
        otherValue = stack.values[datasetIndex];
        if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {
          value += otherValue;
        }
      }
      return value;
    }
    function convertObjectDataToArray(data) {
      const keys = Object.keys(data);
      const adata = new Array(keys.length);
      let i, ilen, key;
      for (i = 0, ilen = keys.length; i < ilen; ++i) {
        key = keys[i];
        adata[i] = {
          x: key,
          y: data[key]
        };
      }
      return adata;
    }
    function isStacked(scale, meta) {
      const stacked = scale && scale.options.stacked;
      return stacked || (stacked === undefined && meta.stack !== undefined);
    }
    function getStackKey(indexScale, valueScale, meta) {
      return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
    }
    function getUserBounds(scale) {
      const {min, max, minDefined, maxDefined} = scale.getUserBounds();
      return {
        min: minDefined ? min : Number.NEGATIVE_INFINITY,
        max: maxDefined ? max : Number.POSITIVE_INFINITY
      };
    }
    function getOrCreateStack(stacks, stackKey, indexValue) {
      const subStack = stacks[stackKey] || (stacks[stackKey] = {});
      return subStack[indexValue] || (subStack[indexValue] = {});
    }
    function getLastIndexInStack(stack, vScale, positive, type) {
      for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
        const value = stack[meta.index];
        if ((positive && value > 0) || (!positive && value < 0)) {
          return meta.index;
        }
      }
      return null;
    }
    function updateStacks(controller, parsed) {
      const {chart, _cachedMeta: meta} = controller;
      const stacks = chart._stacks || (chart._stacks = {});
      const {iScale, vScale, index: datasetIndex} = meta;
      const iAxis = iScale.axis;
      const vAxis = vScale.axis;
      const key = getStackKey(iScale, vScale, meta);
      const ilen = parsed.length;
      let stack;
      for (let i = 0; i < ilen; ++i) {
        const item = parsed[i];
        const {[iAxis]: index, [vAxis]: value} = item;
        const itemStacks = item._stacks || (item._stacks = {});
        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
        stack[datasetIndex] = value;
        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
      }
    }
    function getFirstScaleId(chart, axis) {
      const scales = chart.scales;
      return Object.keys(scales).filter(key => scales[key].axis === axis).shift();
    }
    function createDatasetContext(parent, index) {
      return createContext(parent,
        {
          active: false,
          dataset: undefined,
          datasetIndex: index,
          index,
          mode: 'default',
          type: 'dataset'
        }
      );
    }
    function createDataContext(parent, index, element) {
      return createContext(parent, {
        active: false,
        dataIndex: index,
        parsed: undefined,
        raw: undefined,
        element,
        index,
        mode: 'default',
        type: 'data'
      });
    }
    function clearStacks(meta, items) {
      const datasetIndex = meta.controller.index;
      const axis = meta.vScale && meta.vScale.axis;
      if (!axis) {
        return;
      }
      items = items || meta._parsed;
      for (const parsed of items) {
        const stacks = parsed._stacks;
        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {
          return;
        }
        delete stacks[axis][datasetIndex];
      }
    }
    const isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';
    const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
    const createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked
      && {keys: getSortedDatasetIndices(chart, true), values: null};
    class DatasetController {
      constructor(chart, datasetIndex) {
        this.chart = chart;
        this._ctx = chart.ctx;
        this.index = datasetIndex;
        this._cachedDataOpts = {};
        this._cachedMeta = this.getMeta();
        this._type = this._cachedMeta.type;
        this.options = undefined;
        this._parsing = false;
        this._data = undefined;
        this._objectData = undefined;
        this._sharedOptions = undefined;
        this._drawStart = undefined;
        this._drawCount = undefined;
        this.enableOptionSharing = false;
        this.$context = undefined;
        this._syncList = [];
        this.initialize();
      }
      initialize() {
        const meta = this._cachedMeta;
        this.configure();
        this.linkScales();
        meta._stacked = isStacked(meta.vScale, meta);
        this.addElements();
      }
      updateIndex(datasetIndex) {
        if (this.index !== datasetIndex) {
          clearStacks(this._cachedMeta);
        }
        this.index = datasetIndex;
      }
      linkScales() {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;
        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));
        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));
        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));
        const indexAxis = meta.indexAxis;
        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
        meta.xScale = this.getScaleForId(xid);
        meta.yScale = this.getScaleForId(yid);
        meta.rScale = this.getScaleForId(rid);
        meta.iScale = this.getScaleForId(iid);
        meta.vScale = this.getScaleForId(vid);
      }
      getDataset() {
        return this.chart.data.datasets[this.index];
      }
      getMeta() {
        return this.chart.getDatasetMeta(this.index);
      }
      getScaleForId(scaleID) {
        return this.chart.scales[scaleID];
      }
      _getOtherScale(scale) {
        const meta = this._cachedMeta;
        return scale === meta.iScale
          ? meta.vScale
          : meta.iScale;
      }
      reset() {
        this._update('reset');
      }
      _destroy() {
        const meta = this._cachedMeta;
        if (this._data) {
          unlistenArrayEvents(this._data, this);
        }
        if (meta._stacked) {
          clearStacks(meta);
        }
      }
      _dataCheck() {
        const dataset = this.getDataset();
        const data = dataset.data || (dataset.data = []);
        const _data = this._data;
        if (isObject(data)) {
          this._data = convertObjectDataToArray(data);
        } else if (_data !== data) {
          if (_data) {
            unlistenArrayEvents(_data, this);
            const meta = this._cachedMeta;
            clearStacks(meta);
            meta._parsed = [];
          }
          if (data && Object.isExtensible(data)) {
            listenArrayEvents(data, this);
          }
          this._syncList = [];
          this._data = data;
        }
      }
      addElements() {
        const meta = this._cachedMeta;
        this._dataCheck();
        if (this.datasetElementType) {
          meta.dataset = new this.datasetElementType();
        }
      }
      buildOrUpdateElements(resetNewElements) {
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        let stackChanged = false;
        this._dataCheck();
        const oldStacked = meta._stacked;
        meta._stacked = isStacked(meta.vScale, meta);
        if (meta.stack !== dataset.stack) {
          stackChanged = true;
          clearStacks(meta);
          meta.stack = dataset.stack;
        }
        this._resyncElements(resetNewElements);
        if (stackChanged || oldStacked !== meta._stacked) {
          updateStacks(this, meta._parsed);
        }
      }
      configure() {
        const config = this.chart.config;
        const scopeKeys = config.datasetScopeKeys(this._type);
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
        this.options = config.createResolver(scopes, this.getContext());
        this._parsing = this.options.parsing;
        this._cachedDataOpts = {};
      }
      parse(start, count) {
        const {_cachedMeta: meta, _data: data} = this;
        const {iScale, _stacked} = meta;
        const iAxis = iScale.axis;
        let sorted = start === 0 && count === data.length ? true : meta._sorted;
        let prev = start > 0 && meta._parsed[start - 1];
        let i, cur, parsed;
        if (this._parsing === false) {
          meta._parsed = data;
          meta._sorted = true;
          parsed = data;
        } else {
          if (isArray(data[start])) {
            parsed = this.parseArrayData(meta, data, start, count);
          } else if (isObject(data[start])) {
            parsed = this.parseObjectData(meta, data, start, count);
          } else {
            parsed = this.parsePrimitiveData(meta, data, start, count);
          }
          const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);
          for (i = 0; i < count; ++i) {
            meta._parsed[i + start] = cur = parsed[i];
            if (sorted) {
              if (isNotInOrderComparedToPrev()) {
                sorted = false;
              }
              prev = cur;
            }
          }
          meta._sorted = sorted;
        }
        if (_stacked) {
          updateStacks(this, parsed);
        }
      }
      parsePrimitiveData(meta, data, start, count) {
        const {iScale, vScale} = meta;
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const labels = iScale.getLabels();
        const singleScale = iScale === vScale;
        const parsed = new Array(count);
        let i, ilen, index;
        for (i = 0, ilen = count; i < ilen; ++i) {
          index = i + start;
          parsed[i] = {
            [iAxis]: singleScale || iScale.parse(labels[index], index),
            [vAxis]: vScale.parse(data[index], index)
          };
        }
        return parsed;
      }
      parseArrayData(meta, data, start, count) {
        const {xScale, yScale} = meta;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for (i = 0, ilen = count; i < ilen; ++i) {
          index = i + start;
          item = data[index];
          parsed[i] = {
            x: xScale.parse(item[0], index),
            y: yScale.parse(item[1], index)
          };
        }
        return parsed;
      }
      parseObjectData(meta, data, start, count) {
        const {xScale, yScale} = meta;
        const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for (i = 0, ilen = count; i < ilen; ++i) {
          index = i + start;
          item = data[index];
          parsed[i] = {
            x: xScale.parse(resolveObjectKey(item, xAxisKey), index),
            y: yScale.parse(resolveObjectKey(item, yAxisKey), index)
          };
        }
        return parsed;
      }
      getParsed(index) {
        return this._cachedMeta._parsed[index];
      }
      getDataElement(index) {
        return this._cachedMeta.data[index];
      }
      applyStack(scale, parsed, mode) {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const value = parsed[scale.axis];
        const stack = {
          keys: getSortedDatasetIndices(chart, true),
          values: parsed._stacks[scale.axis]
        };
        return applyStack(stack, value, meta.index, {mode});
      }
      updateRangeFromParsed(range, scale, parsed, stack) {
        const parsedValue = parsed[scale.axis];
        let value = parsedValue === null ? NaN : parsedValue;
        const values = stack && parsed._stacks[scale.axis];
        if (stack && values) {
          stack.values = values;
          value = applyStack(stack, parsedValue, this._cachedMeta.index);
        }
        range.min = Math.min(range.min, value);
        range.max = Math.max(range.max, value);
      }
      getMinMax(scale, canStack) {
        const meta = this._cachedMeta;
        const _parsed = meta._parsed;
        const sorted = meta._sorted && scale === meta.iScale;
        const ilen = _parsed.length;
        const otherScale = this._getOtherScale(scale);
        const stack = createStack(canStack, meta, this.chart);
        const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};
        const {min: otherMin, max: otherMax} = getUserBounds(otherScale);
        let i, parsed;
        function _skip() {
          parsed = _parsed[i];
          const otherValue = parsed[otherScale.axis];
          return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
        }
        for (i = 0; i < ilen; ++i) {
          if (_skip()) {
            continue;
          }
          this.updateRangeFromParsed(range, scale, parsed, stack);
          if (sorted) {
            break;
          }
        }
        if (sorted) {
          for (i = ilen - 1; i >= 0; --i) {
            if (_skip()) {
              continue;
            }
            this.updateRangeFromParsed(range, scale, parsed, stack);
            break;
          }
        }
        return range;
      }
      getAllParsedValues(scale) {
        const parsed = this._cachedMeta._parsed;
        const values = [];
        let i, ilen, value;
        for (i = 0, ilen = parsed.length; i < ilen; ++i) {
          value = parsed[i][scale.axis];
          if (isNumberFinite(value)) {
            values.push(value);
          }
        }
        return values;
      }
      getMaxOverflow() {
        return false;
      }
      getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const vScale = meta.vScale;
        const parsed = this.getParsed(index);
        return {
          label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
          value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
        };
      }
      _update(mode) {
        const meta = this._cachedMeta;
        this.update(mode || 'default');
        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
      }
      update(mode) {}
      draw() {
        const ctx = this._ctx;
        const chart = this.chart;
        const meta = this._cachedMeta;
        const elements = meta.data || [];
        const area = chart.chartArea;
        const active = [];
        const start = this._drawStart || 0;
        const count = this._drawCount || (elements.length - start);
        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
        let i;
        if (meta.dataset) {
          meta.dataset.draw(ctx, area, start, count);
        }
        for (i = start; i < start + count; ++i) {
          const element = elements[i];
          if (element.hidden) {
            continue;
          }
          if (element.active && drawActiveElementsOnTop) {
            active.push(element);
          } else {
            element.draw(ctx, area);
          }
        }
        for (i = 0; i < active.length; ++i) {
          active[i].draw(ctx, area);
        }
      }
      getStyle(index, active) {
        const mode = active ? 'active' : 'default';
        return index === undefined && this._cachedMeta.dataset
          ? this.resolveDatasetElementOptions(mode)
          : this.resolveDataElementOptions(index || 0, mode);
      }
      getContext(index, active, mode) {
        const dataset = this.getDataset();
        let context;
        if (index >= 0 && index < this._cachedMeta.data.length) {
          const element = this._cachedMeta.data[index];
          context = element.$context ||
            (element.$context = createDataContext(this.getContext(), index, element));
          context.parsed = this.getParsed(index);
          context.raw = dataset.data[index];
          context.index = context.dataIndex = index;
        } else {
          context = this.$context ||
            (this.$context = createDatasetContext(this.chart.getContext(), this.index));
          context.dataset = dataset;
          context.index = context.datasetIndex = this.index;
        }
        context.active = !!active;
        context.mode = mode;
        return context;
      }
      resolveDatasetElementOptions(mode) {
        return this._resolveElementOptions(this.datasetElementType.id, mode);
      }
      resolveDataElementOptions(index, mode) {
        return this._resolveElementOptions(this.dataElementType.id, mode, index);
      }
      _resolveElementOptions(elementType, mode = 'default', index) {
        const active = mode === 'active';
        const cache = this._cachedDataOpts;
        const cacheKey = elementType + '-' + mode;
        const cached = cache[cacheKey];
        const sharing = this.enableOptionSharing && defined(index);
        if (cached) {
          return cloneIfNotShared(cached, sharing);
        }
        const config = this.chart.config;
        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
        const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
        const names = Object.keys(defaults.elements[elementType]);
        const context = () => this.getContext(index, active);
        const values = config.resolveNamedOptions(scopes, names, context, prefixes);
        if (values.$shared) {
          values.$shared = sharing;
          cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
        }
        return values;
      }
      _resolveAnimations(index, transition, active) {
        const chart = this.chart;
        const cache = this._cachedDataOpts;
        const cacheKey = `animation-${transition}`;
        const cached = cache[cacheKey];
        if (cached) {
          return cached;
        }
        let options;
        if (chart.options.animation !== false) {
          const config = this.chart.config;
          const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
          const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
          options = config.createResolver(scopes, this.getContext(index, active, transition));
        }
        const animations = new Animations(chart, options && options.animations);
        if (options && options._cacheable) {
          cache[cacheKey] = Object.freeze(animations);
        }
        return animations;
      }
      getSharedOptions(options) {
        if (!options.$shared) {
          return;
        }
        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
      }
      includeOptions(mode, sharedOptions) {
        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
      }
      updateElement(element, index, properties, mode) {
        if (isDirectUpdateMode(mode)) {
          Object.assign(element, properties);
        } else {
          this._resolveAnimations(index, mode).update(element, properties);
        }
      }
      updateSharedOptions(sharedOptions, mode, newOptions) {
        if (sharedOptions && !isDirectUpdateMode(mode)) {
          this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
        }
      }
      _setStyle(element, index, mode, active) {
        element.active = active;
        const options = this.getStyle(index, active);
        this._resolveAnimations(index, mode, active).update(element, {
          options: (!active && this.getSharedOptions(options)) || options
        });
      }
      removeHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, 'active', false);
      }
      setHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, 'active', true);
      }
      _removeDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) {
          this._setStyle(element, undefined, 'active', false);
        }
      }
      _setDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) {
          this._setStyle(element, undefined, 'active', true);
        }
      }
      _resyncElements(resetNewElements) {
        const data = this._data;
        const elements = this._cachedMeta.data;
        for (const [method, arg1, arg2] of this._syncList) {
          this[method](arg1, arg2);
        }
        this._syncList = [];
        const numMeta = elements.length;
        const numData = data.length;
        const count = Math.min(numData, numMeta);
        if (count) {
          this.parse(0, count);
        }
        if (numData > numMeta) {
          this._insertElements(numMeta, numData - numMeta, resetNewElements);
        } else if (numData < numMeta) {
          this._removeElements(numData, numMeta - numData);
        }
      }
      _insertElements(start, count, resetNewElements = true) {
        const meta = this._cachedMeta;
        const data = meta.data;
        const end = start + count;
        let i;
        const move = (arr) => {
          arr.length += count;
          for (i = arr.length - 1; i >= end; i--) {
            arr[i] = arr[i - count];
          }
        };
        move(data);
        for (i = start; i < end; ++i) {
          data[i] = new this.dataElementType();
        }
        if (this._parsing) {
          move(meta._parsed);
        }
        this.parse(start, count);
        if (resetNewElements) {
          this.updateElements(data, start, count, 'reset');
        }
      }
      updateElements(element, start, count, mode) {}
      _removeElements(start, count) {
        const meta = this._cachedMeta;
        if (this._parsing) {
          const removed = meta._parsed.splice(start, count);
          if (meta._stacked) {
            clearStacks(meta, removed);
          }
        }
        meta.data.splice(start, count);
      }
      _sync(args) {
        if (this._parsing) {
          this._syncList.push(args);
        } else {
          const [method, arg1, arg2] = args;
          this[method](arg1, arg2);
        }
        this.chart._dataChanges.push([this.index, ...args]);
      }
      _onDataPush() {
        const count = arguments.length;
        this._sync(['_insertElements', this.getDataset().data.length - count, count]);
      }
      _onDataPop() {
        this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);
      }
      _onDataShift() {
        this._sync(['_removeElements', 0, 1]);
      }
      _onDataSplice(start, count) {
        if (count) {
          this._sync(['_removeElements', start, count]);
        }
        const newCount = arguments.length - 2;
        if (newCount) {
          this._sync(['_insertElements', start, newCount]);
        }
      }
      _onDataUnshift() {
        this._sync(['_insertElements', 0, arguments.length]);
      }
    }
    DatasetController.defaults = {};
    DatasetController.prototype.datasetElementType = null;
    DatasetController.prototype.dataElementType = null;

    function getAllScaleValues(scale, type) {
      if (!scale._cache.$bar) {
        const visibleMetas = scale.getMatchingVisibleMetas(type);
        let values = [];
        for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {
          values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
        }
        scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));
      }
      return scale._cache.$bar;
    }
    function computeMinSampleSize(meta) {
      const scale = meta.iScale;
      const values = getAllScaleValues(scale, meta.type);
      let min = scale._length;
      let i, ilen, curr, prev;
      const updateMinAndPrev = () => {
        if (curr === 32767 || curr === -32768) {
          return;
        }
        if (defined(prev)) {
          min = Math.min(min, Math.abs(curr - prev) || min);
        }
        prev = curr;
      };
      for (i = 0, ilen = values.length; i < ilen; ++i) {
        curr = scale.getPixelForValue(values[i]);
        updateMinAndPrev();
      }
      prev = undefined;
      for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {
        curr = scale.getPixelForTick(i);
        updateMinAndPrev();
      }
      return min;
    }
    function computeFitCategoryTraits(index, ruler, options, stackCount) {
      const thickness = options.barThickness;
      let size, ratio;
      if (isNullOrUndef(thickness)) {
        size = ruler.min * options.categoryPercentage;
        ratio = options.barPercentage;
      } else {
        size = thickness * stackCount;
        ratio = 1;
      }
      return {
        chunk: size / stackCount,
        ratio,
        start: ruler.pixels[index] - (size / 2)
      };
    }
    function computeFlexCategoryTraits(index, ruler, options, stackCount) {
      const pixels = ruler.pixels;
      const curr = pixels[index];
      let prev = index > 0 ? pixels[index - 1] : null;
      let next = index < pixels.length - 1 ? pixels[index + 1] : null;
      const percent = options.categoryPercentage;
      if (prev === null) {
        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
      }
      if (next === null) {
        next = curr + curr - prev;
      }
      const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
      const size = Math.abs(next - prev) / 2 * percent;
      return {
        chunk: size / stackCount,
        ratio: options.barPercentage,
        start
      };
    }
    function parseFloatBar(entry, item, vScale, i) {
      const startValue = vScale.parse(entry[0], i);
      const endValue = vScale.parse(entry[1], i);
      const min = Math.min(startValue, endValue);
      const max = Math.max(startValue, endValue);
      let barStart = min;
      let barEnd = max;
      if (Math.abs(min) > Math.abs(max)) {
        barStart = max;
        barEnd = min;
      }
      item[vScale.axis] = barEnd;
      item._custom = {
        barStart,
        barEnd,
        start: startValue,
        end: endValue,
        min,
        max
      };
    }
    function parseValue(entry, item, vScale, i) {
      if (isArray(entry)) {
        parseFloatBar(entry, item, vScale, i);
      } else {
        item[vScale.axis] = vScale.parse(entry, i);
      }
      return item;
    }
    function parseArrayOrPrimitive(meta, data, start, count) {
      const iScale = meta.iScale;
      const vScale = meta.vScale;
      const labels = iScale.getLabels();
      const singleScale = iScale === vScale;
      const parsed = [];
      let i, ilen, item, entry;
      for (i = start, ilen = start + count; i < ilen; ++i) {
        entry = data[i];
        item = {};
        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
        parsed.push(parseValue(entry, item, vScale, i));
      }
      return parsed;
    }
    function isFloatBar(custom) {
      return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
    }
    function barSign(size, vScale, actualBase) {
      if (size !== 0) {
        return sign(size);
      }
      return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
    }
    function borderProps(properties) {
      let reverse, start, end, top, bottom;
      if (properties.horizontal) {
        reverse = properties.base > properties.x;
        start = 'left';
        end = 'right';
      } else {
        reverse = properties.base < properties.y;
        start = 'bottom';
        end = 'top';
      }
      if (reverse) {
        top = 'end';
        bottom = 'start';
      } else {
        top = 'start';
        bottom = 'end';
      }
      return {start, end, reverse, top, bottom};
    }
    function setBorderSkipped(properties, options, stack, index) {
      let edge = options.borderSkipped;
      const res = {};
      if (!edge) {
        properties.borderSkipped = res;
        return;
      }
      const {start, end, reverse, top, bottom} = borderProps(properties);
      if (edge === 'middle' && stack) {
        properties.enableBorderRadius = true;
        if ((stack._top || 0) === index) {
          edge = top;
        } else if ((stack._bottom || 0) === index) {
          edge = bottom;
        } else {
          res[parseEdge(bottom, start, end, reverse)] = true;
          edge = top;
        }
      }
      res[parseEdge(edge, start, end, reverse)] = true;
      properties.borderSkipped = res;
    }
    function parseEdge(edge, a, b, reverse) {
      if (reverse) {
        edge = swap(edge, a, b);
        edge = startEnd(edge, b, a);
      } else {
        edge = startEnd(edge, a, b);
      }
      return edge;
    }
    function swap(orig, v1, v2) {
      return orig === v1 ? v2 : orig === v2 ? v1 : orig;
    }
    function startEnd(v, start, end) {
      return v === 'start' ? start : v === 'end' ? end : v;
    }
    function setInflateAmount(properties, {inflateAmount}, ratio) {
      properties.inflateAmount = inflateAmount === 'auto'
        ? ratio === 1 ? 0.33 : 0
        : inflateAmount;
    }
    class BarController extends DatasetController {
      parsePrimitiveData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
      }
      parseArrayData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
      }
      parseObjectData(meta, data, start, count) {
        const {iScale, vScale} = meta;
        const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;
        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;
        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;
        const parsed = [];
        let i, ilen, item, obj;
        for (i = start, ilen = start + count; i < ilen; ++i) {
          obj = data[i];
          item = {};
          item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);
          parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));
        }
        return parsed;
      }
      updateRangeFromParsed(range, scale, parsed, stack) {
        super.updateRangeFromParsed(range, scale, parsed, stack);
        const custom = parsed._custom;
        if (custom && scale === this._cachedMeta.vScale) {
          range.min = Math.min(range.min, custom.min);
          range.max = Math.max(range.max, custom.max);
        }
      }
      getMaxOverflow() {
        return 0;
      }
      getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const {iScale, vScale} = meta;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const value = isFloatBar(custom)
          ? '[' + custom.start + ', ' + custom.end + ']'
          : '' + vScale.getLabelForValue(parsed[vScale.axis]);
        return {
          label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
          value
        };
      }
      initialize() {
        this.enableOptionSharing = true;
        super.initialize();
        const meta = this._cachedMeta;
        meta.stack = this.getDataset().stack;
      }
      update(mode) {
        const meta = this._cachedMeta;
        this.updateElements(meta.data, 0, meta.data.length, mode);
      }
      updateElements(bars, start, count, mode) {
        const reset = mode === 'reset';
        const {index, _cachedMeta: {vScale}} = this;
        const base = vScale.getBasePixel();
        const horizontal = vScale.isHorizontal();
        const ruler = this._getRuler();
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
        for (let i = start; i < start + count; i++) {
          const parsed = this.getParsed(i);
          const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);
          const ipixels = this._calculateBarIndexPixels(i, ruler);
          const stack = (parsed._stacks || {})[vScale.axis];
          const properties = {
            horizontal,
            base: vpixels.base,
            enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),
            x: horizontal ? vpixels.head : ipixels.center,
            y: horizontal ? ipixels.center : vpixels.head,
            height: horizontal ? ipixels.size : Math.abs(vpixels.size),
            width: horizontal ? Math.abs(vpixels.size) : ipixels.size
          };
          if (includeOptions) {
            properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);
          }
          const options = properties.options || bars[i].options;
          setBorderSkipped(properties, options, stack, index);
          setInflateAmount(properties, options, ruler.ratio);
          this.updateElement(bars[i], i, properties, mode);
        }
      }
      _getStacks(last, dataIndex) {
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const metasets = iScale.getMatchingVisibleMetas(this._type);
        const stacked = iScale.options.stacked;
        const ilen = metasets.length;
        const stacks = [];
        let i, item;
        for (i = 0; i < ilen; ++i) {
          item = metasets[i];
          if (!item.controller.options.grouped) {
            continue;
          }
          if (typeof dataIndex !== 'undefined') {
            const val = item.controller.getParsed(dataIndex)[
              item.controller._cachedMeta.vScale.axis
            ];
            if (isNullOrUndef(val) || isNaN(val)) {
              continue;
            }
          }
          if (stacked === false || stacks.indexOf(item.stack) === -1 ||
    				(stacked === undefined && item.stack === undefined)) {
            stacks.push(item.stack);
          }
          if (item.index === last) {
            break;
          }
        }
        if (!stacks.length) {
          stacks.push(undefined);
        }
        return stacks;
      }
      _getStackCount(index) {
        return this._getStacks(undefined, index).length;
      }
      _getStackIndex(datasetIndex, name, dataIndex) {
        const stacks = this._getStacks(datasetIndex, dataIndex);
        const index = (name !== undefined)
          ? stacks.indexOf(name)
          : -1;
        return (index === -1)
          ? stacks.length - 1
          : index;
      }
      _getRuler() {
        const opts = this.options;
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const pixels = [];
        let i, ilen;
        for (i = 0, ilen = meta.data.length; i < ilen; ++i) {
          pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
        }
        const barThickness = opts.barThickness;
        const min = barThickness || computeMinSampleSize(meta);
        return {
          min,
          pixels,
          start: iScale._startPixel,
          end: iScale._endPixel,
          stackCount: this._getStackCount(),
          scale: iScale,
          grouped: opts.grouped,
          ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
        };
      }
      _calculateBarValuePixels(index) {
        const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;
        const actualBase = baseValue || 0;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const floating = isFloatBar(custom);
        let value = parsed[vScale.axis];
        let start = 0;
        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
        let head, size;
        if (length !== value) {
          start = length - value;
          length = value;
        }
        if (floating) {
          value = custom.barStart;
          length = custom.barEnd - custom.barStart;
          if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
            start = 0;
          }
          start += value;
        }
        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
        let base = vScale.getPixelForValue(startValue);
        if (this.chart.getDataVisibility(index)) {
          head = vScale.getPixelForValue(start + length);
        } else {
          head = base;
        }
        size = head - base;
        if (Math.abs(size) < minBarLength) {
          size = barSign(size, vScale, actualBase) * minBarLength;
          if (value === actualBase) {
            base -= size / 2;
          }
          head = base + size;
        }
        if (base === vScale.getPixelForValue(actualBase)) {
          const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;
          base += halfGrid;
          size -= halfGrid;
        }
        return {
          size,
          base,
          head,
          center: head + size / 2
        };
      }
      _calculateBarIndexPixels(index, ruler) {
        const scale = ruler.scale;
        const options = this.options;
        const skipNull = options.skipNull;
        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
        let center, size;
        if (ruler.grouped) {
          const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
          const range = options.barThickness === 'flex'
            ? computeFlexCategoryTraits(index, ruler, options, stackCount)
            : computeFitCategoryTraits(index, ruler, options, stackCount);
          const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);
          center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
          size = Math.min(maxBarThickness, range.chunk * range.ratio);
        } else {
          center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
          size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
        }
        return {
          base: center - size / 2,
          head: center + size / 2,
          center,
          size
        };
      }
      draw() {
        const meta = this._cachedMeta;
        const vScale = meta.vScale;
        const rects = meta.data;
        const ilen = rects.length;
        let i = 0;
        for (; i < ilen; ++i) {
          if (this.getParsed(i)[vScale.axis] !== null) {
            rects[i].draw(this._ctx);
          }
        }
      }
    }
    BarController.id = 'bar';
    BarController.defaults = {
      datasetElementType: false,
      dataElementType: 'bar',
      categoryPercentage: 0.8,
      barPercentage: 0.9,
      grouped: true,
      animations: {
        numbers: {
          type: 'number',
          properties: ['x', 'y', 'base', 'width', 'height']
        }
      }
    };
    BarController.overrides = {
      scales: {
        _index_: {
          type: 'category',
          offset: true,
          grid: {
            offset: true
          }
        },
        _value_: {
          type: 'linear',
          beginAtZero: true,
        }
      }
    };

    class BubbleController extends DatasetController {
      initialize() {
        this.enableOptionSharing = true;
        super.initialize();
      }
      parsePrimitiveData(meta, data, start, count) {
        const parsed = super.parsePrimitiveData(meta, data, start, count);
        for (let i = 0; i < parsed.length; i++) {
          parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
        }
        return parsed;
      }
      parseArrayData(meta, data, start, count) {
        const parsed = super.parseArrayData(meta, data, start, count);
        for (let i = 0; i < parsed.length; i++) {
          const item = data[start + i];
          parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
      }
      parseObjectData(meta, data, start, count) {
        const parsed = super.parseObjectData(meta, data, start, count);
        for (let i = 0; i < parsed.length; i++) {
          const item = data[start + i];
          parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
      }
      getMaxOverflow() {
        const data = this._cachedMeta.data;
        let max = 0;
        for (let i = data.length - 1; i >= 0; --i) {
          max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
        }
        return max > 0 && max;
      }
      getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const {xScale, yScale} = meta;
        const parsed = this.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        const r = parsed._custom;
        return {
          label: meta.label,
          value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'
        };
      }
      update(mode) {
        const points = this._cachedMeta.data;
        this.updateElements(points, 0, points.length, mode);
      }
      updateElements(points, start, count, mode) {
        const reset = mode === 'reset';
        const {iScale, vScale} = this._cachedMeta;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        for (let i = start; i < start + count; i++) {
          const point = points[i];
          const parsed = !reset && this.getParsed(i);
          const properties = {};
          const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
          const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
          properties.skip = isNaN(iPixel) || isNaN(vPixel);
          if (includeOptions) {
            properties.options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);
            if (reset) {
              properties.options.radius = 0;
            }
          }
          this.updateElement(point, i, properties, mode);
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
      }
      resolveDataElementOptions(index, mode) {
        const parsed = this.getParsed(index);
        let values = super.resolveDataElementOptions(index, mode);
        if (values.$shared) {
          values = Object.assign({}, values, {$shared: false});
        }
        const radius = values.radius;
        if (mode !== 'active') {
          values.radius = 0;
        }
        values.radius += valueOrDefault(parsed && parsed._custom, radius);
        return values;
      }
    }
    BubbleController.id = 'bubble';
    BubbleController.defaults = {
      datasetElementType: false,
      dataElementType: 'point',
      animations: {
        numbers: {
          type: 'number',
          properties: ['x', 'y', 'borderWidth', 'radius']
        }
      }
    };
    BubbleController.overrides = {
      scales: {
        x: {
          type: 'linear'
        },
        y: {
          type: 'linear'
        }
      },
      plugins: {
        tooltip: {
          callbacks: {
            title() {
              return '';
            }
          }
        }
      }
    };

    function getRatioAndOffset(rotation, circumference, cutout) {
      let ratioX = 1;
      let ratioY = 1;
      let offsetX = 0;
      let offsetY = 0;
      if (circumference < TAU) {
        const startAngle = rotation;
        const endAngle = startAngle + circumference;
        const startX = Math.cos(startAngle);
        const startY = Math.sin(startAngle);
        const endX = Math.cos(endAngle);
        const endY = Math.sin(endAngle);
        const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
        const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
        const maxX = calcMax(0, startX, endX);
        const maxY = calcMax(HALF_PI, startY, endY);
        const minX = calcMin(PI, startX, endX);
        const minY = calcMin(PI + HALF_PI, startY, endY);
        ratioX = (maxX - minX) / 2;
        ratioY = (maxY - minY) / 2;
        offsetX = -(maxX + minX) / 2;
        offsetY = -(maxY + minY) / 2;
      }
      return {ratioX, ratioY, offsetX, offsetY};
    }
    class DoughnutController extends DatasetController {
      constructor(chart, datasetIndex) {
        super(chart, datasetIndex);
        this.enableOptionSharing = true;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.offsetX = undefined;
        this.offsetY = undefined;
      }
      linkScales() {}
      parse(start, count) {
        const data = this.getDataset().data;
        const meta = this._cachedMeta;
        if (this._parsing === false) {
          meta._parsed = data;
        } else {
          let getter = (i) => +data[i];
          if (isObject(data[start])) {
            const {key = 'value'} = this._parsing;
            getter = (i) => +resolveObjectKey(data[i], key);
          }
          let i, ilen;
          for (i = start, ilen = start + count; i < ilen; ++i) {
            meta._parsed[i] = getter(i);
          }
        }
      }
      _getRotation() {
        return toRadians(this.options.rotation - 90);
      }
      _getCircumference() {
        return toRadians(this.options.circumference);
      }
      _getRotationExtents() {
        let min = TAU;
        let max = -TAU;
        for (let i = 0; i < this.chart.data.datasets.length; ++i) {
          if (this.chart.isDatasetVisible(i)) {
            const controller = this.chart.getDatasetMeta(i).controller;
            const rotation = controller._getRotation();
            const circumference = controller._getCircumference();
            min = Math.min(min, rotation);
            max = Math.max(max, rotation + circumference);
          }
        }
        return {
          rotation: min,
          circumference: max - min,
        };
      }
      update(mode) {
        const chart = this.chart;
        const {chartArea} = chart;
        const meta = this._cachedMeta;
        const arcs = meta.data;
        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
        const chartWeight = this._getRingWeight(this.index);
        const {circumference, rotation} = this._getRotationExtents();
        const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);
        const maxWidth = (chartArea.width - spacing) / ratioX;
        const maxHeight = (chartArea.height - spacing) / ratioY;
        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
        const outerRadius = toDimension(this.options.radius, maxRadius);
        const innerRadius = Math.max(outerRadius * cutout, 0);
        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
        this.offsetX = offsetX * outerRadius;
        this.offsetY = offsetY * outerRadius;
        meta.total = this.calculateTotal();
        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
        this.updateElements(arcs, 0, arcs.length, mode);
      }
      _circumference(i, reset) {
        const opts = this.options;
        const meta = this._cachedMeta;
        const circumference = this._getCircumference();
        if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {
          return 0;
        }
        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);
      }
      updateElements(arcs, start, count, mode) {
        const reset = mode === 'reset';
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const centerX = (chartArea.left + chartArea.right) / 2;
        const centerY = (chartArea.top + chartArea.bottom) / 2;
        const animateScale = reset && animationOpts.animateScale;
        const innerRadius = animateScale ? 0 : this.innerRadius;
        const outerRadius = animateScale ? 0 : this.outerRadius;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        let startAngle = this._getRotation();
        let i;
        for (i = 0; i < start; ++i) {
          startAngle += this._circumference(i, reset);
        }
        for (i = start; i < start + count; ++i) {
          const circumference = this._circumference(i, reset);
          const arc = arcs[i];
          const properties = {
            x: centerX + this.offsetX,
            y: centerY + this.offsetY,
            startAngle,
            endAngle: startAngle + circumference,
            circumference,
            outerRadius,
            innerRadius
          };
          if (includeOptions) {
            properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);
          }
          startAngle += circumference;
          this.updateElement(arc, i, properties, mode);
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
      }
      calculateTotal() {
        const meta = this._cachedMeta;
        const metaData = meta.data;
        let total = 0;
        let i;
        for (i = 0; i < metaData.length; i++) {
          const value = meta._parsed[i];
          if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {
            total += Math.abs(value);
          }
        }
        return total;
      }
      calculateCircumference(value) {
        const total = this._cachedMeta.total;
        if (total > 0 && !isNaN(value)) {
          return TAU * (Math.abs(value) / total);
        }
        return 0;
      }
      getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = formatNumber(meta._parsed[index], chart.options.locale);
        return {
          label: labels[index] || '',
          value,
        };
      }
      getMaxBorderWidth(arcs) {
        let max = 0;
        const chart = this.chart;
        let i, ilen, meta, controller, options;
        if (!arcs) {
          for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
            if (chart.isDatasetVisible(i)) {
              meta = chart.getDatasetMeta(i);
              arcs = meta.data;
              controller = meta.controller;
              break;
            }
          }
        }
        if (!arcs) {
          return 0;
        }
        for (i = 0, ilen = arcs.length; i < ilen; ++i) {
          options = controller.resolveDataElementOptions(i);
          if (options.borderAlign !== 'inner') {
            max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
          }
        }
        return max;
      }
      getMaxOffset(arcs) {
        let max = 0;
        for (let i = 0, ilen = arcs.length; i < ilen; ++i) {
          const options = this.resolveDataElementOptions(i);
          max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
        }
        return max;
      }
      _getRingWeightOffset(datasetIndex) {
        let ringWeightOffset = 0;
        for (let i = 0; i < datasetIndex; ++i) {
          if (this.chart.isDatasetVisible(i)) {
            ringWeightOffset += this._getRingWeight(i);
          }
        }
        return ringWeightOffset;
      }
      _getRingWeight(datasetIndex) {
        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
      }
      _getVisibleDatasetWeightTotal() {
        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
      }
    }
    DoughnutController.id = 'doughnut';
    DoughnutController.defaults = {
      datasetElementType: false,
      dataElementType: 'arc',
      animation: {
        animateRotate: true,
        animateScale: false
      },
      animations: {
        numbers: {
          type: 'number',
          properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']
        },
      },
      cutout: '50%',
      rotation: 0,
      circumference: 360,
      radius: '100%',
      spacing: 0,
      indexAxis: 'r',
    };
    DoughnutController.descriptors = {
      _scriptable: (name) => name !== 'spacing',
      _indexable: (name) => name !== 'spacing',
    };
    DoughnutController.overrides = {
      aspectRatio: 1,
      plugins: {
        legend: {
          labels: {
            generateLabels(chart) {
              const data = chart.data;
              if (data.labels.length && data.datasets.length) {
                const {labels: {pointStyle}} = chart.legend.options;
                return data.labels.map((label, i) => {
                  const meta = chart.getDatasetMeta(0);
                  const style = meta.controller.getStyle(i);
                  return {
                    text: label,
                    fillStyle: style.backgroundColor,
                    strokeStyle: style.borderColor,
                    lineWidth: style.borderWidth,
                    pointStyle: pointStyle,
                    hidden: !chart.getDataVisibility(i),
                    index: i
                  };
                });
              }
              return [];
            }
          },
          onClick(e, legendItem, legend) {
            legend.chart.toggleDataVisibility(legendItem.index);
            legend.chart.update();
          }
        },
        tooltip: {
          callbacks: {
            title() {
              return '';
            },
            label(tooltipItem) {
              let dataLabel = tooltipItem.label;
              const value = ': ' + tooltipItem.formattedValue;
              if (isArray(dataLabel)) {
                dataLabel = dataLabel.slice();
                dataLabel[0] += value;
              } else {
                dataLabel += value;
              }
              return dataLabel;
            }
          }
        }
      }
    };

    class LineController extends DatasetController {
      initialize() {
        this.enableOptionSharing = true;
        super.initialize();
      }
      update(mode) {
        const meta = this._cachedMeta;
        const {dataset: line, data: points = [], _dataset} = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let {start, count} = getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if (scaleRangesChanged(meta)) {
          start = 0;
          count = points.length;
        }
        line._chart = this.chart;
        line._datasetIndex = this.index;
        line._decimated = !!_dataset._decimated;
        line.points = points;
        const options = this.resolveDatasetElementOptions(mode);
        if (!this.options.showLine) {
          options.borderWidth = 0;
        }
        options.segment = this.options.segment;
        this.updateElement(line, undefined, {
          animated: !animationsDisabled,
          options
        }, mode);
        this.updateElements(points, start, count, mode);
      }
      updateElements(points, start, count, mode) {
        const reset = mode === 'reset';
        const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const {spanGaps, segment} = this.options;
        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for (let i = start; i < start + count; ++i) {
          const point = points[i];
          const parsed = this.getParsed(i);
          const properties = directUpdate ? point : {};
          const nullData = isNullOrUndef(parsed[vAxis]);
          const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
          const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
          properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
          properties.stop = i > 0 && (parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
          if (segment) {
            properties.parsed = parsed;
            properties.raw = _dataset.data[i];
          }
          if (includeOptions) {
            properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
          }
          if (!directUpdate) {
            this.updateElement(point, i, properties, mode);
          }
          prevParsed = parsed;
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
      }
      getMaxOverflow() {
        const meta = this._cachedMeta;
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        const data = meta.data || [];
        if (!data.length) {
          return border;
        }
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
      }
      draw() {
        const meta = this._cachedMeta;
        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
        super.draw();
      }
    }
    LineController.id = 'line';
    LineController.defaults = {
      datasetElementType: 'line',
      dataElementType: 'point',
      showLine: true,
      spanGaps: false,
    };
    LineController.overrides = {
      scales: {
        _index_: {
          type: 'category',
        },
        _value_: {
          type: 'linear',
        },
      }
    };
    function getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
      const pointCount = points.length;
      let start = 0;
      let count = pointCount;
      if (meta._sorted) {
        const {iScale, _parsed} = meta;
        const axis = iScale.axis;
        const {min, max, minDefined, maxDefined} = iScale.getUserBounds();
        if (minDefined) {
          start = _limitValue(Math.min(
            _lookupByKey(_parsed, iScale.axis, min).lo,
            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),
          0, pointCount - 1);
        }
        if (maxDefined) {
          count = _limitValue(Math.max(
            _lookupByKey(_parsed, iScale.axis, max).hi + 1,
            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max)).hi + 1),
          start, pointCount) - start;
        } else {
          count = pointCount - start;
        }
      }
      return {start, count};
    }
    function scaleRangesChanged(meta) {
      const {xScale, yScale, _scaleRanges} = meta;
      const newRanges = {
        xmin: xScale.min,
        xmax: xScale.max,
        ymin: yScale.min,
        ymax: yScale.max
      };
      if (!_scaleRanges) {
        meta._scaleRanges = newRanges;
        return true;
      }
      const changed = _scaleRanges.xmin !== xScale.min
    		|| _scaleRanges.xmax !== xScale.max
    		|| _scaleRanges.ymin !== yScale.min
    		|| _scaleRanges.ymax !== yScale.max;
      Object.assign(_scaleRanges, newRanges);
      return changed;
    }

    class PolarAreaController extends DatasetController {
      constructor(chart, datasetIndex) {
        super(chart, datasetIndex);
        this.innerRadius = undefined;
        this.outerRadius = undefined;
      }
      getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = formatNumber(meta._parsed[index].r, chart.options.locale);
        return {
          label: labels[index] || '',
          value,
        };
      }
      update(mode) {
        const arcs = this._cachedMeta.data;
        this._updateRadius();
        this.updateElements(arcs, 0, arcs.length, mode);
      }
      _updateRadius() {
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
        const outerRadius = Math.max(minSize / 2, 0);
        const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
        this.outerRadius = outerRadius - (radiusLength * this.index);
        this.innerRadius = this.outerRadius - radiusLength;
      }
      updateElements(arcs, start, count, mode) {
        const reset = mode === 'reset';
        const chart = this.chart;
        const dataset = this.getDataset();
        const opts = chart.options;
        const animationOpts = opts.animation;
        const scale = this._cachedMeta.rScale;
        const centerX = scale.xCenter;
        const centerY = scale.yCenter;
        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;
        let angle = datasetStartAngle;
        let i;
        const defaultAngle = 360 / this.countVisibleElements();
        for (i = 0; i < start; ++i) {
          angle += this._computeAngle(i, mode, defaultAngle);
        }
        for (i = start; i < start + count; i++) {
          const arc = arcs[i];
          let startAngle = angle;
          let endAngle = angle + this._computeAngle(i, mode, defaultAngle);
          let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(dataset.data[i]) : 0;
          angle = endAngle;
          if (reset) {
            if (animationOpts.animateScale) {
              outerRadius = 0;
            }
            if (animationOpts.animateRotate) {
              startAngle = endAngle = datasetStartAngle;
            }
          }
          const properties = {
            x: centerX,
            y: centerY,
            innerRadius: 0,
            outerRadius,
            startAngle,
            endAngle,
            options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)
          };
          this.updateElement(arc, i, properties, mode);
        }
      }
      countVisibleElements() {
        const dataset = this.getDataset();
        const meta = this._cachedMeta;
        let count = 0;
        meta.data.forEach((element, index) => {
          if (!isNaN(dataset.data[index]) && this.chart.getDataVisibility(index)) {
            count++;
          }
        });
        return count;
      }
      _computeAngle(index, mode, defaultAngle) {
        return this.chart.getDataVisibility(index)
          ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)
          : 0;
      }
    }
    PolarAreaController.id = 'polarArea';
    PolarAreaController.defaults = {
      dataElementType: 'arc',
      animation: {
        animateRotate: true,
        animateScale: true
      },
      animations: {
        numbers: {
          type: 'number',
          properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']
        },
      },
      indexAxis: 'r',
      startAngle: 0,
    };
    PolarAreaController.overrides = {
      aspectRatio: 1,
      plugins: {
        legend: {
          labels: {
            generateLabels(chart) {
              const data = chart.data;
              if (data.labels.length && data.datasets.length) {
                const {labels: {pointStyle}} = chart.legend.options;
                return data.labels.map((label, i) => {
                  const meta = chart.getDatasetMeta(0);
                  const style = meta.controller.getStyle(i);
                  return {
                    text: label,
                    fillStyle: style.backgroundColor,
                    strokeStyle: style.borderColor,
                    lineWidth: style.borderWidth,
                    pointStyle: pointStyle,
                    hidden: !chart.getDataVisibility(i),
                    index: i
                  };
                });
              }
              return [];
            }
          },
          onClick(e, legendItem, legend) {
            legend.chart.toggleDataVisibility(legendItem.index);
            legend.chart.update();
          }
        },
        tooltip: {
          callbacks: {
            title() {
              return '';
            },
            label(context) {
              return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;
            }
          }
        }
      },
      scales: {
        r: {
          type: 'radialLinear',
          angleLines: {
            display: false
          },
          beginAtZero: true,
          grid: {
            circular: true
          },
          pointLabels: {
            display: false
          },
          startAngle: 0
        }
      }
    };

    class PieController extends DoughnutController {
    }
    PieController.id = 'pie';
    PieController.defaults = {
      cutout: 0,
      rotation: 0,
      circumference: 360,
      radius: '100%'
    };

    class RadarController extends DatasetController {
      getLabelAndValue(index) {
        const vScale = this._cachedMeta.vScale;
        const parsed = this.getParsed(index);
        return {
          label: vScale.getLabels()[index],
          value: '' + vScale.getLabelForValue(parsed[vScale.axis])
        };
      }
      update(mode) {
        const meta = this._cachedMeta;
        const line = meta.dataset;
        const points = meta.data || [];
        const labels = meta.iScale.getLabels();
        line.points = points;
        if (mode !== 'resize') {
          const options = this.resolveDatasetElementOptions(mode);
          if (!this.options.showLine) {
            options.borderWidth = 0;
          }
          const properties = {
            _loop: true,
            _fullLoop: labels.length === points.length,
            options
          };
          this.updateElement(line, undefined, properties, mode);
        }
        this.updateElements(points, 0, points.length, mode);
      }
      updateElements(points, start, count, mode) {
        const dataset = this.getDataset();
        const scale = this._cachedMeta.rScale;
        const reset = mode === 'reset';
        for (let i = start; i < start + count; i++) {
          const point = points[i];
          const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);
          const pointPosition = scale.getPointPositionForValue(i, dataset.data[i]);
          const x = reset ? scale.xCenter : pointPosition.x;
          const y = reset ? scale.yCenter : pointPosition.y;
          const properties = {
            x,
            y,
            angle: pointPosition.angle,
            skip: isNaN(x) || isNaN(y),
            options
          };
          this.updateElement(point, i, properties, mode);
        }
      }
    }
    RadarController.id = 'radar';
    RadarController.defaults = {
      datasetElementType: 'line',
      dataElementType: 'point',
      indexAxis: 'r',
      showLine: true,
      elements: {
        line: {
          fill: 'start'
        }
      },
    };
    RadarController.overrides = {
      aspectRatio: 1,
      scales: {
        r: {
          type: 'radialLinear',
        }
      }
    };

    class ScatterController extends LineController {
    }
    ScatterController.id = 'scatter';
    ScatterController.defaults = {
      showLine: false,
      fill: false
    };
    ScatterController.overrides = {
      interaction: {
        mode: 'point'
      },
      plugins: {
        tooltip: {
          callbacks: {
            title() {
              return '';
            },
            label(item) {
              return '(' + item.label + ', ' + item.formattedValue + ')';
            }
          }
        }
      },
      scales: {
        x: {
          type: 'linear'
        },
        y: {
          type: 'linear'
        }
      }
    };

    var controllers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BarController: BarController,
    BubbleController: BubbleController,
    DoughnutController: DoughnutController,
    LineController: LineController,
    PolarAreaController: PolarAreaController,
    PieController: PieController,
    RadarController: RadarController,
    ScatterController: ScatterController
    });

    function abstract() {
      throw new Error('This method is not implemented: Check that a complete date adapter is provided.');
    }
    class DateAdapter {
      constructor(options) {
        this.options = options || {};
      }
      formats() {
        return abstract();
      }
      parse(value, format) {
        return abstract();
      }
      format(timestamp, format) {
        return abstract();
      }
      add(timestamp, amount, unit) {
        return abstract();
      }
      diff(a, b, unit) {
        return abstract();
      }
      startOf(timestamp, unit, weekday) {
        return abstract();
      }
      endOf(timestamp, unit) {
        return abstract();
      }
    }
    DateAdapter.override = function(members) {
      Object.assign(DateAdapter.prototype, members);
    };
    var adapters = {
      _date: DateAdapter
    };

    function getRelativePosition$1(e, chart) {
      if ('native' in e) {
        return {
          x: e.x,
          y: e.y
        };
      }
      return getRelativePosition(e, chart);
    }
    function evaluateAllVisibleItems(chart, handler) {
      const metasets = chart.getSortedVisibleDatasetMetas();
      let index, data, element;
      for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
        ({index, data} = metasets[i]);
        for (let j = 0, jlen = data.length; j < jlen; ++j) {
          element = data[j];
          if (!element.skip) {
            handler(element, index, j);
          }
        }
      }
    }
    function binarySearch(metaset, axis, value, intersect) {
      const {controller, data, _sorted} = metaset;
      const iScale = controller._cachedMeta.iScale;
      if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {
        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
        if (!intersect) {
          return lookupMethod(data, axis, value);
        } else if (controller._sharedOptions) {
          const el = data[0];
          const range = typeof el.getRange === 'function' && el.getRange(axis);
          if (range) {
            const start = lookupMethod(data, axis, value - range);
            const end = lookupMethod(data, axis, value + range);
            return {lo: start.lo, hi: end.hi};
          }
        }
      }
      return {lo: 0, hi: data.length - 1};
    }
    function optimizedEvaluateItems(chart, axis, position, handler, intersect) {
      const metasets = chart.getSortedVisibleDatasetMetas();
      const value = position[axis];
      for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
        const {index, data} = metasets[i];
        const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);
        for (let j = lo; j <= hi; ++j) {
          const element = data[j];
          if (!element.skip) {
            handler(element, index, j);
          }
        }
      }
    }
    function getDistanceMetricForAxis(axis) {
      const useX = axis.indexOf('x') !== -1;
      const useY = axis.indexOf('y') !== -1;
      return function(pt1, pt2) {
        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
      };
    }
    function getIntersectItems(chart, position, axis, useFinalPosition) {
      const items = [];
      if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {
        return items;
      }
      const evaluationFunc = function(element, datasetIndex, index) {
        if (element.inRange(position.x, position.y, useFinalPosition)) {
          items.push({element, datasetIndex, index});
        }
      };
      optimizedEvaluateItems(chart, axis, position, evaluationFunc, true);
      return items;
    }
    function getNearestRadialItems(chart, position, axis, useFinalPosition) {
      let items = [];
      function evaluationFunc(element, datasetIndex, index) {
        const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);
        const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});
        if (_angleBetween(angle, startAngle, endAngle)) {
          items.push({element, datasetIndex, index});
        }
      }
      optimizedEvaluateItems(chart, axis, position, evaluationFunc);
      return items;
    }
    function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition) {
      let items = [];
      const distanceMetric = getDistanceMetricForAxis(axis);
      let minDistance = Number.POSITIVE_INFINITY;
      function evaluationFunc(element, datasetIndex, index) {
        const inRange = element.inRange(position.x, position.y, useFinalPosition);
        if (intersect && !inRange) {
          return;
        }
        const center = element.getCenterPoint(useFinalPosition);
        const pointInArea = _isPointInArea(center, chart.chartArea, chart._minPadding);
        if (!pointInArea && !inRange) {
          return;
        }
        const distance = distanceMetric(position, center);
        if (distance < minDistance) {
          items = [{element, datasetIndex, index}];
          minDistance = distance;
        } else if (distance === minDistance) {
          items.push({element, datasetIndex, index});
        }
      }
      optimizedEvaluateItems(chart, axis, position, evaluationFunc);
      return items;
    }
    function getNearestItems(chart, position, axis, intersect, useFinalPosition) {
      if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {
        return [];
      }
      return axis === 'r' && !intersect
        ? getNearestRadialItems(chart, position, axis, useFinalPosition)
        : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition);
    }
    function getAxisItems(chart, e, options, useFinalPosition) {
      const position = getRelativePosition$1(e, chart);
      const items = [];
      const axis = options.axis;
      const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
      let intersectsItem = false;
      evaluateAllVisibleItems(chart, (element, datasetIndex, index) => {
        if (element[rangeMethod](position[axis], useFinalPosition)) {
          items.push({element, datasetIndex, index});
        }
        if (element.inRange(position.x, position.y, useFinalPosition)) {
          intersectsItem = true;
        }
      });
      if (options.intersect && !intersectsItem) {
        return [];
      }
      return items;
    }
    var Interaction = {
      modes: {
        index(chart, e, options, useFinalPosition) {
          const position = getRelativePosition$1(e, chart);
          const axis = options.axis || 'x';
          const items = options.intersect
            ? getIntersectItems(chart, position, axis, useFinalPosition)
            : getNearestItems(chart, position, axis, false, useFinalPosition);
          const elements = [];
          if (!items.length) {
            return [];
          }
          chart.getSortedVisibleDatasetMetas().forEach((meta) => {
            const index = items[0].index;
            const element = meta.data[index];
            if (element && !element.skip) {
              elements.push({element, datasetIndex: meta.index, index});
            }
          });
          return elements;
        },
        dataset(chart, e, options, useFinalPosition) {
          const position = getRelativePosition$1(e, chart);
          const axis = options.axis || 'xy';
          let items = options.intersect
            ? getIntersectItems(chart, position, axis, useFinalPosition) :
            getNearestItems(chart, position, axis, false, useFinalPosition);
          if (items.length > 0) {
            const datasetIndex = items[0].datasetIndex;
            const data = chart.getDatasetMeta(datasetIndex).data;
            items = [];
            for (let i = 0; i < data.length; ++i) {
              items.push({element: data[i], datasetIndex, index: i});
            }
          }
          return items;
        },
        point(chart, e, options, useFinalPosition) {
          const position = getRelativePosition$1(e, chart);
          const axis = options.axis || 'xy';
          return getIntersectItems(chart, position, axis, useFinalPosition);
        },
        nearest(chart, e, options, useFinalPosition) {
          const position = getRelativePosition$1(e, chart);
          const axis = options.axis || 'xy';
          return getNearestItems(chart, position, axis, options.intersect, useFinalPosition);
        },
        x(chart, e, options, useFinalPosition) {
          return getAxisItems(chart, e, {axis: 'x', intersect: options.intersect}, useFinalPosition);
        },
        y(chart, e, options, useFinalPosition) {
          return getAxisItems(chart, e, {axis: 'y', intersect: options.intersect}, useFinalPosition);
        }
      }
    };

    const STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];
    function filterByPosition(array, position) {
      return array.filter(v => v.pos === position);
    }
    function filterDynamicPositionByAxis(array, axis) {
      return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
    }
    function sortByWeight(array, reverse) {
      return array.sort((a, b) => {
        const v0 = reverse ? b : a;
        const v1 = reverse ? a : b;
        return v0.weight === v1.weight ?
          v0.index - v1.index :
          v0.weight - v1.weight;
      });
    }
    function wrapBoxes(boxes) {
      const layoutBoxes = [];
      let i, ilen, box, pos, stack, stackWeight;
      for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
        box = boxes[i];
        ({position: pos, options: {stack, stackWeight = 1}} = box);
        layoutBoxes.push({
          index: i,
          box,
          pos,
          horizontal: box.isHorizontal(),
          weight: box.weight,
          stack: stack && (pos + stack),
          stackWeight
        });
      }
      return layoutBoxes;
    }
    function buildStacks(layouts) {
      const stacks = {};
      for (const wrap of layouts) {
        const {stack, pos, stackWeight} = wrap;
        if (!stack || !STATIC_POSITIONS.includes(pos)) {
          continue;
        }
        const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});
        _stack.count++;
        _stack.weight += stackWeight;
      }
      return stacks;
    }
    function setLayoutDims(layouts, params) {
      const stacks = buildStacks(layouts);
      const {vBoxMaxWidth, hBoxMaxHeight} = params;
      let i, ilen, layout;
      for (i = 0, ilen = layouts.length; i < ilen; ++i) {
        layout = layouts[i];
        const {fullSize} = layout.box;
        const stack = stacks[layout.stack];
        const factor = stack && layout.stackWeight / stack.weight;
        if (layout.horizontal) {
          layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
          layout.height = hBoxMaxHeight;
        } else {
          layout.width = vBoxMaxWidth;
          layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
        }
      }
      return stacks;
    }
    function buildLayoutBoxes(boxes) {
      const layoutBoxes = wrapBoxes(boxes);
      const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);
      const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
      const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
      const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
      const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
      const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
      const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
      return {
        fullSize,
        leftAndTop: left.concat(top),
        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
        chartArea: filterByPosition(layoutBoxes, 'chartArea'),
        vertical: left.concat(right).concat(centerVertical),
        horizontal: top.concat(bottom).concat(centerHorizontal)
      };
    }
    function getCombinedMax(maxPadding, chartArea, a, b) {
      return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
    }
    function updateMaxPadding(maxPadding, boxPadding) {
      maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
      maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
      maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
      maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
    }
    function updateDims(chartArea, params, layout, stacks) {
      const {pos, box} = layout;
      const maxPadding = chartArea.maxPadding;
      if (!isObject(pos)) {
        if (layout.size) {
          chartArea[pos] -= layout.size;
        }
        const stack = stacks[layout.stack] || {size: 0, count: 1};
        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
        layout.size = stack.size / stack.count;
        chartArea[pos] += layout.size;
      }
      if (box.getPadding) {
        updateMaxPadding(maxPadding, box.getPadding());
      }
      const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
      const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
      const widthChanged = newWidth !== chartArea.w;
      const heightChanged = newHeight !== chartArea.h;
      chartArea.w = newWidth;
      chartArea.h = newHeight;
      return layout.horizontal
        ? {same: widthChanged, other: heightChanged}
        : {same: heightChanged, other: widthChanged};
    }
    function handleMaxPadding(chartArea) {
      const maxPadding = chartArea.maxPadding;
      function updatePos(pos) {
        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
        chartArea[pos] += change;
        return change;
      }
      chartArea.y += updatePos('top');
      chartArea.x += updatePos('left');
      updatePos('right');
      updatePos('bottom');
    }
    function getMargins(horizontal, chartArea) {
      const maxPadding = chartArea.maxPadding;
      function marginForPositions(positions) {
        const margin = {left: 0, top: 0, right: 0, bottom: 0};
        positions.forEach((pos) => {
          margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
        });
        return margin;
      }
      return horizontal
        ? marginForPositions(['left', 'right'])
        : marginForPositions(['top', 'bottom']);
    }
    function fitBoxes(boxes, chartArea, params, stacks) {
      const refitBoxes = [];
      let i, ilen, layout, box, refit, changed;
      for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {
        layout = boxes[i];
        box = layout.box;
        box.update(
          layout.width || chartArea.w,
          layout.height || chartArea.h,
          getMargins(layout.horizontal, chartArea)
        );
        const {same, other} = updateDims(chartArea, params, layout, stacks);
        refit |= same && refitBoxes.length;
        changed = changed || other;
        if (!box.fullSize) {
          refitBoxes.push(layout);
        }
      }
      return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
    }
    function setBoxDims(box, left, top, width, height) {
      box.top = top;
      box.left = left;
      box.right = left + width;
      box.bottom = top + height;
      box.width = width;
      box.height = height;
    }
    function placeBoxes(boxes, chartArea, params, stacks) {
      const userPadding = params.padding;
      let {x, y} = chartArea;
      for (const layout of boxes) {
        const box = layout.box;
        const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};
        const weight = (layout.stackWeight / stack.weight) || 1;
        if (layout.horizontal) {
          const width = chartArea.w * weight;
          const height = stack.size || box.height;
          if (defined(stack.start)) {
            y = stack.start;
          }
          if (box.fullSize) {
            setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
          } else {
            setBoxDims(box, chartArea.left + stack.placed, y, width, height);
          }
          stack.start = y;
          stack.placed += width;
          y = box.bottom;
        } else {
          const height = chartArea.h * weight;
          const width = stack.size || box.width;
          if (defined(stack.start)) {
            x = stack.start;
          }
          if (box.fullSize) {
            setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
          } else {
            setBoxDims(box, x, chartArea.top + stack.placed, width, height);
          }
          stack.start = x;
          stack.placed += height;
          x = box.right;
        }
      }
      chartArea.x = x;
      chartArea.y = y;
    }
    defaults.set('layout', {
      autoPadding: true,
      padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }
    });
    var layouts = {
      addBox(chart, item) {
        if (!chart.boxes) {
          chart.boxes = [];
        }
        item.fullSize = item.fullSize || false;
        item.position = item.position || 'top';
        item.weight = item.weight || 0;
        item._layers = item._layers || function() {
          return [{
            z: 0,
            draw(chartArea) {
              item.draw(chartArea);
            }
          }];
        };
        chart.boxes.push(item);
      },
      removeBox(chart, layoutItem) {
        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
        if (index !== -1) {
          chart.boxes.splice(index, 1);
        }
      },
      configure(chart, item, options) {
        item.fullSize = options.fullSize;
        item.position = options.position;
        item.weight = options.weight;
      },
      update(chart, width, height, minPadding) {
        if (!chart) {
          return;
        }
        const padding = toPadding(chart.options.layout.padding);
        const availableWidth = Math.max(width - padding.width, 0);
        const availableHeight = Math.max(height - padding.height, 0);
        const boxes = buildLayoutBoxes(chart.boxes);
        const verticalBoxes = boxes.vertical;
        const horizontalBoxes = boxes.horizontal;
        each(chart.boxes, box => {
          if (typeof box.beforeLayout === 'function') {
            box.beforeLayout();
          }
        });
        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>
          wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
        const params = Object.freeze({
          outerWidth: width,
          outerHeight: height,
          padding,
          availableWidth,
          availableHeight,
          vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
          hBoxMaxHeight: availableHeight / 2
        });
        const maxPadding = Object.assign({}, padding);
        updateMaxPadding(maxPadding, toPadding(minPadding));
        const chartArea = Object.assign({
          maxPadding,
          w: availableWidth,
          h: availableHeight,
          x: padding.left,
          y: padding.top
        }, padding);
        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
        fitBoxes(boxes.fullSize, chartArea, params, stacks);
        fitBoxes(verticalBoxes, chartArea, params, stacks);
        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
          fitBoxes(verticalBoxes, chartArea, params, stacks);
        }
        handleMaxPadding(chartArea);
        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
        chartArea.x += chartArea.w;
        chartArea.y += chartArea.h;
        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
        chart.chartArea = {
          left: chartArea.left,
          top: chartArea.top,
          right: chartArea.left + chartArea.w,
          bottom: chartArea.top + chartArea.h,
          height: chartArea.h,
          width: chartArea.w,
        };
        each(boxes.chartArea, (layout) => {
          const box = layout.box;
          Object.assign(box, chart.chartArea);
          box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});
        });
      }
    };

    class BasePlatform {
      acquireContext(canvas, aspectRatio) {}
      releaseContext(context) {
        return false;
      }
      addEventListener(chart, type, listener) {}
      removeEventListener(chart, type, listener) {}
      getDevicePixelRatio() {
        return 1;
      }
      getMaximumSize(element, width, height, aspectRatio) {
        width = Math.max(0, width || element.width);
        height = height || element.height;
        return {
          width,
          height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
        };
      }
      isAttached(canvas) {
        return true;
      }
      updateConfig(config) {
      }
    }

    class BasicPlatform extends BasePlatform {
      acquireContext(item) {
        return item && item.getContext && item.getContext('2d') || null;
      }
      updateConfig(config) {
        config.options.animation = false;
      }
    }

    const EXPANDO_KEY = '$chartjs';
    const EVENT_TYPES = {
      touchstart: 'mousedown',
      touchmove: 'mousemove',
      touchend: 'mouseup',
      pointerenter: 'mouseenter',
      pointerdown: 'mousedown',
      pointermove: 'mousemove',
      pointerup: 'mouseup',
      pointerleave: 'mouseout',
      pointerout: 'mouseout'
    };
    const isNullOrEmpty = value => value === null || value === '';
    function initCanvas(canvas, aspectRatio) {
      const style = canvas.style;
      const renderHeight = canvas.getAttribute('height');
      const renderWidth = canvas.getAttribute('width');
      canvas[EXPANDO_KEY] = {
        initial: {
          height: renderHeight,
          width: renderWidth,
          style: {
            display: style.display,
            height: style.height,
            width: style.width
          }
        }
      };
      style.display = style.display || 'block';
      style.boxSizing = style.boxSizing || 'border-box';
      if (isNullOrEmpty(renderWidth)) {
        const displayWidth = readUsedSize(canvas, 'width');
        if (displayWidth !== undefined) {
          canvas.width = displayWidth;
        }
      }
      if (isNullOrEmpty(renderHeight)) {
        if (canvas.style.height === '') {
          canvas.height = canvas.width / (aspectRatio || 2);
        } else {
          const displayHeight = readUsedSize(canvas, 'height');
          if (displayHeight !== undefined) {
            canvas.height = displayHeight;
          }
        }
      }
      return canvas;
    }
    const eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;
    function addListener(node, type, listener) {
      node.addEventListener(type, listener, eventListenerOptions);
    }
    function removeListener(chart, type, listener) {
      chart.canvas.removeEventListener(type, listener, eventListenerOptions);
    }
    function fromNativeEvent(event, chart) {
      const type = EVENT_TYPES[event.type] || event.type;
      const {x, y} = getRelativePosition(event, chart);
      return {
        type,
        chart,
        native: event,
        x: x !== undefined ? x : null,
        y: y !== undefined ? y : null,
      };
    }
    function nodeListContains(nodeList, canvas) {
      for (const node of nodeList) {
        if (node === canvas || node.contains(canvas)) {
          return true;
        }
      }
    }
    function createAttachObserver(chart, type, listener) {
      const canvas = chart.canvas;
      const observer = new MutationObserver(entries => {
        let trigger = false;
        for (const entry of entries) {
          trigger = trigger || nodeListContains(entry.addedNodes, canvas);
          trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
        }
        if (trigger) {
          listener();
        }
      });
      observer.observe(document, {childList: true, subtree: true});
      return observer;
    }
    function createDetachObserver(chart, type, listener) {
      const canvas = chart.canvas;
      const observer = new MutationObserver(entries => {
        let trigger = false;
        for (const entry of entries) {
          trigger = trigger || nodeListContains(entry.removedNodes, canvas);
          trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
        }
        if (trigger) {
          listener();
        }
      });
      observer.observe(document, {childList: true, subtree: true});
      return observer;
    }
    const drpListeningCharts = new Map();
    let oldDevicePixelRatio = 0;
    function onWindowResize() {
      const dpr = window.devicePixelRatio;
      if (dpr === oldDevicePixelRatio) {
        return;
      }
      oldDevicePixelRatio = dpr;
      drpListeningCharts.forEach((resize, chart) => {
        if (chart.currentDevicePixelRatio !== dpr) {
          resize();
        }
      });
    }
    function listenDevicePixelRatioChanges(chart, resize) {
      if (!drpListeningCharts.size) {
        window.addEventListener('resize', onWindowResize);
      }
      drpListeningCharts.set(chart, resize);
    }
    function unlistenDevicePixelRatioChanges(chart) {
      drpListeningCharts.delete(chart);
      if (!drpListeningCharts.size) {
        window.removeEventListener('resize', onWindowResize);
      }
    }
    function createResizeObserver(chart, type, listener) {
      const canvas = chart.canvas;
      const container = canvas && _getParentNode(canvas);
      if (!container) {
        return;
      }
      const resize = throttled((width, height) => {
        const w = container.clientWidth;
        listener(width, height);
        if (w < container.clientWidth) {
          listener();
        }
      }, window);
      const observer = new ResizeObserver(entries => {
        const entry = entries[0];
        const width = entry.contentRect.width;
        const height = entry.contentRect.height;
        if (width === 0 && height === 0) {
          return;
        }
        resize(width, height);
      });
      observer.observe(container);
      listenDevicePixelRatioChanges(chart, resize);
      return observer;
    }
    function releaseObserver(chart, type, observer) {
      if (observer) {
        observer.disconnect();
      }
      if (type === 'resize') {
        unlistenDevicePixelRatioChanges(chart);
      }
    }
    function createProxyAndListen(chart, type, listener) {
      const canvas = chart.canvas;
      const proxy = throttled((event) => {
        if (chart.ctx !== null) {
          listener(fromNativeEvent(event, chart));
        }
      }, chart, (args) => {
        const event = args[0];
        return [event, event.offsetX, event.offsetY];
      });
      addListener(canvas, type, proxy);
      return proxy;
    }
    class DomPlatform extends BasePlatform {
      acquireContext(canvas, aspectRatio) {
        const context = canvas && canvas.getContext && canvas.getContext('2d');
        if (context && context.canvas === canvas) {
          initCanvas(canvas, aspectRatio);
          return context;
        }
        return null;
      }
      releaseContext(context) {
        const canvas = context.canvas;
        if (!canvas[EXPANDO_KEY]) {
          return false;
        }
        const initial = canvas[EXPANDO_KEY].initial;
        ['height', 'width'].forEach((prop) => {
          const value = initial[prop];
          if (isNullOrUndef(value)) {
            canvas.removeAttribute(prop);
          } else {
            canvas.setAttribute(prop, value);
          }
        });
        const style = initial.style || {};
        Object.keys(style).forEach((key) => {
          canvas.style[key] = style[key];
        });
        canvas.width = canvas.width;
        delete canvas[EXPANDO_KEY];
        return true;
      }
      addEventListener(chart, type, listener) {
        this.removeEventListener(chart, type);
        const proxies = chart.$proxies || (chart.$proxies = {});
        const handlers = {
          attach: createAttachObserver,
          detach: createDetachObserver,
          resize: createResizeObserver
        };
        const handler = handlers[type] || createProxyAndListen;
        proxies[type] = handler(chart, type, listener);
      }
      removeEventListener(chart, type) {
        const proxies = chart.$proxies || (chart.$proxies = {});
        const proxy = proxies[type];
        if (!proxy) {
          return;
        }
        const handlers = {
          attach: releaseObserver,
          detach: releaseObserver,
          resize: releaseObserver
        };
        const handler = handlers[type] || removeListener;
        handler(chart, type, proxy);
        proxies[type] = undefined;
      }
      getDevicePixelRatio() {
        return window.devicePixelRatio;
      }
      getMaximumSize(canvas, width, height, aspectRatio) {
        return getMaximumSize(canvas, width, height, aspectRatio);
      }
      isAttached(canvas) {
        const container = _getParentNode(canvas);
        return !!(container && container.isConnected);
      }
    }

    function _detectPlatform(canvas) {
      if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {
        return BasicPlatform;
      }
      return DomPlatform;
    }

    class Element {
      constructor() {
        this.x = undefined;
        this.y = undefined;
        this.active = false;
        this.options = undefined;
        this.$animations = undefined;
      }
      tooltipPosition(useFinalPosition) {
        const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
        return {x, y};
      }
      hasValue() {
        return isNumber(this.x) && isNumber(this.y);
      }
      getProps(props, final) {
        const anims = this.$animations;
        if (!final || !anims) {
          return this;
        }
        const ret = {};
        props.forEach(prop => {
          ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
        });
        return ret;
      }
    }
    Element.defaults = {};
    Element.defaultRoutes = undefined;

    const formatters = {
      values(value) {
        return isArray(value) ? value : '' + value;
      },
      numeric(tickValue, index, ticks) {
        if (tickValue === 0) {
          return '0';
        }
        const locale = this.chart.options.locale;
        let notation;
        let delta = tickValue;
        if (ticks.length > 1) {
          const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
          if (maxTick < 1e-4 || maxTick > 1e+15) {
            notation = 'scientific';
          }
          delta = calculateDelta(tickValue, ticks);
        }
        const logDelta = log10(Math.abs(delta));
        const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
        const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};
        Object.assign(options, this.options.ticks.format);
        return formatNumber(tickValue, locale, options);
      },
      logarithmic(tickValue, index, ticks) {
        if (tickValue === 0) {
          return '0';
        }
        const remain = tickValue / (Math.pow(10, Math.floor(log10(tickValue))));
        if (remain === 1 || remain === 2 || remain === 5) {
          return formatters.numeric.call(this, tickValue, index, ticks);
        }
        return '';
      }
    };
    function calculateDelta(tickValue, ticks) {
      let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
      if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
        delta = tickValue - Math.floor(tickValue);
      }
      return delta;
    }
    var Ticks = {formatters};

    defaults.set('scale', {
      display: true,
      offset: false,
      reverse: false,
      beginAtZero: false,
      bounds: 'ticks',
      grace: 0,
      grid: {
        display: true,
        lineWidth: 1,
        drawBorder: true,
        drawOnChartArea: true,
        drawTicks: true,
        tickLength: 8,
        tickWidth: (_ctx, options) => options.lineWidth,
        tickColor: (_ctx, options) => options.color,
        offset: false,
        borderDash: [],
        borderDashOffset: 0.0,
        borderWidth: 1
      },
      title: {
        display: false,
        text: '',
        padding: {
          top: 4,
          bottom: 4
        }
      },
      ticks: {
        minRotation: 0,
        maxRotation: 50,
        mirror: false,
        textStrokeWidth: 0,
        textStrokeColor: '',
        padding: 3,
        display: true,
        autoSkip: true,
        autoSkipPadding: 3,
        labelOffset: 0,
        callback: Ticks.formatters.values,
        minor: {},
        major: {},
        align: 'center',
        crossAlign: 'near',
        showLabelBackdrop: false,
        backdropColor: 'rgba(255, 255, 255, 0.75)',
        backdropPadding: 2,
      }
    });
    defaults.route('scale.ticks', 'color', '', 'color');
    defaults.route('scale.grid', 'color', '', 'borderColor');
    defaults.route('scale.grid', 'borderColor', '', 'borderColor');
    defaults.route('scale.title', 'color', '', 'color');
    defaults.describe('scale', {
      _fallback: false,
      _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
      _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',
    });
    defaults.describe('scales', {
      _fallback: 'scale',
    });
    defaults.describe('scale.ticks', {
      _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',
      _indexable: (name) => name !== 'backdropPadding',
    });

    function autoSkip(scale, ticks) {
      const tickOpts = scale.options.ticks;
      const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);
      const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
      const numMajorIndices = majorIndices.length;
      const first = majorIndices[0];
      const last = majorIndices[numMajorIndices - 1];
      const newTicks = [];
      if (numMajorIndices > ticksLimit) {
        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
        return newTicks;
      }
      const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
      if (numMajorIndices > 0) {
        let i, ilen;
        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
        for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
          skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
        }
        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
        return newTicks;
      }
      skip(ticks, newTicks, spacing);
      return newTicks;
    }
    function determineMaxTicks(scale) {
      const offset = scale.options.offset;
      const tickLength = scale._tickSize();
      const maxScale = scale._length / tickLength + (offset ? 0 : 1);
      const maxChart = scale._maxLength / tickLength;
      return Math.floor(Math.min(maxScale, maxChart));
    }
    function calculateSpacing(majorIndices, ticks, ticksLimit) {
      const evenMajorSpacing = getEvenSpacing(majorIndices);
      const spacing = ticks.length / ticksLimit;
      if (!evenMajorSpacing) {
        return Math.max(spacing, 1);
      }
      const factors = _factorize(evenMajorSpacing);
      for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {
        const factor = factors[i];
        if (factor > spacing) {
          return factor;
        }
      }
      return Math.max(spacing, 1);
    }
    function getMajorIndices(ticks) {
      const result = [];
      let i, ilen;
      for (i = 0, ilen = ticks.length; i < ilen; i++) {
        if (ticks[i].major) {
          result.push(i);
        }
      }
      return result;
    }
    function skipMajors(ticks, newTicks, majorIndices, spacing) {
      let count = 0;
      let next = majorIndices[0];
      let i;
      spacing = Math.ceil(spacing);
      for (i = 0; i < ticks.length; i++) {
        if (i === next) {
          newTicks.push(ticks[i]);
          count++;
          next = majorIndices[count * spacing];
        }
      }
    }
    function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
      const start = valueOrDefault(majorStart, 0);
      const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
      let count = 0;
      let length, i, next;
      spacing = Math.ceil(spacing);
      if (majorEnd) {
        length = majorEnd - majorStart;
        spacing = length / Math.floor(length / spacing);
      }
      next = start;
      while (next < 0) {
        count++;
        next = Math.round(start + count * spacing);
      }
      for (i = Math.max(start, 0); i < end; i++) {
        if (i === next) {
          newTicks.push(ticks[i]);
          count++;
          next = Math.round(start + count * spacing);
        }
      }
    }
    function getEvenSpacing(arr) {
      const len = arr.length;
      let i, diff;
      if (len < 2) {
        return false;
      }
      for (diff = arr[0], i = 1; i < len; ++i) {
        if (arr[i] - arr[i - 1] !== diff) {
          return false;
        }
      }
      return diff;
    }

    const reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;
    const offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;
    function sample(arr, numItems) {
      const result = [];
      const increment = arr.length / numItems;
      const len = arr.length;
      let i = 0;
      for (; i < len; i += increment) {
        result.push(arr[Math.floor(i)]);
      }
      return result;
    }
    function getPixelForGridLine(scale, index, offsetGridLines) {
      const length = scale.ticks.length;
      const validIndex = Math.min(index, length - 1);
      const start = scale._startPixel;
      const end = scale._endPixel;
      const epsilon = 1e-6;
      let lineValue = scale.getPixelForTick(validIndex);
      let offset;
      if (offsetGridLines) {
        if (length === 1) {
          offset = Math.max(lineValue - start, end - lineValue);
        } else if (index === 0) {
          offset = (scale.getPixelForTick(1) - lineValue) / 2;
        } else {
          offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
        }
        lineValue += validIndex < index ? offset : -offset;
        if (lineValue < start - epsilon || lineValue > end + epsilon) {
          return;
        }
      }
      return lineValue;
    }
    function garbageCollect(caches, length) {
      each(caches, (cache) => {
        const gc = cache.gc;
        const gcLen = gc.length / 2;
        let i;
        if (gcLen > length) {
          for (i = 0; i < gcLen; ++i) {
            delete cache.data[gc[i]];
          }
          gc.splice(0, gcLen);
        }
      });
    }
    function getTickMarkLength(options) {
      return options.drawTicks ? options.tickLength : 0;
    }
    function getTitleHeight(options, fallback) {
      if (!options.display) {
        return 0;
      }
      const font = toFont(options.font, fallback);
      const padding = toPadding(options.padding);
      const lines = isArray(options.text) ? options.text.length : 1;
      return (lines * font.lineHeight) + padding.height;
    }
    function createScaleContext(parent, scale) {
      return createContext(parent, {
        scale,
        type: 'scale'
      });
    }
    function createTickContext(parent, index, tick) {
      return createContext(parent, {
        tick,
        index,
        type: 'tick'
      });
    }
    function titleAlign(align, position, reverse) {
      let ret = _toLeftRightCenter(align);
      if ((reverse && position !== 'right') || (!reverse && position === 'right')) {
        ret = reverseAlign(ret);
      }
      return ret;
    }
    function titleArgs(scale, offset, position, align) {
      const {top, left, bottom, right, chart} = scale;
      const {chartArea, scales} = chart;
      let rotation = 0;
      let maxWidth, titleX, titleY;
      const height = bottom - top;
      const width = right - left;
      if (scale.isHorizontal()) {
        titleX = _alignStartEnd(align, left, right);
        if (isObject(position)) {
          const positionAxisID = Object.keys(position)[0];
          const value = position[positionAxisID];
          titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
        } else if (position === 'center') {
          titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
        } else {
          titleY = offsetFromEdge(scale, position, offset);
        }
        maxWidth = right - left;
      } else {
        if (isObject(position)) {
          const positionAxisID = Object.keys(position)[0];
          const value = position[positionAxisID];
          titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
        } else if (position === 'center') {
          titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
        } else {
          titleX = offsetFromEdge(scale, position, offset);
        }
        titleY = _alignStartEnd(align, bottom, top);
        rotation = position === 'left' ? -HALF_PI : HALF_PI;
      }
      return {titleX, titleY, maxWidth, rotation};
    }
    class Scale extends Element {
      constructor(cfg) {
        super();
        this.id = cfg.id;
        this.type = cfg.type;
        this.options = undefined;
        this.ctx = cfg.ctx;
        this.chart = cfg.chart;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this._margins = {
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        };
        this.maxWidth = undefined;
        this.maxHeight = undefined;
        this.paddingTop = undefined;
        this.paddingBottom = undefined;
        this.paddingLeft = undefined;
        this.paddingRight = undefined;
        this.axis = undefined;
        this.labelRotation = undefined;
        this.min = undefined;
        this.max = undefined;
        this._range = undefined;
        this.ticks = [];
        this._gridLineItems = null;
        this._labelItems = null;
        this._labelSizes = null;
        this._length = 0;
        this._maxLength = 0;
        this._longestTextCache = {};
        this._startPixel = undefined;
        this._endPixel = undefined;
        this._reversePixels = false;
        this._userMax = undefined;
        this._userMin = undefined;
        this._suggestedMax = undefined;
        this._suggestedMin = undefined;
        this._ticksLength = 0;
        this._borderValue = 0;
        this._cache = {};
        this._dataLimitsCached = false;
        this.$context = undefined;
      }
      init(options) {
        this.options = options.setContext(this.getContext());
        this.axis = options.axis;
        this._userMin = this.parse(options.min);
        this._userMax = this.parse(options.max);
        this._suggestedMin = this.parse(options.suggestedMin);
        this._suggestedMax = this.parse(options.suggestedMax);
      }
      parse(raw, index) {
        return raw;
      }
      getUserBounds() {
        let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;
        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
        return {
          min: finiteOrDefault(_userMin, _suggestedMin),
          max: finiteOrDefault(_userMax, _suggestedMax),
          minDefined: isNumberFinite(_userMin),
          maxDefined: isNumberFinite(_userMax)
        };
      }
      getMinMax(canStack) {
        let {min, max, minDefined, maxDefined} = this.getUserBounds();
        let range;
        if (minDefined && maxDefined) {
          return {min, max};
        }
        const metas = this.getMatchingVisibleMetas();
        for (let i = 0, ilen = metas.length; i < ilen; ++i) {
          range = metas[i].controller.getMinMax(this, canStack);
          if (!minDefined) {
            min = Math.min(min, range.min);
          }
          if (!maxDefined) {
            max = Math.max(max, range.max);
          }
        }
        min = maxDefined && min > max ? max : min;
        max = minDefined && min > max ? min : max;
        return {
          min: finiteOrDefault(min, finiteOrDefault(max, min)),
          max: finiteOrDefault(max, finiteOrDefault(min, max))
        };
      }
      getPadding() {
        return {
          left: this.paddingLeft || 0,
          top: this.paddingTop || 0,
          right: this.paddingRight || 0,
          bottom: this.paddingBottom || 0
        };
      }
      getTicks() {
        return this.ticks;
      }
      getLabels() {
        const data = this.chart.data;
        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
      }
      beforeLayout() {
        this._cache = {};
        this._dataLimitsCached = false;
      }
      beforeUpdate() {
        callback(this.options.beforeUpdate, [this]);
      }
      update(maxWidth, maxHeight, margins) {
        const {beginAtZero, grace, ticks: tickOpts} = this.options;
        const sampleSize = tickOpts.sampleSize;
        this.beforeUpdate();
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins = Object.assign({
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }, margins);
        this.ticks = null;
        this._labelSizes = null;
        this._gridLineItems = null;
        this._labelItems = null;
        this.beforeSetDimensions();
        this.setDimensions();
        this.afterSetDimensions();
        this._maxLength = this.isHorizontal()
          ? this.width + margins.left + margins.right
          : this.height + margins.top + margins.bottom;
        if (!this._dataLimitsCached) {
          this.beforeDataLimits();
          this.determineDataLimits();
          this.afterDataLimits();
          this._range = _addGrace(this, grace, beginAtZero);
          this._dataLimitsCached = true;
        }
        this.beforeBuildTicks();
        this.ticks = this.buildTicks() || [];
        this.afterBuildTicks();
        const samplingEnabled = sampleSize < this.ticks.length;
        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
        this.configure();
        this.beforeCalculateLabelRotation();
        this.calculateLabelRotation();
        this.afterCalculateLabelRotation();
        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
          this.ticks = autoSkip(this, this.ticks);
          this._labelSizes = null;
        }
        if (samplingEnabled) {
          this._convertTicksToLabels(this.ticks);
        }
        this.beforeFit();
        this.fit();
        this.afterFit();
        this.afterUpdate();
      }
      configure() {
        let reversePixels = this.options.reverse;
        let startPixel, endPixel;
        if (this.isHorizontal()) {
          startPixel = this.left;
          endPixel = this.right;
        } else {
          startPixel = this.top;
          endPixel = this.bottom;
          reversePixels = !reversePixels;
        }
        this._startPixel = startPixel;
        this._endPixel = endPixel;
        this._reversePixels = reversePixels;
        this._length = endPixel - startPixel;
        this._alignToPixels = this.options.alignToPixels;
      }
      afterUpdate() {
        callback(this.options.afterUpdate, [this]);
      }
      beforeSetDimensions() {
        callback(this.options.beforeSetDimensions, [this]);
      }
      setDimensions() {
        if (this.isHorizontal()) {
          this.width = this.maxWidth;
          this.left = 0;
          this.right = this.width;
        } else {
          this.height = this.maxHeight;
          this.top = 0;
          this.bottom = this.height;
        }
        this.paddingLeft = 0;
        this.paddingTop = 0;
        this.paddingRight = 0;
        this.paddingBottom = 0;
      }
      afterSetDimensions() {
        callback(this.options.afterSetDimensions, [this]);
      }
      _callHooks(name) {
        this.chart.notifyPlugins(name, this.getContext());
        callback(this.options[name], [this]);
      }
      beforeDataLimits() {
        this._callHooks('beforeDataLimits');
      }
      determineDataLimits() {}
      afterDataLimits() {
        this._callHooks('afterDataLimits');
      }
      beforeBuildTicks() {
        this._callHooks('beforeBuildTicks');
      }
      buildTicks() {
        return [];
      }
      afterBuildTicks() {
        this._callHooks('afterBuildTicks');
      }
      beforeTickToLabelConversion() {
        callback(this.options.beforeTickToLabelConversion, [this]);
      }
      generateTickLabels(ticks) {
        const tickOpts = this.options.ticks;
        let i, ilen, tick;
        for (i = 0, ilen = ticks.length; i < ilen; i++) {
          tick = ticks[i];
          tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);
        }
      }
      afterTickToLabelConversion() {
        callback(this.options.afterTickToLabelConversion, [this]);
      }
      beforeCalculateLabelRotation() {
        callback(this.options.beforeCalculateLabelRotation, [this]);
      }
      calculateLabelRotation() {
        const options = this.options;
        const tickOpts = options.ticks;
        const numTicks = this.ticks.length;
        const minRotation = tickOpts.minRotation || 0;
        const maxRotation = tickOpts.maxRotation;
        let labelRotation = minRotation;
        let tickWidth, maxHeight, maxLabelDiagonal;
        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
          this.labelRotation = minRotation;
          return;
        }
        const labelSizes = this._getLabelSizes();
        const maxLabelWidth = labelSizes.widest.width;
        const maxLabelHeight = labelSizes.highest.height;
        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
        if (maxLabelWidth + 6 > tickWidth) {
          tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
          maxHeight = this.maxHeight - getTickMarkLength(options.grid)
    				- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
          maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
          labelRotation = toDegrees(Math.min(
            Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),
            Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))
          ));
          labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
        }
        this.labelRotation = labelRotation;
      }
      afterCalculateLabelRotation() {
        callback(this.options.afterCalculateLabelRotation, [this]);
      }
      beforeFit() {
        callback(this.options.beforeFit, [this]);
      }
      fit() {
        const minSize = {
          width: 0,
          height: 0
        };
        const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;
        const display = this._isVisible();
        const isHorizontal = this.isHorizontal();
        if (display) {
          const titleHeight = getTitleHeight(titleOpts, chart.options.font);
          if (isHorizontal) {
            minSize.width = this.maxWidth;
            minSize.height = getTickMarkLength(gridOpts) + titleHeight;
          } else {
            minSize.height = this.maxHeight;
            minSize.width = getTickMarkLength(gridOpts) + titleHeight;
          }
          if (tickOpts.display && this.ticks.length) {
            const {first, last, widest, highest} = this._getLabelSizes();
            const tickPadding = tickOpts.padding * 2;
            const angleRadians = toRadians(this.labelRotation);
            const cos = Math.cos(angleRadians);
            const sin = Math.sin(angleRadians);
            if (isHorizontal) {
              const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
              minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
            } else {
              const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
              minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
            }
            this._calculatePadding(first, last, sin, cos);
          }
        }
        this._handleMargins();
        if (isHorizontal) {
          this.width = this._length = chart.width - this._margins.left - this._margins.right;
          this.height = minSize.height;
        } else {
          this.width = minSize.width;
          this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
        }
      }
      _calculatePadding(first, last, sin, cos) {
        const {ticks: {align, padding}, position} = this.options;
        const isRotated = this.labelRotation !== 0;
        const labelsBelowTicks = position !== 'top' && this.axis === 'x';
        if (this.isHorizontal()) {
          const offsetLeft = this.getPixelForTick(0) - this.left;
          const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
          let paddingLeft = 0;
          let paddingRight = 0;
          if (isRotated) {
            if (labelsBelowTicks) {
              paddingLeft = cos * first.width;
              paddingRight = sin * last.height;
            } else {
              paddingLeft = sin * first.height;
              paddingRight = cos * last.width;
            }
          } else if (align === 'start') {
            paddingRight = last.width;
          } else if (align === 'end') {
            paddingLeft = first.width;
          } else {
            paddingLeft = first.width / 2;
            paddingRight = last.width / 2;
          }
          this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
          this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
        } else {
          let paddingTop = last.height / 2;
          let paddingBottom = first.height / 2;
          if (align === 'start') {
            paddingTop = 0;
            paddingBottom = first.height;
          } else if (align === 'end') {
            paddingTop = last.height;
            paddingBottom = 0;
          }
          this.paddingTop = paddingTop + padding;
          this.paddingBottom = paddingBottom + padding;
        }
      }
      _handleMargins() {
        if (this._margins) {
          this._margins.left = Math.max(this.paddingLeft, this._margins.left);
          this._margins.top = Math.max(this.paddingTop, this._margins.top);
          this._margins.right = Math.max(this.paddingRight, this._margins.right);
          this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
        }
      }
      afterFit() {
        callback(this.options.afterFit, [this]);
      }
      isHorizontal() {
        const {axis, position} = this.options;
        return position === 'top' || position === 'bottom' || axis === 'x';
      }
      isFullSize() {
        return this.options.fullSize;
      }
      _convertTicksToLabels(ticks) {
        this.beforeTickToLabelConversion();
        this.generateTickLabels(ticks);
        let i, ilen;
        for (i = 0, ilen = ticks.length; i < ilen; i++) {
          if (isNullOrUndef(ticks[i].label)) {
            ticks.splice(i, 1);
            ilen--;
            i--;
          }
        }
        this.afterTickToLabelConversion();
      }
      _getLabelSizes() {
        let labelSizes = this._labelSizes;
        if (!labelSizes) {
          const sampleSize = this.options.ticks.sampleSize;
          let ticks = this.ticks;
          if (sampleSize < ticks.length) {
            ticks = sample(ticks, sampleSize);
          }
          this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);
        }
        return labelSizes;
      }
      _computeLabelSizes(ticks, length) {
        const {ctx, _longestTextCache: caches} = this;
        const widths = [];
        const heights = [];
        let widestLabelSize = 0;
        let highestLabelSize = 0;
        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
        for (i = 0; i < length; ++i) {
          label = ticks[i].label;
          tickFont = this._resolveTickFontOptions(i);
          ctx.font = fontString = tickFont.string;
          cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
          lineHeight = tickFont.lineHeight;
          width = height = 0;
          if (!isNullOrUndef(label) && !isArray(label)) {
            width = _measureText(ctx, cache.data, cache.gc, width, label);
            height = lineHeight;
          } else if (isArray(label)) {
            for (j = 0, jlen = label.length; j < jlen; ++j) {
              nestedLabel = label[j];
              if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
                width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
                height += lineHeight;
              }
            }
          }
          widths.push(width);
          heights.push(height);
          widestLabelSize = Math.max(width, widestLabelSize);
          highestLabelSize = Math.max(height, highestLabelSize);
        }
        garbageCollect(caches, length);
        const widest = widths.indexOf(widestLabelSize);
        const highest = heights.indexOf(highestLabelSize);
        const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});
        return {
          first: valueAt(0),
          last: valueAt(length - 1),
          widest: valueAt(widest),
          highest: valueAt(highest),
          widths,
          heights,
        };
      }
      getLabelForValue(value) {
        return value;
      }
      getPixelForValue(value, index) {
        return NaN;
      }
      getValueForPixel(pixel) {}
      getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) {
          return null;
        }
        return this.getPixelForValue(ticks[index].value);
      }
      getPixelForDecimal(decimal) {
        if (this._reversePixels) {
          decimal = 1 - decimal;
        }
        const pixel = this._startPixel + decimal * this._length;
        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
      }
      getDecimalForPixel(pixel) {
        const decimal = (pixel - this._startPixel) / this._length;
        return this._reversePixels ? 1 - decimal : decimal;
      }
      getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
      }
      getBaseValue() {
        const {min, max} = this;
        return min < 0 && max < 0 ? max :
          min > 0 && max > 0 ? min :
          0;
      }
      getContext(index) {
        const ticks = this.ticks || [];
        if (index >= 0 && index < ticks.length) {
          const tick = ticks[index];
          return tick.$context ||
    				(tick.$context = createTickContext(this.getContext(), index, tick));
        }
        return this.$context ||
    			(this.$context = createScaleContext(this.chart.getContext(), this));
      }
      _tickSize() {
        const optionTicks = this.options.ticks;
        const rot = toRadians(this.labelRotation);
        const cos = Math.abs(Math.cos(rot));
        const sin = Math.abs(Math.sin(rot));
        const labelSizes = this._getLabelSizes();
        const padding = optionTicks.autoSkipPadding || 0;
        const w = labelSizes ? labelSizes.widest.width + padding : 0;
        const h = labelSizes ? labelSizes.highest.height + padding : 0;
        return this.isHorizontal()
          ? h * cos > w * sin ? w / cos : h / sin
          : h * sin < w * cos ? h / cos : w / sin;
      }
      _isVisible() {
        const display = this.options.display;
        if (display !== 'auto') {
          return !!display;
        }
        return this.getMatchingVisibleMetas().length > 0;
      }
      _computeGridLineItems(chartArea) {
        const axis = this.axis;
        const chart = this.chart;
        const options = this.options;
        const {grid, position} = options;
        const offset = grid.offset;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const ticksLength = ticks.length + (offset ? 1 : 0);
        const tl = getTickMarkLength(grid);
        const items = [];
        const borderOpts = grid.setContext(this.getContext());
        const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;
        const axisHalfWidth = axisWidth / 2;
        const alignBorderValue = function(pixel) {
          return _alignPixel(chart, pixel, axisWidth);
        };
        let borderValue, i, lineValue, alignedLineValue;
        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
        if (position === 'top') {
          borderValue = alignBorderValue(this.bottom);
          ty1 = this.bottom - tl;
          ty2 = borderValue - axisHalfWidth;
          y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
          y2 = chartArea.bottom;
        } else if (position === 'bottom') {
          borderValue = alignBorderValue(this.top);
          y1 = chartArea.top;
          y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
          ty1 = borderValue + axisHalfWidth;
          ty2 = this.top + tl;
        } else if (position === 'left') {
          borderValue = alignBorderValue(this.right);
          tx1 = this.right - tl;
          tx2 = borderValue - axisHalfWidth;
          x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
          x2 = chartArea.right;
        } else if (position === 'right') {
          borderValue = alignBorderValue(this.left);
          x1 = chartArea.left;
          x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
          tx1 = borderValue + axisHalfWidth;
          tx2 = this.left + tl;
        } else if (axis === 'x') {
          if (position === 'center') {
            borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
          } else if (isObject(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
          }
          y1 = chartArea.top;
          y2 = chartArea.bottom;
          ty1 = borderValue + axisHalfWidth;
          ty2 = ty1 + tl;
        } else if (axis === 'y') {
          if (position === 'center') {
            borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
          } else if (isObject(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
          }
          tx1 = borderValue - axisHalfWidth;
          tx2 = tx1 - tl;
          x1 = chartArea.left;
          x2 = chartArea.right;
        }
        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
        const step = Math.max(1, Math.ceil(ticksLength / limit));
        for (i = 0; i < ticksLength; i += step) {
          const optsAtIndex = grid.setContext(this.getContext(i));
          const lineWidth = optsAtIndex.lineWidth;
          const lineColor = optsAtIndex.color;
          const borderDash = grid.borderDash || [];
          const borderDashOffset = optsAtIndex.borderDashOffset;
          const tickWidth = optsAtIndex.tickWidth;
          const tickColor = optsAtIndex.tickColor;
          const tickBorderDash = optsAtIndex.tickBorderDash || [];
          const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
          lineValue = getPixelForGridLine(this, i, offset);
          if (lineValue === undefined) {
            continue;
          }
          alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
          if (isHorizontal) {
            tx1 = tx2 = x1 = x2 = alignedLineValue;
          } else {
            ty1 = ty2 = y1 = y2 = alignedLineValue;
          }
          items.push({
            tx1,
            ty1,
            tx2,
            ty2,
            x1,
            y1,
            x2,
            y2,
            width: lineWidth,
            color: lineColor,
            borderDash,
            borderDashOffset,
            tickWidth,
            tickColor,
            tickBorderDash,
            tickBorderDashOffset,
          });
        }
        this._ticksLength = ticksLength;
        this._borderValue = borderValue;
        return items;
      }
      _computeLabelItems(chartArea) {
        const axis = this.axis;
        const options = this.options;
        const {position, ticks: optionTicks} = options;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const {align, crossAlign, padding, mirror} = optionTicks;
        const tl = getTickMarkLength(options.grid);
        const tickAndPadding = tl + padding;
        const hTickAndPadding = mirror ? -padding : tickAndPadding;
        const rotation = -toRadians(this.labelRotation);
        const items = [];
        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
        let textBaseline = 'middle';
        if (position === 'top') {
          y = this.bottom - hTickAndPadding;
          textAlign = this._getXAxisLabelAlignment();
        } else if (position === 'bottom') {
          y = this.top + hTickAndPadding;
          textAlign = this._getXAxisLabelAlignment();
        } else if (position === 'left') {
          const ret = this._getYAxisLabelAlignment(tl);
          textAlign = ret.textAlign;
          x = ret.x;
        } else if (position === 'right') {
          const ret = this._getYAxisLabelAlignment(tl);
          textAlign = ret.textAlign;
          x = ret.x;
        } else if (axis === 'x') {
          if (position === 'center') {
            y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;
          } else if (isObject(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
          }
          textAlign = this._getXAxisLabelAlignment();
        } else if (axis === 'y') {
          if (position === 'center') {
            x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;
          } else if (isObject(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            x = this.chart.scales[positionAxisID].getPixelForValue(value);
          }
          textAlign = this._getYAxisLabelAlignment(tl).textAlign;
        }
        if (axis === 'y') {
          if (align === 'start') {
            textBaseline = 'top';
          } else if (align === 'end') {
            textBaseline = 'bottom';
          }
        }
        const labelSizes = this._getLabelSizes();
        for (i = 0, ilen = ticks.length; i < ilen; ++i) {
          tick = ticks[i];
          label = tick.label;
          const optsAtIndex = optionTicks.setContext(this.getContext(i));
          pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
          font = this._resolveTickFontOptions(i);
          lineHeight = font.lineHeight;
          lineCount = isArray(label) ? label.length : 1;
          const halfCount = lineCount / 2;
          const color = optsAtIndex.color;
          const strokeColor = optsAtIndex.textStrokeColor;
          const strokeWidth = optsAtIndex.textStrokeWidth;
          if (isHorizontal) {
            x = pixel;
            if (position === 'top') {
              if (crossAlign === 'near' || rotation !== 0) {
                textOffset = -lineCount * lineHeight + lineHeight / 2;
              } else if (crossAlign === 'center') {
                textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
              } else {
                textOffset = -labelSizes.highest.height + lineHeight / 2;
              }
            } else {
              if (crossAlign === 'near' || rotation !== 0) {
                textOffset = lineHeight / 2;
              } else if (crossAlign === 'center') {
                textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
              } else {
                textOffset = labelSizes.highest.height - lineCount * lineHeight;
              }
            }
            if (mirror) {
              textOffset *= -1;
            }
          } else {
            y = pixel;
            textOffset = (1 - lineCount) * lineHeight / 2;
          }
          let backdrop;
          if (optsAtIndex.showLabelBackdrop) {
            const labelPadding = toPadding(optsAtIndex.backdropPadding);
            const height = labelSizes.heights[i];
            const width = labelSizes.widths[i];
            let top = y + textOffset - labelPadding.top;
            let left = x - labelPadding.left;
            switch (textBaseline) {
            case 'middle':
              top -= height / 2;
              break;
            case 'bottom':
              top -= height;
              break;
            }
            switch (textAlign) {
            case 'center':
              left -= width / 2;
              break;
            case 'right':
              left -= width;
              break;
            }
            backdrop = {
              left,
              top,
              width: width + labelPadding.width,
              height: height + labelPadding.height,
              color: optsAtIndex.backdropColor,
            };
          }
          items.push({
            rotation,
            label,
            font,
            color,
            strokeColor,
            strokeWidth,
            textOffset,
            textAlign,
            textBaseline,
            translation: [x, y],
            backdrop,
          });
        }
        return items;
      }
      _getXAxisLabelAlignment() {
        const {position, ticks} = this.options;
        const rotation = -toRadians(this.labelRotation);
        if (rotation) {
          return position === 'top' ? 'left' : 'right';
        }
        let align = 'center';
        if (ticks.align === 'start') {
          align = 'left';
        } else if (ticks.align === 'end') {
          align = 'right';
        }
        return align;
      }
      _getYAxisLabelAlignment(tl) {
        const {position, ticks: {crossAlign, mirror, padding}} = this.options;
        const labelSizes = this._getLabelSizes();
        const tickAndPadding = tl + padding;
        const widest = labelSizes.widest.width;
        let textAlign;
        let x;
        if (position === 'left') {
          if (mirror) {
            x = this.right + padding;
            if (crossAlign === 'near') {
              textAlign = 'left';
            } else if (crossAlign === 'center') {
              textAlign = 'center';
              x += (widest / 2);
            } else {
              textAlign = 'right';
              x += widest;
            }
          } else {
            x = this.right - tickAndPadding;
            if (crossAlign === 'near') {
              textAlign = 'right';
            } else if (crossAlign === 'center') {
              textAlign = 'center';
              x -= (widest / 2);
            } else {
              textAlign = 'left';
              x = this.left;
            }
          }
        } else if (position === 'right') {
          if (mirror) {
            x = this.left + padding;
            if (crossAlign === 'near') {
              textAlign = 'right';
            } else if (crossAlign === 'center') {
              textAlign = 'center';
              x -= (widest / 2);
            } else {
              textAlign = 'left';
              x -= widest;
            }
          } else {
            x = this.left + tickAndPadding;
            if (crossAlign === 'near') {
              textAlign = 'left';
            } else if (crossAlign === 'center') {
              textAlign = 'center';
              x += widest / 2;
            } else {
              textAlign = 'right';
              x = this.right;
            }
          }
        } else {
          textAlign = 'right';
        }
        return {textAlign, x};
      }
      _computeLabelArea() {
        if (this.options.ticks.mirror) {
          return;
        }
        const chart = this.chart;
        const position = this.options.position;
        if (position === 'left' || position === 'right') {
          return {top: 0, left: this.left, bottom: chart.height, right: this.right};
        } if (position === 'top' || position === 'bottom') {
          return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};
        }
      }
      drawBackground() {
        const {ctx, options: {backgroundColor}, left, top, width, height} = this;
        if (backgroundColor) {
          ctx.save();
          ctx.fillStyle = backgroundColor;
          ctx.fillRect(left, top, width, height);
          ctx.restore();
        }
      }
      getLineWidthForValue(value) {
        const grid = this.options.grid;
        if (!this._isVisible() || !grid.display) {
          return 0;
        }
        const ticks = this.ticks;
        const index = ticks.findIndex(t => t.value === value);
        if (index >= 0) {
          const opts = grid.setContext(this.getContext(index));
          return opts.lineWidth;
        }
        return 0;
      }
      drawGrid(chartArea) {
        const grid = this.options.grid;
        const ctx = this.ctx;
        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
        let i, ilen;
        const drawLine = (p1, p2, style) => {
          if (!style.width || !style.color) {
            return;
          }
          ctx.save();
          ctx.lineWidth = style.width;
          ctx.strokeStyle = style.color;
          ctx.setLineDash(style.borderDash || []);
          ctx.lineDashOffset = style.borderDashOffset;
          ctx.beginPath();
          ctx.moveTo(p1.x, p1.y);
          ctx.lineTo(p2.x, p2.y);
          ctx.stroke();
          ctx.restore();
        };
        if (grid.display) {
          for (i = 0, ilen = items.length; i < ilen; ++i) {
            const item = items[i];
            if (grid.drawOnChartArea) {
              drawLine(
                {x: item.x1, y: item.y1},
                {x: item.x2, y: item.y2},
                item
              );
            }
            if (grid.drawTicks) {
              drawLine(
                {x: item.tx1, y: item.ty1},
                {x: item.tx2, y: item.ty2},
                {
                  color: item.tickColor,
                  width: item.tickWidth,
                  borderDash: item.tickBorderDash,
                  borderDashOffset: item.tickBorderDashOffset
                }
              );
            }
          }
        }
      }
      drawBorder() {
        const {chart, ctx, options: {grid}} = this;
        const borderOpts = grid.setContext(this.getContext());
        const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;
        if (!axisWidth) {
          return;
        }
        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
        const borderValue = this._borderValue;
        let x1, x2, y1, y2;
        if (this.isHorizontal()) {
          x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
          x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
          y1 = y2 = borderValue;
        } else {
          y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
          y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
          x1 = x2 = borderValue;
        }
        ctx.save();
        ctx.lineWidth = borderOpts.borderWidth;
        ctx.strokeStyle = borderOpts.borderColor;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        ctx.restore();
      }
      drawLabels(chartArea) {
        const optionTicks = this.options.ticks;
        if (!optionTicks.display) {
          return;
        }
        const ctx = this.ctx;
        const area = this._computeLabelArea();
        if (area) {
          clipArea(ctx, area);
        }
        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
        let i, ilen;
        for (i = 0, ilen = items.length; i < ilen; ++i) {
          const item = items[i];
          const tickFont = item.font;
          const label = item.label;
          if (item.backdrop) {
            ctx.fillStyle = item.backdrop.color;
            ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);
          }
          let y = item.textOffset;
          renderText(ctx, label, 0, y, tickFont, item);
        }
        if (area) {
          unclipArea(ctx);
        }
      }
      drawTitle() {
        const {ctx, options: {position, title, reverse}} = this;
        if (!title.display) {
          return;
        }
        const font = toFont(title.font);
        const padding = toPadding(title.padding);
        const align = title.align;
        let offset = font.lineHeight / 2;
        if (position === 'bottom' || position === 'center' || isObject(position)) {
          offset += padding.bottom;
          if (isArray(title.text)) {
            offset += font.lineHeight * (title.text.length - 1);
          }
        } else {
          offset += padding.top;
        }
        const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);
        renderText(ctx, title.text, 0, 0, font, {
          color: title.color,
          maxWidth,
          rotation,
          textAlign: titleAlign(align, position, reverse),
          textBaseline: 'middle',
          translation: [titleX, titleY],
        });
      }
      draw(chartArea) {
        if (!this._isVisible()) {
          return;
        }
        this.drawBackground();
        this.drawGrid(chartArea);
        this.drawBorder();
        this.drawTitle();
        this.drawLabels(chartArea);
      }
      _layers() {
        const opts = this.options;
        const tz = opts.ticks && opts.ticks.z || 0;
        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
          return [{
            z: tz,
            draw: (chartArea) => {
              this.draw(chartArea);
            }
          }];
        }
        return [{
          z: gz,
          draw: (chartArea) => {
            this.drawBackground();
            this.drawGrid(chartArea);
            this.drawTitle();
          }
        }, {
          z: gz + 1,
          draw: () => {
            this.drawBorder();
          }
        }, {
          z: tz,
          draw: (chartArea) => {
            this.drawLabels(chartArea);
          }
        }];
      }
      getMatchingVisibleMetas(type) {
        const metas = this.chart.getSortedVisibleDatasetMetas();
        const axisID = this.axis + 'AxisID';
        const result = [];
        let i, ilen;
        for (i = 0, ilen = metas.length; i < ilen; ++i) {
          const meta = metas[i];
          if (meta[axisID] === this.id && (!type || meta.type === type)) {
            result.push(meta);
          }
        }
        return result;
      }
      _resolveTickFontOptions(index) {
        const opts = this.options.ticks.setContext(this.getContext(index));
        return toFont(opts.font);
      }
      _maxDigits() {
        const fontSize = this._resolveTickFontOptions(0).lineHeight;
        return (this.isHorizontal() ? this.width : this.height) / fontSize;
      }
    }

    class TypedRegistry {
      constructor(type, scope, override) {
        this.type = type;
        this.scope = scope;
        this.override = override;
        this.items = Object.create(null);
      }
      isForType(type) {
        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
      }
      register(item) {
        const proto = Object.getPrototypeOf(item);
        let parentScope;
        if (isIChartComponent(proto)) {
          parentScope = this.register(proto);
        }
        const items = this.items;
        const id = item.id;
        const scope = this.scope + '.' + id;
        if (!id) {
          throw new Error('class does not have id: ' + item);
        }
        if (id in items) {
          return scope;
        }
        items[id] = item;
        registerDefaults(item, scope, parentScope);
        if (this.override) {
          defaults.override(item.id, item.overrides);
        }
        return scope;
      }
      get(id) {
        return this.items[id];
      }
      unregister(item) {
        const items = this.items;
        const id = item.id;
        const scope = this.scope;
        if (id in items) {
          delete items[id];
        }
        if (scope && id in defaults[scope]) {
          delete defaults[scope][id];
          if (this.override) {
            delete overrides[id];
          }
        }
      }
    }
    function registerDefaults(item, scope, parentScope) {
      const itemDefaults = merge(Object.create(null), [
        parentScope ? defaults.get(parentScope) : {},
        defaults.get(scope),
        item.defaults
      ]);
      defaults.set(scope, itemDefaults);
      if (item.defaultRoutes) {
        routeDefaults(scope, item.defaultRoutes);
      }
      if (item.descriptors) {
        defaults.describe(scope, item.descriptors);
      }
    }
    function routeDefaults(scope, routes) {
      Object.keys(routes).forEach(property => {
        const propertyParts = property.split('.');
        const sourceName = propertyParts.pop();
        const sourceScope = [scope].concat(propertyParts).join('.');
        const parts = routes[property].split('.');
        const targetName = parts.pop();
        const targetScope = parts.join('.');
        defaults.route(sourceScope, sourceName, targetScope, targetName);
      });
    }
    function isIChartComponent(proto) {
      return 'id' in proto && 'defaults' in proto;
    }

    class Registry {
      constructor() {
        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
        this.elements = new TypedRegistry(Element, 'elements');
        this.plugins = new TypedRegistry(Object, 'plugins');
        this.scales = new TypedRegistry(Scale, 'scales');
        this._typedRegistries = [this.controllers, this.scales, this.elements];
      }
      add(...args) {
        this._each('register', args);
      }
      remove(...args) {
        this._each('unregister', args);
      }
      addControllers(...args) {
        this._each('register', args, this.controllers);
      }
      addElements(...args) {
        this._each('register', args, this.elements);
      }
      addPlugins(...args) {
        this._each('register', args, this.plugins);
      }
      addScales(...args) {
        this._each('register', args, this.scales);
      }
      getController(id) {
        return this._get(id, this.controllers, 'controller');
      }
      getElement(id) {
        return this._get(id, this.elements, 'element');
      }
      getPlugin(id) {
        return this._get(id, this.plugins, 'plugin');
      }
      getScale(id) {
        return this._get(id, this.scales, 'scale');
      }
      removeControllers(...args) {
        this._each('unregister', args, this.controllers);
      }
      removeElements(...args) {
        this._each('unregister', args, this.elements);
      }
      removePlugins(...args) {
        this._each('unregister', args, this.plugins);
      }
      removeScales(...args) {
        this._each('unregister', args, this.scales);
      }
      _each(method, args, typedRegistry) {
        [...args].forEach(arg => {
          const reg = typedRegistry || this._getRegistryForType(arg);
          if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {
            this._exec(method, reg, arg);
          } else {
            each(arg, item => {
              const itemReg = typedRegistry || this._getRegistryForType(item);
              this._exec(method, itemReg, item);
            });
          }
        });
      }
      _exec(method, registry, component) {
        const camelMethod = _capitalize(method);
        callback(component['before' + camelMethod], [], component);
        registry[method](component);
        callback(component['after' + camelMethod], [], component);
      }
      _getRegistryForType(type) {
        for (let i = 0; i < this._typedRegistries.length; i++) {
          const reg = this._typedRegistries[i];
          if (reg.isForType(type)) {
            return reg;
          }
        }
        return this.plugins;
      }
      _get(id, typedRegistry, type) {
        const item = typedRegistry.get(id);
        if (item === undefined) {
          throw new Error('"' + id + '" is not a registered ' + type + '.');
        }
        return item;
      }
    }
    var registry = new Registry();

    class PluginService {
      constructor() {
        this._init = [];
      }
      notify(chart, hook, args, filter) {
        if (hook === 'beforeInit') {
          this._init = this._createDescriptors(chart, true);
          this._notify(this._init, chart, 'install');
        }
        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
        const result = this._notify(descriptors, chart, hook, args);
        if (hook === 'afterDestroy') {
          this._notify(descriptors, chart, 'stop');
          this._notify(this._init, chart, 'uninstall');
        }
        return result;
      }
      _notify(descriptors, chart, hook, args) {
        args = args || {};
        for (const descriptor of descriptors) {
          const plugin = descriptor.plugin;
          const method = plugin[hook];
          const params = [chart, args, descriptor.options];
          if (callback(method, params, plugin) === false && args.cancelable) {
            return false;
          }
        }
        return true;
      }
      invalidate() {
        if (!isNullOrUndef(this._cache)) {
          this._oldCache = this._cache;
          this._cache = undefined;
        }
      }
      _descriptors(chart) {
        if (this._cache) {
          return this._cache;
        }
        const descriptors = this._cache = this._createDescriptors(chart);
        this._notifyStateChanges(chart);
        return descriptors;
      }
      _createDescriptors(chart, all) {
        const config = chart && chart.config;
        const options = valueOrDefault(config.options && config.options.plugins, {});
        const plugins = allPlugins(config);
        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
      }
      _notifyStateChanges(chart) {
        const previousDescriptors = this._oldCache || [];
        const descriptors = this._cache;
        const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));
        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');
        this._notify(diff(descriptors, previousDescriptors), chart, 'start');
      }
    }
    function allPlugins(config) {
      const plugins = [];
      const keys = Object.keys(registry.plugins.items);
      for (let i = 0; i < keys.length; i++) {
        plugins.push(registry.getPlugin(keys[i]));
      }
      const local = config.plugins || [];
      for (let i = 0; i < local.length; i++) {
        const plugin = local[i];
        if (plugins.indexOf(plugin) === -1) {
          plugins.push(plugin);
        }
      }
      return plugins;
    }
    function getOpts(options, all) {
      if (!all && options === false) {
        return null;
      }
      if (options === true) {
        return {};
      }
      return options;
    }
    function createDescriptors(chart, plugins, options, all) {
      const result = [];
      const context = chart.getContext();
      for (let i = 0; i < plugins.length; i++) {
        const plugin = plugins[i];
        const id = plugin.id;
        const opts = getOpts(options[id], all);
        if (opts === null) {
          continue;
        }
        result.push({
          plugin,
          options: pluginOpts(chart.config, plugin, opts, context)
        });
      }
      return result;
    }
    function pluginOpts(config, plugin, opts, context) {
      const keys = config.pluginScopeKeys(plugin);
      const scopes = config.getOptionScopes(opts, keys);
      return config.createResolver(scopes, context, [''], {scriptable: false, indexable: false, allKeys: true});
    }

    function getIndexAxis(type, options) {
      const datasetDefaults = defaults.datasets[type] || {};
      const datasetOptions = (options.datasets || {})[type] || {};
      return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
    }
    function getAxisFromDefaultScaleID(id, indexAxis) {
      let axis = id;
      if (id === '_index_') {
        axis = indexAxis;
      } else if (id === '_value_') {
        axis = indexAxis === 'x' ? 'y' : 'x';
      }
      return axis;
    }
    function getDefaultScaleIDFromAxis(axis, indexAxis) {
      return axis === indexAxis ? '_index_' : '_value_';
    }
    function axisFromPosition(position) {
      if (position === 'top' || position === 'bottom') {
        return 'x';
      }
      if (position === 'left' || position === 'right') {
        return 'y';
      }
    }
    function determineAxis(id, scaleOptions) {
      if (id === 'x' || id === 'y') {
        return id;
      }
      return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();
    }
    function mergeScaleConfig(config, options) {
      const chartDefaults = overrides[config.type] || {scales: {}};
      const configScales = options.scales || {};
      const chartIndexAxis = getIndexAxis(config.type, options);
      const firstIDs = Object.create(null);
      const scales = Object.create(null);
      Object.keys(configScales).forEach(id => {
        const scaleConf = configScales[id];
        if (!isObject(scaleConf)) {
          return console.error(`Invalid scale configuration for scale: ${id}`);
        }
        if (scaleConf._proxy) {
          return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
        }
        const axis = determineAxis(id, scaleConf);
        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
        const defaultScaleOptions = chartDefaults.scales || {};
        firstIDs[axis] = firstIDs[axis] || id;
        scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);
      });
      config.data.datasets.forEach(dataset => {
        const type = dataset.type || config.type;
        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
        const datasetDefaults = overrides[type] || {};
        const defaultScaleOptions = datasetDefaults.scales || {};
        Object.keys(defaultScaleOptions).forEach(defaultID => {
          const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
          const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;
          scales[id] = scales[id] || Object.create(null);
          mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);
        });
      });
      Object.keys(scales).forEach(key => {
        const scale = scales[key];
        mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);
      });
      return scales;
    }
    function initOptions(config) {
      const options = config.options || (config.options = {});
      options.plugins = valueOrDefault(options.plugins, {});
      options.scales = mergeScaleConfig(config, options);
    }
    function initData(data) {
      data = data || {};
      data.datasets = data.datasets || [];
      data.labels = data.labels || [];
      return data;
    }
    function initConfig(config) {
      config = config || {};
      config.data = initData(config.data);
      initOptions(config);
      return config;
    }
    const keyCache = new Map();
    const keysCached = new Set();
    function cachedKeys(cacheKey, generate) {
      let keys = keyCache.get(cacheKey);
      if (!keys) {
        keys = generate();
        keyCache.set(cacheKey, keys);
        keysCached.add(keys);
      }
      return keys;
    }
    const addIfFound = (set, obj, key) => {
      const opts = resolveObjectKey(obj, key);
      if (opts !== undefined) {
        set.add(opts);
      }
    };
    class Config {
      constructor(config) {
        this._config = initConfig(config);
        this._scopeCache = new Map();
        this._resolverCache = new Map();
      }
      get platform() {
        return this._config.platform;
      }
      get type() {
        return this._config.type;
      }
      set type(type) {
        this._config.type = type;
      }
      get data() {
        return this._config.data;
      }
      set data(data) {
        this._config.data = initData(data);
      }
      get options() {
        return this._config.options;
      }
      set options(options) {
        this._config.options = options;
      }
      get plugins() {
        return this._config.plugins;
      }
      update() {
        const config = this._config;
        this.clearCache();
        initOptions(config);
      }
      clearCache() {
        this._scopeCache.clear();
        this._resolverCache.clear();
      }
      datasetScopeKeys(datasetType) {
        return cachedKeys(datasetType,
          () => [[
            `datasets.${datasetType}`,
            ''
          ]]);
      }
      datasetAnimationScopeKeys(datasetType, transition) {
        return cachedKeys(`${datasetType}.transition.${transition}`,
          () => [
            [
              `datasets.${datasetType}.transitions.${transition}`,
              `transitions.${transition}`,
            ],
            [
              `datasets.${datasetType}`,
              ''
            ]
          ]);
      }
      datasetElementScopeKeys(datasetType, elementType) {
        return cachedKeys(`${datasetType}-${elementType}`,
          () => [[
            `datasets.${datasetType}.elements.${elementType}`,
            `datasets.${datasetType}`,
            `elements.${elementType}`,
            ''
          ]]);
      }
      pluginScopeKeys(plugin) {
        const id = plugin.id;
        const type = this.type;
        return cachedKeys(`${type}-plugin-${id}`,
          () => [[
            `plugins.${id}`,
            ...plugin.additionalOptionScopes || [],
          ]]);
      }
      _cachedScopes(mainScope, resetCache) {
        const _scopeCache = this._scopeCache;
        let cache = _scopeCache.get(mainScope);
        if (!cache || resetCache) {
          cache = new Map();
          _scopeCache.set(mainScope, cache);
        }
        return cache;
      }
      getOptionScopes(mainScope, keyLists, resetCache) {
        const {options, type} = this;
        const cache = this._cachedScopes(mainScope, resetCache);
        const cached = cache.get(keyLists);
        if (cached) {
          return cached;
        }
        const scopes = new Set();
        keyLists.forEach(keys => {
          if (mainScope) {
            scopes.add(mainScope);
            keys.forEach(key => addIfFound(scopes, mainScope, key));
          }
          keys.forEach(key => addIfFound(scopes, options, key));
          keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));
          keys.forEach(key => addIfFound(scopes, defaults, key));
          keys.forEach(key => addIfFound(scopes, descriptors, key));
        });
        const array = Array.from(scopes);
        if (array.length === 0) {
          array.push(Object.create(null));
        }
        if (keysCached.has(keyLists)) {
          cache.set(keyLists, array);
        }
        return array;
      }
      chartOptionScopes() {
        const {options, type} = this;
        return [
          options,
          overrides[type] || {},
          defaults.datasets[type] || {},
          {type},
          defaults,
          descriptors
        ];
      }
      resolveNamedOptions(scopes, names, context, prefixes = ['']) {
        const result = {$shared: true};
        const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);
        let options = resolver;
        if (needContext(resolver, names)) {
          result.$shared = false;
          context = isFunction(context) ? context() : context;
          const subResolver = this.createResolver(scopes, context, subPrefixes);
          options = _attachContext(resolver, context, subResolver);
        }
        for (const prop of names) {
          result[prop] = options[prop];
        }
        return result;
      }
      createResolver(scopes, context, prefixes = [''], descriptorDefaults) {
        const {resolver} = getResolver(this._resolverCache, scopes, prefixes);
        return isObject(context)
          ? _attachContext(resolver, context, undefined, descriptorDefaults)
          : resolver;
      }
    }
    function getResolver(resolverCache, scopes, prefixes) {
      let cache = resolverCache.get(scopes);
      if (!cache) {
        cache = new Map();
        resolverCache.set(scopes, cache);
      }
      const cacheKey = prefixes.join();
      let cached = cache.get(cacheKey);
      if (!cached) {
        const resolver = _createResolver(scopes, prefixes);
        cached = {
          resolver,
          subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))
        };
        cache.set(cacheKey, cached);
      }
      return cached;
    }
    const hasFunction = value => isObject(value)
      && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);
    function needContext(proxy, names) {
      const {isScriptable, isIndexable} = _descriptors(proxy);
      for (const prop of names) {
        const scriptable = isScriptable(prop);
        const indexable = isIndexable(prop);
        const value = (indexable || scriptable) && proxy[prop];
        if ((scriptable && (isFunction(value) || hasFunction(value)))
          || (indexable && isArray(value))) {
          return true;
        }
      }
      return false;
    }

    var version = "3.7.0";

    const KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];
    function positionIsHorizontal(position, axis) {
      return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');
    }
    function compare2Level(l1, l2) {
      return function(a, b) {
        return a[l1] === b[l1]
          ? a[l2] - b[l2]
          : a[l1] - b[l1];
      };
    }
    function onAnimationsComplete(context) {
      const chart = context.chart;
      const animationOptions = chart.options.animation;
      chart.notifyPlugins('afterRender');
      callback(animationOptions && animationOptions.onComplete, [context], chart);
    }
    function onAnimationProgress(context) {
      const chart = context.chart;
      const animationOptions = chart.options.animation;
      callback(animationOptions && animationOptions.onProgress, [context], chart);
    }
    function getCanvas(item) {
      if (_isDomSupported() && typeof item === 'string') {
        item = document.getElementById(item);
      } else if (item && item.length) {
        item = item[0];
      }
      if (item && item.canvas) {
        item = item.canvas;
      }
      return item;
    }
    const instances = {};
    const getChart = (key) => {
      const canvas = getCanvas(key);
      return Object.values(instances).filter((c) => c.canvas === canvas).pop();
    };
    function moveNumericKeys(obj, start, move) {
      const keys = Object.keys(obj);
      for (const key of keys) {
        const intKey = +key;
        if (intKey >= start) {
          const value = obj[key];
          delete obj[key];
          if (move > 0 || intKey > start) {
            obj[intKey + move] = value;
          }
        }
      }
    }
    function determineLastEvent(e, lastEvent, inChartArea, isClick) {
      if (!inChartArea || e.type === 'mouseout') {
        return null;
      }
      if (isClick) {
        return lastEvent;
      }
      return e;
    }
    class Chart {
      constructor(item, userConfig) {
        const config = this.config = new Config(userConfig);
        const initialCanvas = getCanvas(item);
        const existingChart = getChart(initialCanvas);
        if (existingChart) {
          throw new Error(
            'Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' +
    				' must be destroyed before the canvas can be reused.'
          );
        }
        const options = config.createResolver(config.chartOptionScopes(), this.getContext());
        this.platform = new (config.platform || _detectPlatform(initialCanvas))();
        this.platform.updateConfig(config);
        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
        const canvas = context && context.canvas;
        const height = canvas && canvas.height;
        const width = canvas && canvas.width;
        this.id = uid();
        this.ctx = context;
        this.canvas = canvas;
        this.width = width;
        this.height = height;
        this._options = options;
        this._aspectRatio = this.aspectRatio;
        this._layers = [];
        this._metasets = [];
        this._stacks = undefined;
        this.boxes = [];
        this.currentDevicePixelRatio = undefined;
        this.chartArea = undefined;
        this._active = [];
        this._lastEvent = undefined;
        this._listeners = {};
        this._responsiveListeners = undefined;
        this._sortedMetasets = [];
        this.scales = {};
        this._plugins = new PluginService();
        this.$proxies = {};
        this._hiddenIndices = {};
        this.attached = false;
        this._animationsDisabled = undefined;
        this.$context = undefined;
        this._doResize = debounce$1(mode => this.update(mode), options.resizeDelay || 0);
        this._dataChanges = [];
        instances[this.id] = this;
        if (!context || !canvas) {
          console.error("Failed to create chart: can't acquire context from the given item");
          return;
        }
        animator.listen(this, 'complete', onAnimationsComplete);
        animator.listen(this, 'progress', onAnimationProgress);
        this._initialize();
        if (this.attached) {
          this.update();
        }
      }
      get aspectRatio() {
        const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;
        if (!isNullOrUndef(aspectRatio)) {
          return aspectRatio;
        }
        if (maintainAspectRatio && _aspectRatio) {
          return _aspectRatio;
        }
        return height ? width / height : null;
      }
      get data() {
        return this.config.data;
      }
      set data(data) {
        this.config.data = data;
      }
      get options() {
        return this._options;
      }
      set options(options) {
        this.config.options = options;
      }
      _initialize() {
        this.notifyPlugins('beforeInit');
        if (this.options.responsive) {
          this.resize();
        } else {
          retinaScale(this, this.options.devicePixelRatio);
        }
        this.bindEvents();
        this.notifyPlugins('afterInit');
        return this;
      }
      clear() {
        clearCanvas(this.canvas, this.ctx);
        return this;
      }
      stop() {
        animator.stop(this);
        return this;
      }
      resize(width, height) {
        if (!animator.running(this)) {
          this._resize(width, height);
        } else {
          this._resizeBeforeDraw = {width, height};
        }
      }
      _resize(width, height) {
        const options = this.options;
        const canvas = this.canvas;
        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
        const mode = this.width ? 'resize' : 'attach';
        this.width = newSize.width;
        this.height = newSize.height;
        this._aspectRatio = this.aspectRatio;
        if (!retinaScale(this, newRatio, true)) {
          return;
        }
        this.notifyPlugins('resize', {size: newSize});
        callback(options.onResize, [this, newSize], this);
        if (this.attached) {
          if (this._doResize(mode)) {
            this.render();
          }
        }
      }
      ensureScalesHaveIDs() {
        const options = this.options;
        const scalesOptions = options.scales || {};
        each(scalesOptions, (axisOptions, axisID) => {
          axisOptions.id = axisID;
        });
      }
      buildOrUpdateScales() {
        const options = this.options;
        const scaleOpts = options.scales;
        const scales = this.scales;
        const updated = Object.keys(scales).reduce((obj, id) => {
          obj[id] = false;
          return obj;
        }, {});
        let items = [];
        if (scaleOpts) {
          items = items.concat(
            Object.keys(scaleOpts).map((id) => {
              const scaleOptions = scaleOpts[id];
              const axis = determineAxis(id, scaleOptions);
              const isRadial = axis === 'r';
              const isHorizontal = axis === 'x';
              return {
                options: scaleOptions,
                dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
                dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
              };
            })
          );
        }
        each(items, (item) => {
          const scaleOptions = item.options;
          const id = scaleOptions.id;
          const axis = determineAxis(id, scaleOptions);
          const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
          if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
            scaleOptions.position = item.dposition;
          }
          updated[id] = true;
          let scale = null;
          if (id in scales && scales[id].type === scaleType) {
            scale = scales[id];
          } else {
            const scaleClass = registry.getScale(scaleType);
            scale = new scaleClass({
              id,
              type: scaleType,
              ctx: this.ctx,
              chart: this
            });
            scales[scale.id] = scale;
          }
          scale.init(scaleOptions, options);
        });
        each(updated, (hasUpdated, id) => {
          if (!hasUpdated) {
            delete scales[id];
          }
        });
        each(scales, (scale) => {
          layouts.configure(this, scale, scale.options);
          layouts.addBox(this, scale);
        });
      }
      _updateMetasets() {
        const metasets = this._metasets;
        const numData = this.data.datasets.length;
        const numMeta = metasets.length;
        metasets.sort((a, b) => a.index - b.index);
        if (numMeta > numData) {
          for (let i = numData; i < numMeta; ++i) {
            this._destroyDatasetMeta(i);
          }
          metasets.splice(numData, numMeta - numData);
        }
        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
      }
      _removeUnreferencedMetasets() {
        const {_metasets: metasets, data: {datasets}} = this;
        if (metasets.length > datasets.length) {
          delete this._stacks;
        }
        metasets.forEach((meta, index) => {
          if (datasets.filter(x => x === meta._dataset).length === 0) {
            this._destroyDatasetMeta(index);
          }
        });
      }
      buildOrUpdateControllers() {
        const newControllers = [];
        const datasets = this.data.datasets;
        let i, ilen;
        this._removeUnreferencedMetasets();
        for (i = 0, ilen = datasets.length; i < ilen; i++) {
          const dataset = datasets[i];
          let meta = this.getDatasetMeta(i);
          const type = dataset.type || this.config.type;
          if (meta.type && meta.type !== type) {
            this._destroyDatasetMeta(i);
            meta = this.getDatasetMeta(i);
          }
          meta.type = type;
          meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
          meta.order = dataset.order || 0;
          meta.index = i;
          meta.label = '' + dataset.label;
          meta.visible = this.isDatasetVisible(i);
          if (meta.controller) {
            meta.controller.updateIndex(i);
            meta.controller.linkScales();
          } else {
            const ControllerClass = registry.getController(type);
            const {datasetElementType, dataElementType} = defaults.datasets[type];
            Object.assign(ControllerClass.prototype, {
              dataElementType: registry.getElement(dataElementType),
              datasetElementType: datasetElementType && registry.getElement(datasetElementType)
            });
            meta.controller = new ControllerClass(this, i);
            newControllers.push(meta.controller);
          }
        }
        this._updateMetasets();
        return newControllers;
      }
      _resetElements() {
        each(this.data.datasets, (dataset, datasetIndex) => {
          this.getDatasetMeta(datasetIndex).controller.reset();
        }, this);
      }
      reset() {
        this._resetElements();
        this.notifyPlugins('reset');
      }
      update(mode) {
        const config = this.config;
        config.update();
        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
        const animsDisabled = this._animationsDisabled = !options.animation;
        this._updateScales();
        this._checkEventBindings();
        this._updateHiddenIndices();
        this._plugins.invalidate();
        if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {
          return;
        }
        const newControllers = this.buildOrUpdateControllers();
        this.notifyPlugins('beforeElementsUpdate');
        let minPadding = 0;
        for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {
          const {controller} = this.getDatasetMeta(i);
          const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
          controller.buildOrUpdateElements(reset);
          minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
        }
        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
        this._updateLayout(minPadding);
        if (!animsDisabled) {
          each(newControllers, (controller) => {
            controller.reset();
          });
        }
        this._updateDatasets(mode);
        this.notifyPlugins('afterUpdate', {mode});
        this._layers.sort(compare2Level('z', '_idx'));
        const {_active, _lastEvent} = this;
        if (_lastEvent) {
          this._eventHandler(_lastEvent, true);
        } else if (_active.length) {
          this._updateHoverStyles(_active, _active, true);
        }
        this.render();
      }
      _updateScales() {
        each(this.scales, (scale) => {
          layouts.removeBox(this, scale);
        });
        this.ensureScalesHaveIDs();
        this.buildOrUpdateScales();
      }
      _checkEventBindings() {
        const options = this.options;
        const existingEvents = new Set(Object.keys(this._listeners));
        const newEvents = new Set(options.events);
        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
          this.unbindEvents();
          this.bindEvents();
        }
      }
      _updateHiddenIndices() {
        const {_hiddenIndices} = this;
        const changes = this._getUniformDataChanges() || [];
        for (const {method, start, count} of changes) {
          const move = method === '_removeElements' ? -count : count;
          moveNumericKeys(_hiddenIndices, start, move);
        }
      }
      _getUniformDataChanges() {
        const _dataChanges = this._dataChanges;
        if (!_dataChanges || !_dataChanges.length) {
          return;
        }
        this._dataChanges = [];
        const datasetCount = this.data.datasets.length;
        const makeSet = (idx) => new Set(
          _dataChanges
            .filter(c => c[0] === idx)
            .map((c, i) => i + ',' + c.splice(1).join(','))
        );
        const changeSet = makeSet(0);
        for (let i = 1; i < datasetCount; i++) {
          if (!setsEqual(changeSet, makeSet(i))) {
            return;
          }
        }
        return Array.from(changeSet)
          .map(c => c.split(','))
          .map(a => ({method: a[1], start: +a[2], count: +a[3]}));
      }
      _updateLayout(minPadding) {
        if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {
          return;
        }
        layouts.update(this, this.width, this.height, minPadding);
        const area = this.chartArea;
        const noArea = area.width <= 0 || area.height <= 0;
        this._layers = [];
        each(this.boxes, (box) => {
          if (noArea && box.position === 'chartArea') {
            return;
          }
          if (box.configure) {
            box.configure();
          }
          this._layers.push(...box._layers());
        }, this);
        this._layers.forEach((item, index) => {
          item._idx = index;
        });
        this.notifyPlugins('afterLayout');
      }
      _updateDatasets(mode) {
        if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {
          return;
        }
        for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
          this.getDatasetMeta(i).controller.configure();
        }
        for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
          this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);
        }
        this.notifyPlugins('afterDatasetsUpdate', {mode});
      }
      _updateDataset(index, mode) {
        const meta = this.getDatasetMeta(index);
        const args = {meta, index, mode, cancelable: true};
        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {
          return;
        }
        meta.controller._update(mode);
        args.cancelable = false;
        this.notifyPlugins('afterDatasetUpdate', args);
      }
      render() {
        if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {
          return;
        }
        if (animator.has(this)) {
          if (this.attached && !animator.running(this)) {
            animator.start(this);
          }
        } else {
          this.draw();
          onAnimationsComplete({chart: this});
        }
      }
      draw() {
        let i;
        if (this._resizeBeforeDraw) {
          const {width, height} = this._resizeBeforeDraw;
          this._resize(width, height);
          this._resizeBeforeDraw = null;
        }
        this.clear();
        if (this.width <= 0 || this.height <= 0) {
          return;
        }
        if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {
          return;
        }
        const layers = this._layers;
        for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
          layers[i].draw(this.chartArea);
        }
        this._drawDatasets();
        for (; i < layers.length; ++i) {
          layers[i].draw(this.chartArea);
        }
        this.notifyPlugins('afterDraw');
      }
      _getSortedDatasetMetas(filterVisible) {
        const metasets = this._sortedMetasets;
        const result = [];
        let i, ilen;
        for (i = 0, ilen = metasets.length; i < ilen; ++i) {
          const meta = metasets[i];
          if (!filterVisible || meta.visible) {
            result.push(meta);
          }
        }
        return result;
      }
      getSortedVisibleDatasetMetas() {
        return this._getSortedDatasetMetas(true);
      }
      _drawDatasets() {
        if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {
          return;
        }
        const metasets = this.getSortedVisibleDatasetMetas();
        for (let i = metasets.length - 1; i >= 0; --i) {
          this._drawDataset(metasets[i]);
        }
        this.notifyPlugins('afterDatasetsDraw');
      }
      _drawDataset(meta) {
        const ctx = this.ctx;
        const clip = meta._clip;
        const useClip = !clip.disabled;
        const area = this.chartArea;
        const args = {
          meta,
          index: meta.index,
          cancelable: true
        };
        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {
          return;
        }
        if (useClip) {
          clipArea(ctx, {
            left: clip.left === false ? 0 : area.left - clip.left,
            right: clip.right === false ? this.width : area.right + clip.right,
            top: clip.top === false ? 0 : area.top - clip.top,
            bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
          });
        }
        meta.controller.draw();
        if (useClip) {
          unclipArea(ctx);
        }
        args.cancelable = false;
        this.notifyPlugins('afterDatasetDraw', args);
      }
      getElementsAtEventForMode(e, mode, options, useFinalPosition) {
        const method = Interaction.modes[mode];
        if (typeof method === 'function') {
          return method(this, e, options, useFinalPosition);
        }
        return [];
      }
      getDatasetMeta(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        const metasets = this._metasets;
        let meta = metasets.filter(x => x && x._dataset === dataset).pop();
        if (!meta) {
          meta = {
            type: null,
            data: [],
            dataset: null,
            controller: null,
            hidden: null,
            xAxisID: null,
            yAxisID: null,
            order: dataset && dataset.order || 0,
            index: datasetIndex,
            _dataset: dataset,
            _parsed: [],
            _sorted: false
          };
          metasets.push(meta);
        }
        return meta;
      }
      getContext() {
        return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));
      }
      getVisibleDatasetCount() {
        return this.getSortedVisibleDatasetMetas().length;
      }
      isDatasetVisible(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        if (!dataset) {
          return false;
        }
        const meta = this.getDatasetMeta(datasetIndex);
        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
      }
      setDatasetVisibility(datasetIndex, visible) {
        const meta = this.getDatasetMeta(datasetIndex);
        meta.hidden = !visible;
      }
      toggleDataVisibility(index) {
        this._hiddenIndices[index] = !this._hiddenIndices[index];
      }
      getDataVisibility(index) {
        return !this._hiddenIndices[index];
      }
      _updateVisibility(datasetIndex, dataIndex, visible) {
        const mode = visible ? 'show' : 'hide';
        const meta = this.getDatasetMeta(datasetIndex);
        const anims = meta.controller._resolveAnimations(undefined, mode);
        if (defined(dataIndex)) {
          meta.data[dataIndex].hidden = !visible;
          this.update();
        } else {
          this.setDatasetVisibility(datasetIndex, visible);
          anims.update(meta, {visible});
          this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);
        }
      }
      hide(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, false);
      }
      show(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, true);
      }
      _destroyDatasetMeta(datasetIndex) {
        const meta = this._metasets[datasetIndex];
        if (meta && meta.controller) {
          meta.controller._destroy();
        }
        delete this._metasets[datasetIndex];
      }
      _stop() {
        let i, ilen;
        this.stop();
        animator.remove(this);
        for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
          this._destroyDatasetMeta(i);
        }
      }
      destroy() {
        this.notifyPlugins('beforeDestroy');
        const {canvas, ctx} = this;
        this._stop();
        this.config.clearCache();
        if (canvas) {
          this.unbindEvents();
          clearCanvas(canvas, ctx);
          this.platform.releaseContext(ctx);
          this.canvas = null;
          this.ctx = null;
        }
        this.notifyPlugins('destroy');
        delete instances[this.id];
        this.notifyPlugins('afterDestroy');
      }
      toBase64Image(...args) {
        return this.canvas.toDataURL(...args);
      }
      bindEvents() {
        this.bindUserEvents();
        if (this.options.responsive) {
          this.bindResponsiveEvents();
        } else {
          this.attached = true;
        }
      }
      bindUserEvents() {
        const listeners = this._listeners;
        const platform = this.platform;
        const _add = (type, listener) => {
          platform.addEventListener(this, type, listener);
          listeners[type] = listener;
        };
        const listener = (e, x, y) => {
          e.offsetX = x;
          e.offsetY = y;
          this._eventHandler(e);
        };
        each(this.options.events, (type) => _add(type, listener));
      }
      bindResponsiveEvents() {
        if (!this._responsiveListeners) {
          this._responsiveListeners = {};
        }
        const listeners = this._responsiveListeners;
        const platform = this.platform;
        const _add = (type, listener) => {
          platform.addEventListener(this, type, listener);
          listeners[type] = listener;
        };
        const _remove = (type, listener) => {
          if (listeners[type]) {
            platform.removeEventListener(this, type, listener);
            delete listeners[type];
          }
        };
        const listener = (width, height) => {
          if (this.canvas) {
            this.resize(width, height);
          }
        };
        let detached;
        const attached = () => {
          _remove('attach', attached);
          this.attached = true;
          this.resize();
          _add('resize', listener);
          _add('detach', detached);
        };
        detached = () => {
          this.attached = false;
          _remove('resize', listener);
          this._stop();
          this._resize(0, 0);
          _add('attach', attached);
        };
        if (platform.isAttached(this.canvas)) {
          attached();
        } else {
          detached();
        }
      }
      unbindEvents() {
        each(this._listeners, (listener, type) => {
          this.platform.removeEventListener(this, type, listener);
        });
        this._listeners = {};
        each(this._responsiveListeners, (listener, type) => {
          this.platform.removeEventListener(this, type, listener);
        });
        this._responsiveListeners = undefined;
      }
      updateHoverStyle(items, mode, enabled) {
        const prefix = enabled ? 'set' : 'remove';
        let meta, item, i, ilen;
        if (mode === 'dataset') {
          meta = this.getDatasetMeta(items[0].datasetIndex);
          meta.controller['_' + prefix + 'DatasetHoverStyle']();
        }
        for (i = 0, ilen = items.length; i < ilen; ++i) {
          item = items[i];
          const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
          if (controller) {
            controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
          }
        }
      }
      getActiveElements() {
        return this._active || [];
      }
      setActiveElements(activeElements) {
        const lastActive = this._active || [];
        const active = activeElements.map(({datasetIndex, index}) => {
          const meta = this.getDatasetMeta(datasetIndex);
          if (!meta) {
            throw new Error('No dataset found at index ' + datasetIndex);
          }
          return {
            datasetIndex,
            element: meta.data[index],
            index,
          };
        });
        const changed = !_elementsEqual(active, lastActive);
        if (changed) {
          this._active = active;
          this._lastEvent = null;
          this._updateHoverStyles(active, lastActive);
        }
      }
      notifyPlugins(hook, args, filter) {
        return this._plugins.notify(this, hook, args, filter);
      }
      _updateHoverStyles(active, lastActive, replay) {
        const hoverOptions = this.options.hover;
        const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));
        const deactivated = diff(lastActive, active);
        const activated = replay ? active : diff(active, lastActive);
        if (deactivated.length) {
          this.updateHoverStyle(deactivated, hoverOptions.mode, false);
        }
        if (activated.length && hoverOptions.mode) {
          this.updateHoverStyle(activated, hoverOptions.mode, true);
        }
      }
      _eventHandler(e, replay) {
        const args = {
          event: e,
          replay,
          cancelable: true,
          inChartArea: _isPointInArea(e, this.chartArea, this._minPadding)
        };
        const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);
        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {
          return;
        }
        const changed = this._handleEvent(e, replay, args.inChartArea);
        args.cancelable = false;
        this.notifyPlugins('afterEvent', args, eventFilter);
        if (changed || args.changed) {
          this.render();
        }
        return this;
      }
      _handleEvent(e, replay, inChartArea) {
        const {_active: lastActive = [], options} = this;
        const useFinalPosition = replay;
        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
        const isClick = _isClickEvent(e);
        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
        if (inChartArea) {
          this._lastEvent = null;
          callback(options.onHover, [e, active, this], this);
          if (isClick) {
            callback(options.onClick, [e, active, this], this);
          }
        }
        const changed = !_elementsEqual(active, lastActive);
        if (changed || replay) {
          this._active = active;
          this._updateHoverStyles(active, lastActive, replay);
        }
        this._lastEvent = lastEvent;
        return changed;
      }
      _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
        if (e.type === 'mouseout') {
          return [];
        }
        if (!inChartArea) {
          return lastActive;
        }
        const hoverOptions = this.options.hover;
        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
      }
    }
    const invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());
    const enumerable = true;
    Object.defineProperties(Chart, {
      defaults: {
        enumerable,
        value: defaults
      },
      instances: {
        enumerable,
        value: instances
      },
      overrides: {
        enumerable,
        value: overrides
      },
      registry: {
        enumerable,
        value: registry
      },
      version: {
        enumerable,
        value: version
      },
      getChart: {
        enumerable,
        value: getChart
      },
      register: {
        enumerable,
        value: (...items) => {
          registry.add(...items);
          invalidatePlugins();
        }
      },
      unregister: {
        enumerable,
        value: (...items) => {
          registry.remove(...items);
          invalidatePlugins();
        }
      }
    });

    function clipArc(ctx, element, endAngle) {
      const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;
      let angleMargin = pixelMargin / outerRadius;
      ctx.beginPath();
      ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
      if (innerRadius > pixelMargin) {
        angleMargin = pixelMargin / innerRadius;
        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
      } else {
        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
      }
      ctx.closePath();
      ctx.clip();
    }
    function toRadiusCorners(value) {
      return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);
    }
    function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
      const o = toRadiusCorners(arc.options.borderRadius);
      const halfThickness = (outerRadius - innerRadius) / 2;
      const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
      const computeOuterLimit = (val) => {
        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
      };
      return {
        outerStart: computeOuterLimit(o.outerStart),
        outerEnd: computeOuterLimit(o.outerEnd),
        innerStart: _limitValue(o.innerStart, 0, innerLimit),
        innerEnd: _limitValue(o.innerEnd, 0, innerLimit),
      };
    }
    function rThetaToXY(r, theta, x, y) {
      return {
        x: x + r * Math.cos(theta),
        y: y + r * Math.sin(theta),
      };
    }
    function pathArc(ctx, element, offset, spacing, end) {
      const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;
      const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
      const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
      let spacingOffset = 0;
      const alpha = end - start;
      if (spacing) {
        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
        const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;
        spacingOffset = (alpha - adjustedAngle) / 2;
      }
      const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;
      const angleOffset = (alpha - beta) / 2;
      const startAngle = start + angleOffset + spacingOffset;
      const endAngle = end - angleOffset - spacingOffset;
      const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
      const outerStartAdjustedRadius = outerRadius - outerStart;
      const outerEndAdjustedRadius = outerRadius - outerEnd;
      const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
      const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
      const innerStartAdjustedRadius = innerRadius + innerStart;
      const innerEndAdjustedRadius = innerRadius + innerEnd;
      const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
      const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
      ctx.beginPath();
      ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);
      if (outerEnd > 0) {
        const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
      }
      const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
      ctx.lineTo(p4.x, p4.y);
      if (innerEnd > 0) {
        const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
      }
      ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);
      if (innerStart > 0) {
        const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
      }
      const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
      ctx.lineTo(p8.x, p8.y);
      if (outerStart > 0) {
        const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
      }
      ctx.closePath();
    }
    function drawArc(ctx, element, offset, spacing) {
      const {fullCircles, startAngle, circumference} = element;
      let endAngle = element.endAngle;
      if (fullCircles) {
        pathArc(ctx, element, offset, spacing, startAngle + TAU);
        for (let i = 0; i < fullCircles; ++i) {
          ctx.fill();
        }
        if (!isNaN(circumference)) {
          endAngle = startAngle + circumference % TAU;
          if (circumference % TAU === 0) {
            endAngle += TAU;
          }
        }
      }
      pathArc(ctx, element, offset, spacing, endAngle);
      ctx.fill();
      return endAngle;
    }
    function drawFullCircleBorders(ctx, element, inner) {
      const {x, y, startAngle, pixelMargin, fullCircles} = element;
      const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);
      const innerRadius = element.innerRadius + pixelMargin;
      let i;
      if (inner) {
        clipArc(ctx, element, startAngle + TAU);
      }
      ctx.beginPath();
      ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);
      for (i = 0; i < fullCircles; ++i) {
        ctx.stroke();
      }
      ctx.beginPath();
      ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);
      for (i = 0; i < fullCircles; ++i) {
        ctx.stroke();
      }
    }
    function drawBorder(ctx, element, offset, spacing, endAngle) {
      const {options} = element;
      const {borderWidth, borderJoinStyle} = options;
      const inner = options.borderAlign === 'inner';
      if (!borderWidth) {
        return;
      }
      if (inner) {
        ctx.lineWidth = borderWidth * 2;
        ctx.lineJoin = borderJoinStyle || 'round';
      } else {
        ctx.lineWidth = borderWidth;
        ctx.lineJoin = borderJoinStyle || 'bevel';
      }
      if (element.fullCircles) {
        drawFullCircleBorders(ctx, element, inner);
      }
      if (inner) {
        clipArc(ctx, element, endAngle);
      }
      pathArc(ctx, element, offset, spacing, endAngle);
      ctx.stroke();
    }
    class ArcElement extends Element {
      constructor(cfg) {
        super();
        this.options = undefined;
        this.circumference = undefined;
        this.startAngle = undefined;
        this.endAngle = undefined;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.pixelMargin = 0;
        this.fullCircles = 0;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      inRange(chartX, chartY, useFinalPosition) {
        const point = this.getProps(['x', 'y'], useFinalPosition);
        const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});
        const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([
          'startAngle',
          'endAngle',
          'innerRadius',
          'outerRadius',
          'circumference'
        ], useFinalPosition);
        const rAdjust = this.options.spacing / 2;
        const _circumference = valueOrDefault(circumference, endAngle - startAngle);
        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);
        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
        return (betweenAngles && withinRadius);
      }
      getCenterPoint(useFinalPosition) {
        const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([
          'x',
          'y',
          'startAngle',
          'endAngle',
          'innerRadius',
          'outerRadius',
          'circumference',
        ], useFinalPosition);
        const {offset, spacing} = this.options;
        const halfAngle = (startAngle + endAngle) / 2;
        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
        return {
          x: x + Math.cos(halfAngle) * halfRadius,
          y: y + Math.sin(halfAngle) * halfRadius
        };
      }
      tooltipPosition(useFinalPosition) {
        return this.getCenterPoint(useFinalPosition);
      }
      draw(ctx) {
        const {options, circumference} = this;
        const offset = (options.offset || 0) / 2;
        const spacing = (options.spacing || 0) / 2;
        this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;
        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
          return;
        }
        ctx.save();
        let radiusOffset = 0;
        if (offset) {
          radiusOffset = offset / 2;
          const halfAngle = (this.startAngle + this.endAngle) / 2;
          ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);
          if (this.circumference >= PI) {
            radiusOffset = offset;
          }
        }
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        const endAngle = drawArc(ctx, this, radiusOffset, spacing);
        drawBorder(ctx, this, radiusOffset, spacing, endAngle);
        ctx.restore();
      }
    }
    ArcElement.id = 'arc';
    ArcElement.defaults = {
      borderAlign: 'center',
      borderColor: '#fff',
      borderJoinStyle: undefined,
      borderRadius: 0,
      borderWidth: 2,
      offset: 0,
      spacing: 0,
      angle: undefined,
    };
    ArcElement.defaultRoutes = {
      backgroundColor: 'backgroundColor'
    };

    function setStyle(ctx, options, style = options) {
      ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
      ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
      ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
      ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
      ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
      ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
    }
    function lineTo(ctx, previous, target) {
      ctx.lineTo(target.x, target.y);
    }
    function getLineMethod(options) {
      if (options.stepped) {
        return _steppedLineTo;
      }
      if (options.tension || options.cubicInterpolationMode === 'monotone') {
        return _bezierCurveTo;
      }
      return lineTo;
    }
    function pathVars(points, segment, params = {}) {
      const count = points.length;
      const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;
      const {start: segmentStart, end: segmentEnd} = segment;
      const start = Math.max(paramsStart, segmentStart);
      const end = Math.min(paramsEnd, segmentEnd);
      const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
      return {
        count,
        start,
        loop: segment.loop,
        ilen: end < start && !outside ? count + end - start : end - start
      };
    }
    function pathSegment(ctx, line, segment, params) {
      const {points, options} = line;
      const {count, start, loop, ilen} = pathVars(points, segment, params);
      const lineMethod = getLineMethod(options);
      let {move = true, reverse} = params || {};
      let i, point, prev;
      for (i = 0; i <= ilen; ++i) {
        point = points[(start + (reverse ? ilen - i : i)) % count];
        if (point.skip) {
          continue;
        } else if (move) {
          ctx.moveTo(point.x, point.y);
          move = false;
        } else {
          lineMethod(ctx, prev, point, reverse, options.stepped);
        }
        prev = point;
      }
      if (loop) {
        point = points[(start + (reverse ? ilen : 0)) % count];
        lineMethod(ctx, prev, point, reverse, options.stepped);
      }
      return !!loop;
    }
    function fastPathSegment(ctx, line, segment, params) {
      const points = line.points;
      const {count, start, ilen} = pathVars(points, segment, params);
      const {move = true, reverse} = params || {};
      let avgX = 0;
      let countX = 0;
      let i, point, prevX, minY, maxY, lastY;
      const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;
      const drawX = () => {
        if (minY !== maxY) {
          ctx.lineTo(avgX, maxY);
          ctx.lineTo(avgX, minY);
          ctx.lineTo(avgX, lastY);
        }
      };
      if (move) {
        point = points[pointIndex(0)];
        ctx.moveTo(point.x, point.y);
      }
      for (i = 0; i <= ilen; ++i) {
        point = points[pointIndex(i)];
        if (point.skip) {
          continue;
        }
        const x = point.x;
        const y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
          if (y < minY) {
            minY = y;
          } else if (y > maxY) {
            maxY = y;
          }
          avgX = (countX * avgX + x) / ++countX;
        } else {
          drawX();
          ctx.lineTo(x, y);
          prevX = truncX;
          countX = 0;
          minY = maxY = y;
        }
        lastY = y;
      }
      drawX();
    }
    function _getSegmentMethod(line) {
      const opts = line.options;
      const borderDash = opts.borderDash && opts.borderDash.length;
      const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;
      return useFastPath ? fastPathSegment : pathSegment;
    }
    function _getInterpolationMethod(options) {
      if (options.stepped) {
        return _steppedInterpolation;
      }
      if (options.tension || options.cubicInterpolationMode === 'monotone') {
        return _bezierInterpolation;
      }
      return _pointInLine;
    }
    function strokePathWithCache(ctx, line, start, count) {
      let path = line._path;
      if (!path) {
        path = line._path = new Path2D();
        if (line.path(path, start, count)) {
          path.closePath();
        }
      }
      setStyle(ctx, line.options);
      ctx.stroke(path);
    }
    function strokePathDirect(ctx, line, start, count) {
      const {segments, options} = line;
      const segmentMethod = _getSegmentMethod(line);
      for (const segment of segments) {
        setStyle(ctx, options, segment.style);
        ctx.beginPath();
        if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {
          ctx.closePath();
        }
        ctx.stroke();
      }
    }
    const usePath2D = typeof Path2D === 'function';
    function draw(ctx, line, start, count) {
      if (usePath2D && !line.options.segment) {
        strokePathWithCache(ctx, line, start, count);
      } else {
        strokePathDirect(ctx, line, start, count);
      }
    }
    class LineElement extends Element {
      constructor(cfg) {
        super();
        this.animated = true;
        this.options = undefined;
        this._chart = undefined;
        this._loop = undefined;
        this._fullLoop = undefined;
        this._path = undefined;
        this._points = undefined;
        this._segments = undefined;
        this._decimated = false;
        this._pointsUpdated = false;
        this._datasetIndex = undefined;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      updateControlPoints(chartArea, indexAxis) {
        const options = this.options;
        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {
          const loop = options.spanGaps ? this._loop : this._fullLoop;
          _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);
          this._pointsUpdated = true;
        }
      }
      set points(points) {
        this._points = points;
        delete this._segments;
        delete this._path;
        this._pointsUpdated = false;
      }
      get points() {
        return this._points;
      }
      get segments() {
        return this._segments || (this._segments = _computeSegments(this, this.options.segment));
      }
      first() {
        const segments = this.segments;
        const points = this.points;
        return segments.length && points[segments[0].start];
      }
      last() {
        const segments = this.segments;
        const points = this.points;
        const count = segments.length;
        return count && points[segments[count - 1].end];
      }
      interpolate(point, property) {
        const options = this.options;
        const value = point[property];
        const points = this.points;
        const segments = _boundSegments(this, {property, start: value, end: value});
        if (!segments.length) {
          return;
        }
        const result = [];
        const _interpolate = _getInterpolationMethod(options);
        let i, ilen;
        for (i = 0, ilen = segments.length; i < ilen; ++i) {
          const {start, end} = segments[i];
          const p1 = points[start];
          const p2 = points[end];
          if (p1 === p2) {
            result.push(p1);
            continue;
          }
          const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
          const interpolated = _interpolate(p1, p2, t, options.stepped);
          interpolated[property] = point[property];
          result.push(interpolated);
        }
        return result.length === 1 ? result[0] : result;
      }
      pathSegment(ctx, segment, params) {
        const segmentMethod = _getSegmentMethod(this);
        return segmentMethod(ctx, this, segment, params);
      }
      path(ctx, start, count) {
        const segments = this.segments;
        const segmentMethod = _getSegmentMethod(this);
        let loop = this._loop;
        start = start || 0;
        count = count || (this.points.length - start);
        for (const segment of segments) {
          loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});
        }
        return !!loop;
      }
      draw(ctx, chartArea, start, count) {
        const options = this.options || {};
        const points = this.points || [];
        if (points.length && options.borderWidth) {
          ctx.save();
          draw(ctx, this, start, count);
          ctx.restore();
        }
        if (this.animated) {
          this._pointsUpdated = false;
          this._path = undefined;
        }
      }
    }
    LineElement.id = 'line';
    LineElement.defaults = {
      borderCapStyle: 'butt',
      borderDash: [],
      borderDashOffset: 0,
      borderJoinStyle: 'miter',
      borderWidth: 3,
      capBezierPoints: true,
      cubicInterpolationMode: 'default',
      fill: false,
      spanGaps: false,
      stepped: false,
      tension: 0,
    };
    LineElement.defaultRoutes = {
      backgroundColor: 'backgroundColor',
      borderColor: 'borderColor'
    };
    LineElement.descriptors = {
      _scriptable: true,
      _indexable: (name) => name !== 'borderDash' && name !== 'fill',
    };

    function inRange$1(el, pos, axis, useFinalPosition) {
      const options = el.options;
      const {[axis]: value} = el.getProps([axis], useFinalPosition);
      return (Math.abs(pos - value) < options.radius + options.hitRadius);
    }
    class PointElement extends Element {
      constructor(cfg) {
        super();
        this.options = undefined;
        this.parsed = undefined;
        this.skip = undefined;
        this.stop = undefined;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      inRange(mouseX, mouseY, useFinalPosition) {
        const options = this.options;
        const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
        return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));
      }
      inXRange(mouseX, useFinalPosition) {
        return inRange$1(this, mouseX, 'x', useFinalPosition);
      }
      inYRange(mouseY, useFinalPosition) {
        return inRange$1(this, mouseY, 'y', useFinalPosition);
      }
      getCenterPoint(useFinalPosition) {
        const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
        return {x, y};
      }
      size(options) {
        options = options || this.options || {};
        let radius = options.radius || 0;
        radius = Math.max(radius, radius && options.hoverRadius || 0);
        const borderWidth = radius && options.borderWidth || 0;
        return (radius + borderWidth) * 2;
      }
      draw(ctx, area) {
        const options = this.options;
        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
          return;
        }
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.fillStyle = options.backgroundColor;
        drawPoint(ctx, options, this.x, this.y);
      }
      getRange() {
        const options = this.options || {};
        return options.radius + options.hitRadius;
      }
    }
    PointElement.id = 'point';
    PointElement.defaults = {
      borderWidth: 1,
      hitRadius: 1,
      hoverBorderWidth: 1,
      hoverRadius: 4,
      pointStyle: 'circle',
      radius: 3,
      rotation: 0
    };
    PointElement.defaultRoutes = {
      backgroundColor: 'backgroundColor',
      borderColor: 'borderColor'
    };

    function getBarBounds(bar, useFinalPosition) {
      const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);
      let left, right, top, bottom, half;
      if (bar.horizontal) {
        half = height / 2;
        left = Math.min(x, base);
        right = Math.max(x, base);
        top = y - half;
        bottom = y + half;
      } else {
        half = width / 2;
        left = x - half;
        right = x + half;
        top = Math.min(y, base);
        bottom = Math.max(y, base);
      }
      return {left, top, right, bottom};
    }
    function skipOrLimit(skip, value, min, max) {
      return skip ? 0 : _limitValue(value, min, max);
    }
    function parseBorderWidth(bar, maxW, maxH) {
      const value = bar.options.borderWidth;
      const skip = bar.borderSkipped;
      const o = toTRBL(value);
      return {
        t: skipOrLimit(skip.top, o.top, 0, maxH),
        r: skipOrLimit(skip.right, o.right, 0, maxW),
        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
        l: skipOrLimit(skip.left, o.left, 0, maxW)
      };
    }
    function parseBorderRadius(bar, maxW, maxH) {
      const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);
      const value = bar.options.borderRadius;
      const o = toTRBLCorners(value);
      const maxR = Math.min(maxW, maxH);
      const skip = bar.borderSkipped;
      const enableBorder = enableBorderRadius || isObject(value);
      return {
        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
      };
    }
    function boundingRects(bar) {
      const bounds = getBarBounds(bar);
      const width = bounds.right - bounds.left;
      const height = bounds.bottom - bounds.top;
      const border = parseBorderWidth(bar, width / 2, height / 2);
      const radius = parseBorderRadius(bar, width / 2, height / 2);
      return {
        outer: {
          x: bounds.left,
          y: bounds.top,
          w: width,
          h: height,
          radius
        },
        inner: {
          x: bounds.left + border.l,
          y: bounds.top + border.t,
          w: width - border.l - border.r,
          h: height - border.t - border.b,
          radius: {
            topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
            topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
            bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
            bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),
          }
        }
      };
    }
    function inRange(bar, x, y, useFinalPosition) {
      const skipX = x === null;
      const skipY = y === null;
      const skipBoth = skipX && skipY;
      const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
      return bounds
    		&& (skipX || _isBetween(x, bounds.left, bounds.right))
    		&& (skipY || _isBetween(y, bounds.top, bounds.bottom));
    }
    function hasRadius(radius) {
      return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
    }
    function addNormalRectPath(ctx, rect) {
      ctx.rect(rect.x, rect.y, rect.w, rect.h);
    }
    function inflateRect(rect, amount, refRect = {}) {
      const x = rect.x !== refRect.x ? -amount : 0;
      const y = rect.y !== refRect.y ? -amount : 0;
      const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
      const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
      return {
        x: rect.x + x,
        y: rect.y + y,
        w: rect.w + w,
        h: rect.h + h,
        radius: rect.radius
      };
    }
    class BarElement extends Element {
      constructor(cfg) {
        super();
        this.options = undefined;
        this.horizontal = undefined;
        this.base = undefined;
        this.width = undefined;
        this.height = undefined;
        this.inflateAmount = undefined;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      draw(ctx) {
        const {inflateAmount, options: {borderColor, backgroundColor}} = this;
        const {inner, outer} = boundingRects(this);
        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
        ctx.save();
        if (outer.w !== inner.w || outer.h !== inner.h) {
          ctx.beginPath();
          addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
          ctx.clip();
          addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
          ctx.fillStyle = borderColor;
          ctx.fill('evenodd');
        }
        ctx.beginPath();
        addRectPath(ctx, inflateRect(inner, inflateAmount));
        ctx.fillStyle = backgroundColor;
        ctx.fill();
        ctx.restore();
      }
      inRange(mouseX, mouseY, useFinalPosition) {
        return inRange(this, mouseX, mouseY, useFinalPosition);
      }
      inXRange(mouseX, useFinalPosition) {
        return inRange(this, mouseX, null, useFinalPosition);
      }
      inYRange(mouseY, useFinalPosition) {
        return inRange(this, null, mouseY, useFinalPosition);
      }
      getCenterPoint(useFinalPosition) {
        const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);
        return {
          x: horizontal ? (x + base) / 2 : x,
          y: horizontal ? y : (y + base) / 2
        };
      }
      getRange(axis) {
        return axis === 'x' ? this.width / 2 : this.height / 2;
      }
    }
    BarElement.id = 'bar';
    BarElement.defaults = {
      borderSkipped: 'start',
      borderWidth: 0,
      borderRadius: 0,
      inflateAmount: 'auto',
      pointStyle: undefined
    };
    BarElement.defaultRoutes = {
      backgroundColor: 'backgroundColor',
      borderColor: 'borderColor'
    };

    var elements = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ArcElement: ArcElement,
    LineElement: LineElement,
    PointElement: PointElement,
    BarElement: BarElement
    });

    function lttbDecimation(data, start, count, availableWidth, options) {
      const samples = options.samples || availableWidth;
      if (samples >= count) {
        return data.slice(start, start + count);
      }
      const decimated = [];
      const bucketWidth = (count - 2) / (samples - 2);
      let sampledIndex = 0;
      const endIndex = start + count - 1;
      let a = start;
      let i, maxAreaPoint, maxArea, area, nextA;
      decimated[sampledIndex++] = data[a];
      for (i = 0; i < samples - 2; i++) {
        let avgX = 0;
        let avgY = 0;
        let j;
        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
        const avgRangeLength = avgRangeEnd - avgRangeStart;
        for (j = avgRangeStart; j < avgRangeEnd; j++) {
          avgX += data[j].x;
          avgY += data[j].y;
        }
        avgX /= avgRangeLength;
        avgY /= avgRangeLength;
        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
        const {x: pointAx, y: pointAy} = data[a];
        maxArea = area = -1;
        for (j = rangeOffs; j < rangeTo; j++) {
          area = 0.5 * Math.abs(
            (pointAx - avgX) * (data[j].y - pointAy) -
            (pointAx - data[j].x) * (avgY - pointAy)
          );
          if (area > maxArea) {
            maxArea = area;
            maxAreaPoint = data[j];
            nextA = j;
          }
        }
        decimated[sampledIndex++] = maxAreaPoint;
        a = nextA;
      }
      decimated[sampledIndex++] = data[endIndex];
      return decimated;
    }
    function minMaxDecimation(data, start, count, availableWidth) {
      let avgX = 0;
      let countX = 0;
      let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
      const decimated = [];
      const endIndex = start + count - 1;
      const xMin = data[start].x;
      const xMax = data[endIndex].x;
      const dx = xMax - xMin;
      for (i = start; i < start + count; ++i) {
        point = data[i];
        x = (point.x - xMin) / dx * availableWidth;
        y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
          if (y < minY) {
            minY = y;
            minIndex = i;
          } else if (y > maxY) {
            maxY = y;
            maxIndex = i;
          }
          avgX = (countX * avgX + point.x) / ++countX;
        } else {
          const lastIndex = i - 1;
          if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {
            const intermediateIndex1 = Math.min(minIndex, maxIndex);
            const intermediateIndex2 = Math.max(minIndex, maxIndex);
            if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
              decimated.push({
                ...data[intermediateIndex1],
                x: avgX,
              });
            }
            if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
              decimated.push({
                ...data[intermediateIndex2],
                x: avgX
              });
            }
          }
          if (i > 0 && lastIndex !== startIndex) {
            decimated.push(data[lastIndex]);
          }
          decimated.push(point);
          prevX = truncX;
          countX = 0;
          minY = maxY = y;
          minIndex = maxIndex = startIndex = i;
        }
      }
      return decimated;
    }
    function cleanDecimatedDataset(dataset) {
      if (dataset._decimated) {
        const data = dataset._data;
        delete dataset._decimated;
        delete dataset._data;
        Object.defineProperty(dataset, 'data', {value: data});
      }
    }
    function cleanDecimatedData(chart) {
      chart.data.datasets.forEach((dataset) => {
        cleanDecimatedDataset(dataset);
      });
    }
    function getStartAndCountOfVisiblePointsSimplified(meta, points) {
      const pointCount = points.length;
      let start = 0;
      let count;
      const {iScale} = meta;
      const {min, max, minDefined, maxDefined} = iScale.getUserBounds();
      if (minDefined) {
        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);
      }
      if (maxDefined) {
        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;
      } else {
        count = pointCount - start;
      }
      return {start, count};
    }
    var plugin_decimation = {
      id: 'decimation',
      defaults: {
        algorithm: 'min-max',
        enabled: false,
      },
      beforeElementsUpdate: (chart, args, options) => {
        if (!options.enabled) {
          cleanDecimatedData(chart);
          return;
        }
        const availableWidth = chart.width;
        chart.data.datasets.forEach((dataset, datasetIndex) => {
          const {_data, indexAxis} = dataset;
          const meta = chart.getDatasetMeta(datasetIndex);
          const data = _data || dataset.data;
          if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {
            return;
          }
          if (meta.type !== 'line') {
            return;
          }
          const xAxis = chart.scales[meta.xAxisID];
          if (xAxis.type !== 'linear' && xAxis.type !== 'time') {
            return;
          }
          if (chart.options.parsing) {
            return;
          }
          let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);
          const threshold = options.threshold || 4 * availableWidth;
          if (count <= threshold) {
            cleanDecimatedDataset(dataset);
            return;
          }
          if (isNullOrUndef(_data)) {
            dataset._data = data;
            delete dataset.data;
            Object.defineProperty(dataset, 'data', {
              configurable: true,
              enumerable: true,
              get: function() {
                return this._decimated;
              },
              set: function(d) {
                this._data = d;
              }
            });
          }
          let decimated;
          switch (options.algorithm) {
          case 'lttb':
            decimated = lttbDecimation(data, start, count, availableWidth, options);
            break;
          case 'min-max':
            decimated = minMaxDecimation(data, start, count, availableWidth);
            break;
          default:
            throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
          }
          dataset._decimated = decimated;
        });
      },
      destroy(chart) {
        cleanDecimatedData(chart);
      }
    };

    function getLineByIndex(chart, index) {
      const meta = chart.getDatasetMeta(index);
      const visible = meta && chart.isDatasetVisible(index);
      return visible ? meta.dataset : null;
    }
    function parseFillOption(line) {
      const options = line.options;
      const fillOption = options.fill;
      let fill = valueOrDefault(fillOption && fillOption.target, fillOption);
      if (fill === undefined) {
        fill = !!options.backgroundColor;
      }
      if (fill === false || fill === null) {
        return false;
      }
      if (fill === true) {
        return 'origin';
      }
      return fill;
    }
    function decodeFill(line, index, count) {
      const fill = parseFillOption(line);
      if (isObject(fill)) {
        return isNaN(fill.value) ? false : fill;
      }
      let target = parseFloat(fill);
      if (isNumberFinite(target) && Math.floor(target) === target) {
        if (fill[0] === '-' || fill[0] === '+') {
          target = index + target;
        }
        if (target === index || target < 0 || target >= count) {
          return false;
        }
        return target;
      }
      return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;
    }
    function computeLinearBoundary(source) {
      const {scale = {}, fill} = source;
      let target = null;
      let horizontal;
      if (fill === 'start') {
        target = scale.bottom;
      } else if (fill === 'end') {
        target = scale.top;
      } else if (isObject(fill)) {
        target = scale.getPixelForValue(fill.value);
      } else if (scale.getBasePixel) {
        target = scale.getBasePixel();
      }
      if (isNumberFinite(target)) {
        horizontal = scale.isHorizontal();
        return {
          x: horizontal ? target : null,
          y: horizontal ? null : target
        };
      }
      return null;
    }
    class simpleArc {
      constructor(opts) {
        this.x = opts.x;
        this.y = opts.y;
        this.radius = opts.radius;
      }
      pathSegment(ctx, bounds, opts) {
        const {x, y, radius} = this;
        bounds = bounds || {start: 0, end: TAU};
        ctx.arc(x, y, radius, bounds.end, bounds.start, true);
        return !opts.bounds;
      }
      interpolate(point) {
        const {x, y, radius} = this;
        const angle = point.angle;
        return {
          x: x + Math.cos(angle) * radius,
          y: y + Math.sin(angle) * radius,
          angle
        };
      }
    }
    function computeCircularBoundary(source) {
      const {scale, fill} = source;
      const options = scale.options;
      const length = scale.getLabels().length;
      const target = [];
      const start = options.reverse ? scale.max : scale.min;
      const end = options.reverse ? scale.min : scale.max;
      let i, center, value;
      if (fill === 'start') {
        value = start;
      } else if (fill === 'end') {
        value = end;
      } else if (isObject(fill)) {
        value = fill.value;
      } else {
        value = scale.getBaseValue();
      }
      if (options.grid.circular) {
        center = scale.getPointPositionForValue(0, start);
        return new simpleArc({
          x: center.x,
          y: center.y,
          radius: scale.getDistanceFromCenterForValue(value)
        });
      }
      for (i = 0; i < length; ++i) {
        target.push(scale.getPointPositionForValue(i, value));
      }
      return target;
    }
    function computeBoundary(source) {
      const scale = source.scale || {};
      if (scale.getPointPositionForValue) {
        return computeCircularBoundary(source);
      }
      return computeLinearBoundary(source);
    }
    function findSegmentEnd(start, end, points) {
      for (;end > start; end--) {
        const point = points[end];
        if (!isNaN(point.x) && !isNaN(point.y)) {
          break;
        }
      }
      return end;
    }
    function pointsFromSegments(boundary, line) {
      const {x = null, y = null} = boundary || {};
      const linePoints = line.points;
      const points = [];
      line.segments.forEach(({start, end}) => {
        end = findSegmentEnd(start, end, linePoints);
        const first = linePoints[start];
        const last = linePoints[end];
        if (y !== null) {
          points.push({x: first.x, y});
          points.push({x: last.x, y});
        } else if (x !== null) {
          points.push({x, y: first.y});
          points.push({x, y: last.y});
        }
      });
      return points;
    }
    function buildStackLine(source) {
      const {scale, index, line} = source;
      const points = [];
      const segments = line.segments;
      const sourcePoints = line.points;
      const linesBelow = getLinesBelow(scale, index);
      linesBelow.push(createBoundaryLine({x: null, y: scale.bottom}, line));
      for (let i = 0; i < segments.length; i++) {
        const segment = segments[i];
        for (let j = segment.start; j <= segment.end; j++) {
          addPointsBelow(points, sourcePoints[j], linesBelow);
        }
      }
      return new LineElement({points, options: {}});
    }
    function getLinesBelow(scale, index) {
      const below = [];
      const metas = scale.getMatchingVisibleMetas('line');
      for (let i = 0; i < metas.length; i++) {
        const meta = metas[i];
        if (meta.index === index) {
          break;
        }
        if (!meta.hidden) {
          below.unshift(meta.dataset);
        }
      }
      return below;
    }
    function addPointsBelow(points, sourcePoint, linesBelow) {
      const postponed = [];
      for (let j = 0; j < linesBelow.length; j++) {
        const line = linesBelow[j];
        const {first, last, point} = findPoint(line, sourcePoint, 'x');
        if (!point || (first && last)) {
          continue;
        }
        if (first) {
          postponed.unshift(point);
        } else {
          points.push(point);
          if (!last) {
            break;
          }
        }
      }
      points.push(...postponed);
    }
    function findPoint(line, sourcePoint, property) {
      const point = line.interpolate(sourcePoint, property);
      if (!point) {
        return {};
      }
      const pointValue = point[property];
      const segments = line.segments;
      const linePoints = line.points;
      let first = false;
      let last = false;
      for (let i = 0; i < segments.length; i++) {
        const segment = segments[i];
        const firstValue = linePoints[segment.start][property];
        const lastValue = linePoints[segment.end][property];
        if (_isBetween(pointValue, firstValue, lastValue)) {
          first = pointValue === firstValue;
          last = pointValue === lastValue;
          break;
        }
      }
      return {first, last, point};
    }
    function getTarget(source) {
      const {chart, fill, line} = source;
      if (isNumberFinite(fill)) {
        return getLineByIndex(chart, fill);
      }
      if (fill === 'stack') {
        return buildStackLine(source);
      }
      if (fill === 'shape') {
        return true;
      }
      const boundary = computeBoundary(source);
      if (boundary instanceof simpleArc) {
        return boundary;
      }
      return createBoundaryLine(boundary, line);
    }
    function createBoundaryLine(boundary, line) {
      let points = [];
      let _loop = false;
      if (isArray(boundary)) {
        _loop = true;
        points = boundary;
      } else {
        points = pointsFromSegments(boundary, line);
      }
      return points.length ? new LineElement({
        points,
        options: {tension: 0},
        _loop,
        _fullLoop: _loop
      }) : null;
    }
    function resolveTarget(sources, index, propagate) {
      const source = sources[index];
      let fill = source.fill;
      const visited = [index];
      let target;
      if (!propagate) {
        return fill;
      }
      while (fill !== false && visited.indexOf(fill) === -1) {
        if (!isNumberFinite(fill)) {
          return fill;
        }
        target = sources[fill];
        if (!target) {
          return false;
        }
        if (target.visible) {
          return fill;
        }
        visited.push(fill);
        fill = target.fill;
      }
      return false;
    }
    function _clip(ctx, target, clipY) {
      ctx.beginPath();
      target.path(ctx);
      ctx.lineTo(target.last().x, clipY);
      ctx.lineTo(target.first().x, clipY);
      ctx.closePath();
      ctx.clip();
    }
    function getBounds(property, first, last, loop) {
      if (loop) {
        return;
      }
      let start = first[property];
      let end = last[property];
      if (property === 'angle') {
        start = _normalizeAngle(start);
        end = _normalizeAngle(end);
      }
      return {property, start, end};
    }
    function _getEdge(a, b, prop, fn) {
      if (a && b) {
        return fn(a[prop], b[prop]);
      }
      return a ? a[prop] : b ? b[prop] : 0;
    }
    function _segments(line, target, property) {
      const segments = line.segments;
      const points = line.points;
      const tpoints = target.points;
      const parts = [];
      for (const segment of segments) {
        let {start, end} = segment;
        end = findSegmentEnd(start, end, points);
        const bounds = getBounds(property, points[start], points[end], segment.loop);
        if (!target.segments) {
          parts.push({
            source: segment,
            target: bounds,
            start: points[start],
            end: points[end]
          });
          continue;
        }
        const targetSegments = _boundSegments(target, bounds);
        for (const tgt of targetSegments) {
          const subBounds = getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
          const fillSources = _boundSegment(segment, points, subBounds);
          for (const fillSource of fillSources) {
            parts.push({
              source: fillSource,
              target: tgt,
              start: {
                [property]: _getEdge(bounds, subBounds, 'start', Math.max)
              },
              end: {
                [property]: _getEdge(bounds, subBounds, 'end', Math.min)
              }
            });
          }
        }
      }
      return parts;
    }
    function clipBounds(ctx, scale, bounds) {
      const {top, bottom} = scale.chart.chartArea;
      const {property, start, end} = bounds || {};
      if (property === 'x') {
        ctx.beginPath();
        ctx.rect(start, top, end - start, bottom - top);
        ctx.clip();
      }
    }
    function interpolatedLineTo(ctx, target, point, property) {
      const interpolatedPoint = target.interpolate(point, property);
      if (interpolatedPoint) {
        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
      }
    }
    function _fill(ctx, cfg) {
      const {line, target, property, color, scale} = cfg;
      const segments = _segments(line, target, property);
      for (const {source: src, target: tgt, start, end} of segments) {
        const {style: {backgroundColor = color} = {}} = src;
        const notShape = target !== true;
        ctx.save();
        ctx.fillStyle = backgroundColor;
        clipBounds(ctx, scale, notShape && getBounds(property, start, end));
        ctx.beginPath();
        const lineLoop = !!line.pathSegment(ctx, src);
        let loop;
        if (notShape) {
          if (lineLoop) {
            ctx.closePath();
          } else {
            interpolatedLineTo(ctx, target, end, property);
          }
          const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});
          loop = lineLoop && targetLoop;
          if (!loop) {
            interpolatedLineTo(ctx, target, start, property);
          }
        }
        ctx.closePath();
        ctx.fill(loop ? 'evenodd' : 'nonzero');
        ctx.restore();
      }
    }
    function doFill(ctx, cfg) {
      const {line, target, above, below, area, scale} = cfg;
      const property = line._loop ? 'angle' : cfg.axis;
      ctx.save();
      if (property === 'x' && below !== above) {
        _clip(ctx, target, area.top);
        _fill(ctx, {line, target, color: above, scale, property});
        ctx.restore();
        ctx.save();
        _clip(ctx, target, area.bottom);
      }
      _fill(ctx, {line, target, color: below, scale, property});
      ctx.restore();
    }
    function drawfill(ctx, source, area) {
      const target = getTarget(source);
      const {line, scale, axis} = source;
      const lineOpts = line.options;
      const fillOption = lineOpts.fill;
      const color = lineOpts.backgroundColor;
      const {above = color, below = color} = fillOption || {};
      if (target && line.points.length) {
        clipArea(ctx, area);
        doFill(ctx, {line, target, above, below, area, scale, axis});
        unclipArea(ctx);
      }
    }
    var plugin_filler = {
      id: 'filler',
      afterDatasetsUpdate(chart, _args, options) {
        const count = (chart.data.datasets || []).length;
        const sources = [];
        let meta, i, line, source;
        for (i = 0; i < count; ++i) {
          meta = chart.getDatasetMeta(i);
          line = meta.dataset;
          source = null;
          if (line && line.options && line instanceof LineElement) {
            source = {
              visible: chart.isDatasetVisible(i),
              index: i,
              fill: decodeFill(line, i, count),
              chart,
              axis: meta.controller.options.indexAxis,
              scale: meta.vScale,
              line,
            };
          }
          meta.$filler = source;
          sources.push(source);
        }
        for (i = 0; i < count; ++i) {
          source = sources[i];
          if (!source || source.fill === false) {
            continue;
          }
          source.fill = resolveTarget(sources, i, options.propagate);
        }
      },
      beforeDraw(chart, _args, options) {
        const draw = options.drawTime === 'beforeDraw';
        const metasets = chart.getSortedVisibleDatasetMetas();
        const area = chart.chartArea;
        for (let i = metasets.length - 1; i >= 0; --i) {
          const source = metasets[i].$filler;
          if (!source) {
            continue;
          }
          source.line.updateControlPoints(area, source.axis);
          if (draw) {
            drawfill(chart.ctx, source, area);
          }
        }
      },
      beforeDatasetsDraw(chart, _args, options) {
        if (options.drawTime !== 'beforeDatasetsDraw') {
          return;
        }
        const metasets = chart.getSortedVisibleDatasetMetas();
        for (let i = metasets.length - 1; i >= 0; --i) {
          const source = metasets[i].$filler;
          if (source) {
            drawfill(chart.ctx, source, chart.chartArea);
          }
        }
      },
      beforeDatasetDraw(chart, args, options) {
        const source = args.meta.$filler;
        if (!source || source.fill === false || options.drawTime !== 'beforeDatasetDraw') {
          return;
        }
        drawfill(chart.ctx, source, chart.chartArea);
      },
      defaults: {
        propagate: true,
        drawTime: 'beforeDatasetDraw'
      }
    };

    const getBoxSize = (labelOpts, fontSize) => {
      let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;
      if (labelOpts.usePointStyle) {
        boxHeight = Math.min(boxHeight, fontSize);
        boxWidth = Math.min(boxWidth, fontSize);
      }
      return {
        boxWidth,
        boxHeight,
        itemHeight: Math.max(fontSize, boxHeight)
      };
    };
    const itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
    class Legend extends Element {
      constructor(config) {
        super();
        this._added = false;
        this.legendHitBoxes = [];
        this._hoveredItem = null;
        this.doughnutMode = false;
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this.legendItems = undefined;
        this.columnSizes = undefined;
        this.lineWidths = undefined;
        this.maxHeight = undefined;
        this.maxWidth = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.height = undefined;
        this.width = undefined;
        this._margins = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
      }
      update(maxWidth, maxHeight, margins) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins;
        this.setDimensions();
        this.buildLabels();
        this.fit();
      }
      setDimensions() {
        if (this.isHorizontal()) {
          this.width = this.maxWidth;
          this.left = this._margins.left;
          this.right = this.width;
        } else {
          this.height = this.maxHeight;
          this.top = this._margins.top;
          this.bottom = this.height;
        }
      }
      buildLabels() {
        const labelOpts = this.options.labels || {};
        let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];
        if (labelOpts.filter) {
          legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));
        }
        if (labelOpts.sort) {
          legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));
        }
        if (this.options.reverse) {
          legendItems.reverse();
        }
        this.legendItems = legendItems;
      }
      fit() {
        const {options, ctx} = this;
        if (!options.display) {
          this.width = this.height = 0;
          return;
        }
        const labelOpts = options.labels;
        const labelFont = toFont(labelOpts.font);
        const fontSize = labelFont.size;
        const titleHeight = this._computeTitleHeight();
        const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);
        let width, height;
        ctx.font = labelFont.string;
        if (this.isHorizontal()) {
          width = this.maxWidth;
          height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        } else {
          height = this.maxHeight;
          width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        }
        this.width = Math.min(width, options.maxWidth || this.maxWidth);
        this.height = Math.min(height, options.maxHeight || this.maxHeight);
      }
      _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
        const {ctx, maxWidth, options: {labels: {padding}}} = this;
        const hitboxes = this.legendHitBoxes = [];
        const lineWidths = this.lineWidths = [0];
        const lineHeight = itemHeight + padding;
        let totalHeight = titleHeight;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        let row = -1;
        let top = -lineHeight;
        this.legendItems.forEach((legendItem, i) => {
          const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
          if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
            totalHeight += lineHeight;
            lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
            top += lineHeight;
            row++;
          }
          hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};
          lineWidths[lineWidths.length - 1] += itemWidth + padding;
        });
        return totalHeight;
      }
      _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {
        const {ctx, maxHeight, options: {labels: {padding}}} = this;
        const hitboxes = this.legendHitBoxes = [];
        const columnSizes = this.columnSizes = [];
        const heightLimit = maxHeight - titleHeight;
        let totalWidth = padding;
        let currentColWidth = 0;
        let currentColHeight = 0;
        let left = 0;
        let col = 0;
        this.legendItems.forEach((legendItem, i) => {
          const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
          if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
            totalWidth += currentColWidth + padding;
            columnSizes.push({width: currentColWidth, height: currentColHeight});
            left += currentColWidth + padding;
            col++;
            currentColWidth = currentColHeight = 0;
          }
          hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};
          currentColWidth = Math.max(currentColWidth, itemWidth);
          currentColHeight += itemHeight + padding;
        });
        totalWidth += currentColWidth;
        columnSizes.push({width: currentColWidth, height: currentColHeight});
        return totalWidth;
      }
      adjustHitBoxes() {
        if (!this.options.display) {
          return;
        }
        const titleHeight = this._computeTitleHeight();
        const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;
        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
        if (this.isHorizontal()) {
          let row = 0;
          let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
          for (const hitbox of hitboxes) {
            if (row !== hitbox.row) {
              row = hitbox.row;
              left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
            }
            hitbox.top += this.top + titleHeight + padding;
            hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
            left += hitbox.width + padding;
          }
        } else {
          let col = 0;
          let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
          for (const hitbox of hitboxes) {
            if (hitbox.col !== col) {
              col = hitbox.col;
              top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
            }
            hitbox.top = top;
            hitbox.left += this.left + padding;
            hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
            top += hitbox.height + padding;
          }
        }
      }
      isHorizontal() {
        return this.options.position === 'top' || this.options.position === 'bottom';
      }
      draw() {
        if (this.options.display) {
          const ctx = this.ctx;
          clipArea(ctx, this);
          this._draw();
          unclipArea(ctx);
        }
      }
      _draw() {
        const {options: opts, columnSizes, lineWidths, ctx} = this;
        const {align, labels: labelOpts} = opts;
        const defaultColor = defaults.color;
        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
        const labelFont = toFont(labelOpts.font);
        const {color: fontColor, padding} = labelOpts;
        const fontSize = labelFont.size;
        const halfFontSize = fontSize / 2;
        let cursor;
        this.drawTitle();
        ctx.textAlign = rtlHelper.textAlign('left');
        ctx.textBaseline = 'middle';
        ctx.lineWidth = 0.5;
        ctx.font = labelFont.string;
        const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);
        const drawLegendBox = function(x, y, legendItem) {
          if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
            return;
          }
          ctx.save();
          const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
          ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
          ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');
          ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
          ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');
          ctx.lineWidth = lineWidth;
          ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
          ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
          if (labelOpts.usePointStyle) {
            const drawOptions = {
              radius: boxWidth * Math.SQRT2 / 2,
              pointStyle: legendItem.pointStyle,
              rotation: legendItem.rotation,
              borderWidth: lineWidth
            };
            const centerX = rtlHelper.xPlus(x, boxWidth / 2);
            const centerY = y + halfFontSize;
            drawPoint(ctx, drawOptions, centerX, centerY);
          } else {
            const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
            const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
            const borderRadius = toTRBLCorners(legendItem.borderRadius);
            ctx.beginPath();
            if (Object.values(borderRadius).some(v => v !== 0)) {
              addRoundedRectPath(ctx, {
                x: xBoxLeft,
                y: yBoxTop,
                w: boxWidth,
                h: boxHeight,
                radius: borderRadius,
              });
            } else {
              ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
            }
            ctx.fill();
            if (lineWidth !== 0) {
              ctx.stroke();
            }
          }
          ctx.restore();
        };
        const fillText = function(x, y, legendItem) {
          renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {
            strikethrough: legendItem.hidden,
            textAlign: rtlHelper.textAlign(legendItem.textAlign)
          });
        };
        const isHorizontal = this.isHorizontal();
        const titleHeight = this._computeTitleHeight();
        if (isHorizontal) {
          cursor = {
            x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
            y: this.top + padding + titleHeight,
            line: 0
          };
        } else {
          cursor = {
            x: this.left + padding,
            y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
            line: 0
          };
        }
        overrideTextDirection(this.ctx, opts.textDirection);
        const lineHeight = itemHeight + padding;
        this.legendItems.forEach((legendItem, i) => {
          ctx.strokeStyle = legendItem.fontColor || fontColor;
          ctx.fillStyle = legendItem.fontColor || fontColor;
          const textWidth = ctx.measureText(legendItem.text).width;
          const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
          const width = boxWidth + halfFontSize + textWidth;
          let x = cursor.x;
          let y = cursor.y;
          rtlHelper.setWidth(this.width);
          if (isHorizontal) {
            if (i > 0 && x + width + padding > this.right) {
              y = cursor.y += lineHeight;
              cursor.line++;
              x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
            }
          } else if (i > 0 && y + lineHeight > this.bottom) {
            x = cursor.x = x + columnSizes[cursor.line].width + padding;
            cursor.line++;
            y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
          }
          const realX = rtlHelper.x(x);
          drawLegendBox(realX, y, legendItem);
          x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
          fillText(rtlHelper.x(x), y, legendItem);
          if (isHorizontal) {
            cursor.x += width + padding;
          } else {
            cursor.y += lineHeight;
          }
        });
        restoreTextDirection(this.ctx, opts.textDirection);
      }
      drawTitle() {
        const opts = this.options;
        const titleOpts = opts.title;
        const titleFont = toFont(titleOpts.font);
        const titlePadding = toPadding(titleOpts.padding);
        if (!titleOpts.display) {
          return;
        }
        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
        const ctx = this.ctx;
        const position = titleOpts.position;
        const halfFontSize = titleFont.size / 2;
        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
        let y;
        let left = this.left;
        let maxWidth = this.width;
        if (this.isHorizontal()) {
          maxWidth = Math.max(...this.lineWidths);
          y = this.top + topPaddingPlusHalfFontSize;
          left = _alignStartEnd(opts.align, left, this.right - maxWidth);
        } else {
          const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
          y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
        }
        const x = _alignStartEnd(position, left, left + maxWidth);
        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
        ctx.textBaseline = 'middle';
        ctx.strokeStyle = titleOpts.color;
        ctx.fillStyle = titleOpts.color;
        ctx.font = titleFont.string;
        renderText(ctx, titleOpts.text, x, y, titleFont);
      }
      _computeTitleHeight() {
        const titleOpts = this.options.title;
        const titleFont = toFont(titleOpts.font);
        const titlePadding = toPadding(titleOpts.padding);
        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
      }
      _getLegendItemAt(x, y) {
        let i, hitBox, lh;
        if (_isBetween(x, this.left, this.right)
          && _isBetween(y, this.top, this.bottom)) {
          lh = this.legendHitBoxes;
          for (i = 0; i < lh.length; ++i) {
            hitBox = lh[i];
            if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)
              && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {
              return this.legendItems[i];
            }
          }
        }
        return null;
      }
      handleEvent(e) {
        const opts = this.options;
        if (!isListened(e.type, opts)) {
          return;
        }
        const hoveredItem = this._getLegendItemAt(e.x, e.y);
        if (e.type === 'mousemove') {
          const previous = this._hoveredItem;
          const sameItem = itemsEqual(previous, hoveredItem);
          if (previous && !sameItem) {
            callback(opts.onLeave, [e, previous, this], this);
          }
          this._hoveredItem = hoveredItem;
          if (hoveredItem && !sameItem) {
            callback(opts.onHover, [e, hoveredItem, this], this);
          }
        } else if (hoveredItem) {
          callback(opts.onClick, [e, hoveredItem, this], this);
        }
      }
    }
    function isListened(type, opts) {
      if (type === 'mousemove' && (opts.onHover || opts.onLeave)) {
        return true;
      }
      if (opts.onClick && (type === 'click' || type === 'mouseup')) {
        return true;
      }
      return false;
    }
    var plugin_legend = {
      id: 'legend',
      _element: Legend,
      start(chart, _args, options) {
        const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});
        layouts.configure(chart, legend, options);
        layouts.addBox(chart, legend);
      },
      stop(chart) {
        layouts.removeBox(chart, chart.legend);
        delete chart.legend;
      },
      beforeUpdate(chart, _args, options) {
        const legend = chart.legend;
        layouts.configure(chart, legend, options);
        legend.options = options;
      },
      afterUpdate(chart) {
        const legend = chart.legend;
        legend.buildLabels();
        legend.adjustHitBoxes();
      },
      afterEvent(chart, args) {
        if (!args.replay) {
          chart.legend.handleEvent(args.event);
        }
      },
      defaults: {
        display: true,
        position: 'top',
        align: 'center',
        fullSize: true,
        reverse: false,
        weight: 1000,
        onClick(e, legendItem, legend) {
          const index = legendItem.datasetIndex;
          const ci = legend.chart;
          if (ci.isDatasetVisible(index)) {
            ci.hide(index);
            legendItem.hidden = true;
          } else {
            ci.show(index);
            legendItem.hidden = false;
          }
        },
        onHover: null,
        onLeave: null,
        labels: {
          color: (ctx) => ctx.chart.options.color,
          boxWidth: 40,
          padding: 10,
          generateLabels(chart) {
            const datasets = chart.data.datasets;
            const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;
            return chart._getSortedDatasetMetas().map((meta) => {
              const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
              const borderWidth = toPadding(style.borderWidth);
              return {
                text: datasets[meta.index].label,
                fillStyle: style.backgroundColor,
                fontColor: color,
                hidden: !meta.visible,
                lineCap: style.borderCapStyle,
                lineDash: style.borderDash,
                lineDashOffset: style.borderDashOffset,
                lineJoin: style.borderJoinStyle,
                lineWidth: (borderWidth.width + borderWidth.height) / 4,
                strokeStyle: style.borderColor,
                pointStyle: pointStyle || style.pointStyle,
                rotation: style.rotation,
                textAlign: textAlign || style.textAlign,
                borderRadius: 0,
                datasetIndex: meta.index
              };
            }, this);
          }
        },
        title: {
          color: (ctx) => ctx.chart.options.color,
          display: false,
          position: 'center',
          text: '',
        }
      },
      descriptors: {
        _scriptable: (name) => !name.startsWith('on'),
        labels: {
          _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),
        }
      },
    };

    class Title extends Element {
      constructor(config) {
        super();
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this._padding = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
      }
      update(maxWidth, maxHeight) {
        const opts = this.options;
        this.left = 0;
        this.top = 0;
        if (!opts.display) {
          this.width = this.height = this.right = this.bottom = 0;
          return;
        }
        this.width = this.right = maxWidth;
        this.height = this.bottom = maxHeight;
        const lineCount = isArray(opts.text) ? opts.text.length : 1;
        this._padding = toPadding(opts.padding);
        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
        if (this.isHorizontal()) {
          this.height = textSize;
        } else {
          this.width = textSize;
        }
      }
      isHorizontal() {
        const pos = this.options.position;
        return pos === 'top' || pos === 'bottom';
      }
      _drawArgs(offset) {
        const {top, left, bottom, right, options} = this;
        const align = options.align;
        let rotation = 0;
        let maxWidth, titleX, titleY;
        if (this.isHorizontal()) {
          titleX = _alignStartEnd(align, left, right);
          titleY = top + offset;
          maxWidth = right - left;
        } else {
          if (options.position === 'left') {
            titleX = left + offset;
            titleY = _alignStartEnd(align, bottom, top);
            rotation = PI * -0.5;
          } else {
            titleX = right - offset;
            titleY = _alignStartEnd(align, top, bottom);
            rotation = PI * 0.5;
          }
          maxWidth = bottom - top;
        }
        return {titleX, titleY, maxWidth, rotation};
      }
      draw() {
        const ctx = this.ctx;
        const opts = this.options;
        if (!opts.display) {
          return;
        }
        const fontOpts = toFont(opts.font);
        const lineHeight = fontOpts.lineHeight;
        const offset = lineHeight / 2 + this._padding.top;
        const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);
        renderText(ctx, opts.text, 0, 0, fontOpts, {
          color: opts.color,
          maxWidth,
          rotation,
          textAlign: _toLeftRightCenter(opts.align),
          textBaseline: 'middle',
          translation: [titleX, titleY],
        });
      }
    }
    function createTitle(chart, titleOpts) {
      const title = new Title({
        ctx: chart.ctx,
        options: titleOpts,
        chart
      });
      layouts.configure(chart, title, titleOpts);
      layouts.addBox(chart, title);
      chart.titleBlock = title;
    }
    var plugin_title = {
      id: 'title',
      _element: Title,
      start(chart, _args, options) {
        createTitle(chart, options);
      },
      stop(chart) {
        const titleBlock = chart.titleBlock;
        layouts.removeBox(chart, titleBlock);
        delete chart.titleBlock;
      },
      beforeUpdate(chart, _args, options) {
        const title = chart.titleBlock;
        layouts.configure(chart, title, options);
        title.options = options;
      },
      defaults: {
        align: 'center',
        display: false,
        font: {
          weight: 'bold',
        },
        fullSize: true,
        padding: 10,
        position: 'top',
        text: '',
        weight: 2000
      },
      defaultRoutes: {
        color: 'color'
      },
      descriptors: {
        _scriptable: true,
        _indexable: false,
      },
    };

    const map$2 = new WeakMap();
    var plugin_subtitle = {
      id: 'subtitle',
      start(chart, _args, options) {
        const title = new Title({
          ctx: chart.ctx,
          options,
          chart
        });
        layouts.configure(chart, title, options);
        layouts.addBox(chart, title);
        map$2.set(chart, title);
      },
      stop(chart) {
        layouts.removeBox(chart, map$2.get(chart));
        map$2.delete(chart);
      },
      beforeUpdate(chart, _args, options) {
        const title = map$2.get(chart);
        layouts.configure(chart, title, options);
        title.options = options;
      },
      defaults: {
        align: 'center',
        display: false,
        font: {
          weight: 'normal',
        },
        fullSize: true,
        padding: 0,
        position: 'top',
        text: '',
        weight: 1500
      },
      defaultRoutes: {
        color: 'color'
      },
      descriptors: {
        _scriptable: true,
        _indexable: false,
      },
    };

    const positioners = {
      average(items) {
        if (!items.length) {
          return false;
        }
        let i, len;
        let x = 0;
        let y = 0;
        let count = 0;
        for (i = 0, len = items.length; i < len; ++i) {
          const el = items[i].element;
          if (el && el.hasValue()) {
            const pos = el.tooltipPosition();
            x += pos.x;
            y += pos.y;
            ++count;
          }
        }
        return {
          x: x / count,
          y: y / count
        };
      },
      nearest(items, eventPosition) {
        if (!items.length) {
          return false;
        }
        let x = eventPosition.x;
        let y = eventPosition.y;
        let minDistance = Number.POSITIVE_INFINITY;
        let i, len, nearestElement;
        for (i = 0, len = items.length; i < len; ++i) {
          const el = items[i].element;
          if (el && el.hasValue()) {
            const center = el.getCenterPoint();
            const d = distanceBetweenPoints(eventPosition, center);
            if (d < minDistance) {
              minDistance = d;
              nearestElement = el;
            }
          }
        }
        if (nearestElement) {
          const tp = nearestElement.tooltipPosition();
          x = tp.x;
          y = tp.y;
        }
        return {
          x,
          y
        };
      }
    };
    function pushOrConcat(base, toPush) {
      if (toPush) {
        if (isArray(toPush)) {
          Array.prototype.push.apply(base, toPush);
        } else {
          base.push(toPush);
        }
      }
      return base;
    }
    function splitNewlines(str) {
      if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
        return str.split('\n');
      }
      return str;
    }
    function createTooltipItem(chart, item) {
      const {element, datasetIndex, index} = item;
      const controller = chart.getDatasetMeta(datasetIndex).controller;
      const {label, value} = controller.getLabelAndValue(index);
      return {
        chart,
        label,
        parsed: controller.getParsed(index),
        raw: chart.data.datasets[datasetIndex].data[index],
        formattedValue: value,
        dataset: controller.getDataset(),
        dataIndex: index,
        datasetIndex,
        element
      };
    }
    function getTooltipSize(tooltip, options) {
      const ctx = tooltip.chart.ctx;
      const {body, footer, title} = tooltip;
      const {boxWidth, boxHeight} = options;
      const bodyFont = toFont(options.bodyFont);
      const titleFont = toFont(options.titleFont);
      const footerFont = toFont(options.footerFont);
      const titleLineCount = title.length;
      const footerLineCount = footer.length;
      const bodyLineItemCount = body.length;
      const padding = toPadding(options.padding);
      let height = padding.height;
      let width = 0;
      let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
      combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
      if (titleLineCount) {
        height += titleLineCount * titleFont.lineHeight
    			+ (titleLineCount - 1) * options.titleSpacing
    			+ options.titleMarginBottom;
      }
      if (combinedBodyLength) {
        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
        height += bodyLineItemCount * bodyLineHeight
    			+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight
    			+ (combinedBodyLength - 1) * options.bodySpacing;
      }
      if (footerLineCount) {
        height += options.footerMarginTop
    			+ footerLineCount * footerFont.lineHeight
    			+ (footerLineCount - 1) * options.footerSpacing;
      }
      let widthPadding = 0;
      const maxLineWidth = function(line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
      };
      ctx.save();
      ctx.font = titleFont.string;
      each(tooltip.title, maxLineWidth);
      ctx.font = bodyFont.string;
      each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
      widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;
      each(body, (bodyItem) => {
        each(bodyItem.before, maxLineWidth);
        each(bodyItem.lines, maxLineWidth);
        each(bodyItem.after, maxLineWidth);
      });
      widthPadding = 0;
      ctx.font = footerFont.string;
      each(tooltip.footer, maxLineWidth);
      ctx.restore();
      width += padding.width;
      return {width, height};
    }
    function determineYAlign(chart, size) {
      const {y, height} = size;
      if (y < height / 2) {
        return 'top';
      } else if (y > (chart.height - height / 2)) {
        return 'bottom';
      }
      return 'center';
    }
    function doesNotFitWithAlign(xAlign, chart, options, size) {
      const {x, width} = size;
      const caret = options.caretSize + options.caretPadding;
      if (xAlign === 'left' && x + width + caret > chart.width) {
        return true;
      }
      if (xAlign === 'right' && x - width - caret < 0) {
        return true;
      }
    }
    function determineXAlign(chart, options, size, yAlign) {
      const {x, width} = size;
      const {width: chartWidth, chartArea: {left, right}} = chart;
      let xAlign = 'center';
      if (yAlign === 'center') {
        xAlign = x <= (left + right) / 2 ? 'left' : 'right';
      } else if (x <= width / 2) {
        xAlign = 'left';
      } else if (x >= chartWidth - width / 2) {
        xAlign = 'right';
      }
      if (doesNotFitWithAlign(xAlign, chart, options, size)) {
        xAlign = 'center';
      }
      return xAlign;
    }
    function determineAlignment(chart, options, size) {
      const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
      return {
        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
        yAlign
      };
    }
    function alignX(size, xAlign) {
      let {x, width} = size;
      if (xAlign === 'right') {
        x -= width;
      } else if (xAlign === 'center') {
        x -= (width / 2);
      }
      return x;
    }
    function alignY(size, yAlign, paddingAndSize) {
      let {y, height} = size;
      if (yAlign === 'top') {
        y += paddingAndSize;
      } else if (yAlign === 'bottom') {
        y -= height + paddingAndSize;
      } else {
        y -= (height / 2);
      }
      return y;
    }
    function getBackgroundPoint(options, size, alignment, chart) {
      const {caretSize, caretPadding, cornerRadius} = options;
      const {xAlign, yAlign} = alignment;
      const paddingAndSize = caretSize + caretPadding;
      const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);
      let x = alignX(size, xAlign);
      const y = alignY(size, yAlign, paddingAndSize);
      if (yAlign === 'center') {
        if (xAlign === 'left') {
          x += paddingAndSize;
        } else if (xAlign === 'right') {
          x -= paddingAndSize;
        }
      } else if (xAlign === 'left') {
        x -= Math.max(topLeft, bottomLeft) + caretSize;
      } else if (xAlign === 'right') {
        x += Math.max(topRight, bottomRight) + caretSize;
      }
      return {
        x: _limitValue(x, 0, chart.width - size.width),
        y: _limitValue(y, 0, chart.height - size.height)
      };
    }
    function getAlignedX(tooltip, align, options) {
      const padding = toPadding(options.padding);
      return align === 'center'
        ? tooltip.x + tooltip.width / 2
        : align === 'right'
          ? tooltip.x + tooltip.width - padding.right
          : tooltip.x + padding.left;
    }
    function getBeforeAfterBodyLines(callback) {
      return pushOrConcat([], splitNewlines(callback));
    }
    function createTooltipContext(parent, tooltip, tooltipItems) {
      return createContext(parent, {
        tooltip,
        tooltipItems,
        type: 'tooltip'
      });
    }
    function overrideCallbacks(callbacks, context) {
      const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
      return override ? callbacks.override(override) : callbacks;
    }
    class Tooltip extends Element {
      constructor(config) {
        super();
        this.opacity = 0;
        this._active = [];
        this._eventPosition = undefined;
        this._size = undefined;
        this._cachedAnimations = undefined;
        this._tooltipItems = [];
        this.$animations = undefined;
        this.$context = undefined;
        this.chart = config.chart || config._chart;
        this._chart = this.chart;
        this.options = config.options;
        this.dataPoints = undefined;
        this.title = undefined;
        this.beforeBody = undefined;
        this.body = undefined;
        this.afterBody = undefined;
        this.footer = undefined;
        this.xAlign = undefined;
        this.yAlign = undefined;
        this.x = undefined;
        this.y = undefined;
        this.height = undefined;
        this.width = undefined;
        this.caretX = undefined;
        this.caretY = undefined;
        this.labelColors = undefined;
        this.labelPointStyles = undefined;
        this.labelTextColors = undefined;
      }
      initialize(options) {
        this.options = options;
        this._cachedAnimations = undefined;
        this.$context = undefined;
      }
      _resolveAnimations() {
        const cached = this._cachedAnimations;
        if (cached) {
          return cached;
        }
        const chart = this.chart;
        const options = this.options.setContext(this.getContext());
        const opts = options.enabled && chart.options.animation && options.animations;
        const animations = new Animations(this.chart, opts);
        if (opts._cacheable) {
          this._cachedAnimations = Object.freeze(animations);
        }
        return animations;
      }
      getContext() {
        return this.$context ||
    			(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
      }
      getTitle(context, options) {
        const {callbacks} = options;
        const beforeTitle = callbacks.beforeTitle.apply(this, [context]);
        const title = callbacks.title.apply(this, [context]);
        const afterTitle = callbacks.afterTitle.apply(this, [context]);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
        lines = pushOrConcat(lines, splitNewlines(title));
        lines = pushOrConcat(lines, splitNewlines(afterTitle));
        return lines;
      }
      getBeforeBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));
      }
      getBody(tooltipItems, options) {
        const {callbacks} = options;
        const bodyItems = [];
        each(tooltipItems, (context) => {
          const bodyItem = {
            before: [],
            lines: [],
            after: []
          };
          const scoped = overrideCallbacks(callbacks, context);
          pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));
          pushOrConcat(bodyItem.lines, scoped.label.call(this, context));
          pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));
          bodyItems.push(bodyItem);
        });
        return bodyItems;
      }
      getAfterBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));
      }
      getFooter(tooltipItems, options) {
        const {callbacks} = options;
        const beforeFooter = callbacks.beforeFooter.apply(this, [tooltipItems]);
        const footer = callbacks.footer.apply(this, [tooltipItems]);
        const afterFooter = callbacks.afterFooter.apply(this, [tooltipItems]);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
        lines = pushOrConcat(lines, splitNewlines(footer));
        lines = pushOrConcat(lines, splitNewlines(afterFooter));
        return lines;
      }
      _createItems(options) {
        const active = this._active;
        const data = this.chart.data;
        const labelColors = [];
        const labelPointStyles = [];
        const labelTextColors = [];
        let tooltipItems = [];
        let i, len;
        for (i = 0, len = active.length; i < len; ++i) {
          tooltipItems.push(createTooltipItem(this.chart, active[i]));
        }
        if (options.filter) {
          tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));
        }
        if (options.itemSort) {
          tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));
        }
        each(tooltipItems, (context) => {
          const scoped = overrideCallbacks(options.callbacks, context);
          labelColors.push(scoped.labelColor.call(this, context));
          labelPointStyles.push(scoped.labelPointStyle.call(this, context));
          labelTextColors.push(scoped.labelTextColor.call(this, context));
        });
        this.labelColors = labelColors;
        this.labelPointStyles = labelPointStyles;
        this.labelTextColors = labelTextColors;
        this.dataPoints = tooltipItems;
        return tooltipItems;
      }
      update(changed, replay) {
        const options = this.options.setContext(this.getContext());
        const active = this._active;
        let properties;
        let tooltipItems = [];
        if (!active.length) {
          if (this.opacity !== 0) {
            properties = {
              opacity: 0
            };
          }
        } else {
          const position = positioners[options.position].call(this, active, this._eventPosition);
          tooltipItems = this._createItems(options);
          this.title = this.getTitle(tooltipItems, options);
          this.beforeBody = this.getBeforeBody(tooltipItems, options);
          this.body = this.getBody(tooltipItems, options);
          this.afterBody = this.getAfterBody(tooltipItems, options);
          this.footer = this.getFooter(tooltipItems, options);
          const size = this._size = getTooltipSize(this, options);
          const positionAndSize = Object.assign({}, position, size);
          const alignment = determineAlignment(this.chart, options, positionAndSize);
          const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
          this.xAlign = alignment.xAlign;
          this.yAlign = alignment.yAlign;
          properties = {
            opacity: 1,
            x: backgroundPoint.x,
            y: backgroundPoint.y,
            width: size.width,
            height: size.height,
            caretX: position.x,
            caretY: position.y
          };
        }
        this._tooltipItems = tooltipItems;
        this.$context = undefined;
        if (properties) {
          this._resolveAnimations().update(this, properties);
        }
        if (changed && options.external) {
          options.external.call(this, {chart: this.chart, tooltip: this, replay});
        }
      }
      drawCaret(tooltipPoint, ctx, size, options) {
        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
      }
      getCaretPosition(tooltipPoint, size, options) {
        const {xAlign, yAlign} = this;
        const {caretSize, cornerRadius} = options;
        const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);
        const {x: ptX, y: ptY} = tooltipPoint;
        const {width, height} = size;
        let x1, x2, x3, y1, y2, y3;
        if (yAlign === 'center') {
          y2 = ptY + (height / 2);
          if (xAlign === 'left') {
            x1 = ptX;
            x2 = x1 - caretSize;
            y1 = y2 + caretSize;
            y3 = y2 - caretSize;
          } else {
            x1 = ptX + width;
            x2 = x1 + caretSize;
            y1 = y2 - caretSize;
            y3 = y2 + caretSize;
          }
          x3 = x1;
        } else {
          if (xAlign === 'left') {
            x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);
          } else if (xAlign === 'right') {
            x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
          } else {
            x2 = this.caretX;
          }
          if (yAlign === 'top') {
            y1 = ptY;
            y2 = y1 - caretSize;
            x1 = x2 - caretSize;
            x3 = x2 + caretSize;
          } else {
            y1 = ptY + height;
            y2 = y1 + caretSize;
            x1 = x2 + caretSize;
            x3 = x2 - caretSize;
          }
          y3 = y1;
        }
        return {x1, x2, x3, y1, y2, y3};
      }
      drawTitle(pt, ctx, options) {
        const title = this.title;
        const length = title.length;
        let titleFont, titleSpacing, i;
        if (length) {
          const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
          pt.x = getAlignedX(this, options.titleAlign, options);
          ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
          ctx.textBaseline = 'middle';
          titleFont = toFont(options.titleFont);
          titleSpacing = options.titleSpacing;
          ctx.fillStyle = options.titleColor;
          ctx.font = titleFont.string;
          for (i = 0; i < length; ++i) {
            ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
            pt.y += titleFont.lineHeight + titleSpacing;
            if (i + 1 === length) {
              pt.y += options.titleMarginBottom - titleSpacing;
            }
          }
        }
      }
      _drawColorBox(ctx, pt, i, rtlHelper, options) {
        const labelColors = this.labelColors[i];
        const labelPointStyle = this.labelPointStyles[i];
        const {boxHeight, boxWidth, boxPadding} = options;
        const bodyFont = toFont(options.bodyFont);
        const colorX = getAlignedX(this, 'left', options);
        const rtlColorX = rtlHelper.x(colorX);
        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
        const colorY = pt.y + yOffSet;
        if (options.usePointStyle) {
          const drawOptions = {
            radius: Math.min(boxWidth, boxHeight) / 2,
            pointStyle: labelPointStyle.pointStyle,
            rotation: labelPointStyle.rotation,
            borderWidth: 1
          };
          const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
          const centerY = colorY + boxHeight / 2;
          ctx.strokeStyle = options.multiKeyBackground;
          ctx.fillStyle = options.multiKeyBackground;
          drawPoint(ctx, drawOptions, centerX, centerY);
          ctx.strokeStyle = labelColors.borderColor;
          ctx.fillStyle = labelColors.backgroundColor;
          drawPoint(ctx, drawOptions, centerX, centerY);
        } else {
          ctx.lineWidth = labelColors.borderWidth || 1;
          ctx.strokeStyle = labelColors.borderColor;
          ctx.setLineDash(labelColors.borderDash || []);
          ctx.lineDashOffset = labelColors.borderDashOffset || 0;
          const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);
          const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);
          const borderRadius = toTRBLCorners(labelColors.borderRadius);
          if (Object.values(borderRadius).some(v => v !== 0)) {
            ctx.beginPath();
            ctx.fillStyle = options.multiKeyBackground;
            addRoundedRectPath(ctx, {
              x: outerX,
              y: colorY,
              w: boxWidth,
              h: boxHeight,
              radius: borderRadius,
            });
            ctx.fill();
            ctx.stroke();
            ctx.fillStyle = labelColors.backgroundColor;
            ctx.beginPath();
            addRoundedRectPath(ctx, {
              x: innerX,
              y: colorY + 1,
              w: boxWidth - 2,
              h: boxHeight - 2,
              radius: borderRadius,
            });
            ctx.fill();
          } else {
            ctx.fillStyle = options.multiKeyBackground;
            ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
            ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
            ctx.fillStyle = labelColors.backgroundColor;
            ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
          }
        }
        ctx.fillStyle = this.labelTextColors[i];
      }
      drawBody(pt, ctx, options) {
        const {body} = this;
        const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;
        const bodyFont = toFont(options.bodyFont);
        let bodyLineHeight = bodyFont.lineHeight;
        let xLinePadding = 0;
        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
        const fillLineOfText = function(line) {
          ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
          pt.y += bodyLineHeight + bodySpacing;
        };
        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
        let bodyItem, textColor, lines, i, j, ilen, jlen;
        ctx.textAlign = bodyAlign;
        ctx.textBaseline = 'middle';
        ctx.font = bodyFont.string;
        pt.x = getAlignedX(this, bodyAlignForCalculation, options);
        ctx.fillStyle = options.bodyColor;
        each(this.beforeBody, fillLineOfText);
        xLinePadding = displayColors && bodyAlignForCalculation !== 'right'
          ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)
          : 0;
        for (i = 0, ilen = body.length; i < ilen; ++i) {
          bodyItem = body[i];
          textColor = this.labelTextColors[i];
          ctx.fillStyle = textColor;
          each(bodyItem.before, fillLineOfText);
          lines = bodyItem.lines;
          if (displayColors && lines.length) {
            this._drawColorBox(ctx, pt, i, rtlHelper, options);
            bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
          }
          for (j = 0, jlen = lines.length; j < jlen; ++j) {
            fillLineOfText(lines[j]);
            bodyLineHeight = bodyFont.lineHeight;
          }
          each(bodyItem.after, fillLineOfText);
        }
        xLinePadding = 0;
        bodyLineHeight = bodyFont.lineHeight;
        each(this.afterBody, fillLineOfText);
        pt.y -= bodySpacing;
      }
      drawFooter(pt, ctx, options) {
        const footer = this.footer;
        const length = footer.length;
        let footerFont, i;
        if (length) {
          const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
          pt.x = getAlignedX(this, options.footerAlign, options);
          pt.y += options.footerMarginTop;
          ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
          ctx.textBaseline = 'middle';
          footerFont = toFont(options.footerFont);
          ctx.fillStyle = options.footerColor;
          ctx.font = footerFont.string;
          for (i = 0; i < length; ++i) {
            ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
            pt.y += footerFont.lineHeight + options.footerSpacing;
          }
        }
      }
      drawBackground(pt, ctx, tooltipSize, options) {
        const {xAlign, yAlign} = this;
        const {x, y} = pt;
        const {width, height} = tooltipSize;
        const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.beginPath();
        ctx.moveTo(x + topLeft, y);
        if (yAlign === 'top') {
          this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x + width - topRight, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
        if (yAlign === 'center' && xAlign === 'right') {
          this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x + width, y + height - bottomRight);
        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
        if (yAlign === 'bottom') {
          this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x + bottomLeft, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
        if (yAlign === 'center' && xAlign === 'left') {
          this.drawCaret(pt, ctx, tooltipSize, options);
        }
        ctx.lineTo(x, y + topLeft);
        ctx.quadraticCurveTo(x, y, x + topLeft, y);
        ctx.closePath();
        ctx.fill();
        if (options.borderWidth > 0) {
          ctx.stroke();
        }
      }
      _updateAnimationTarget(options) {
        const chart = this.chart;
        const anims = this.$animations;
        const animX = anims && anims.x;
        const animY = anims && anims.y;
        if (animX || animY) {
          const position = positioners[options.position].call(this, this._active, this._eventPosition);
          if (!position) {
            return;
          }
          const size = this._size = getTooltipSize(this, options);
          const positionAndSize = Object.assign({}, position, this._size);
          const alignment = determineAlignment(chart, options, positionAndSize);
          const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
          if (animX._to !== point.x || animY._to !== point.y) {
            this.xAlign = alignment.xAlign;
            this.yAlign = alignment.yAlign;
            this.width = size.width;
            this.height = size.height;
            this.caretX = position.x;
            this.caretY = position.y;
            this._resolveAnimations().update(this, point);
          }
        }
      }
      draw(ctx) {
        const options = this.options.setContext(this.getContext());
        let opacity = this.opacity;
        if (!opacity) {
          return;
        }
        this._updateAnimationTarget(options);
        const tooltipSize = {
          width: this.width,
          height: this.height
        };
        const pt = {
          x: this.x,
          y: this.y
        };
        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
        const padding = toPadding(options.padding);
        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
        if (options.enabled && hasTooltipContent) {
          ctx.save();
          ctx.globalAlpha = opacity;
          this.drawBackground(pt, ctx, tooltipSize, options);
          overrideTextDirection(ctx, options.textDirection);
          pt.y += padding.top;
          this.drawTitle(pt, ctx, options);
          this.drawBody(pt, ctx, options);
          this.drawFooter(pt, ctx, options);
          restoreTextDirection(ctx, options.textDirection);
          ctx.restore();
        }
      }
      getActiveElements() {
        return this._active || [];
      }
      setActiveElements(activeElements, eventPosition) {
        const lastActive = this._active;
        const active = activeElements.map(({datasetIndex, index}) => {
          const meta = this.chart.getDatasetMeta(datasetIndex);
          if (!meta) {
            throw new Error('Cannot find a dataset at index ' + datasetIndex);
          }
          return {
            datasetIndex,
            element: meta.data[index],
            index,
          };
        });
        const changed = !_elementsEqual(lastActive, active);
        const positionChanged = this._positionChanged(active, eventPosition);
        if (changed || positionChanged) {
          this._active = active;
          this._eventPosition = eventPosition;
          this._ignoreReplayEvents = true;
          this.update(true);
        }
      }
      handleEvent(e, replay, inChartArea = true) {
        if (replay && this._ignoreReplayEvents) {
          return false;
        }
        this._ignoreReplayEvents = false;
        const options = this.options;
        const lastActive = this._active || [];
        const active = this._getActiveElements(e, lastActive, replay, inChartArea);
        const positionChanged = this._positionChanged(active, e);
        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
        if (changed) {
          this._active = active;
          if (options.enabled || options.external) {
            this._eventPosition = {
              x: e.x,
              y: e.y
            };
            this.update(true, replay);
          }
        }
        return changed;
      }
      _getActiveElements(e, lastActive, replay, inChartArea) {
        const options = this.options;
        if (e.type === 'mouseout') {
          return [];
        }
        if (!inChartArea) {
          return lastActive;
        }
        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
        if (options.reverse) {
          active.reverse();
        }
        return active;
      }
      _positionChanged(active, e) {
        const {caretX, caretY, options} = this;
        const position = positioners[options.position].call(this, active, e);
        return position !== false && (caretX !== position.x || caretY !== position.y);
      }
    }
    Tooltip.positioners = positioners;
    var plugin_tooltip = {
      id: 'tooltip',
      _element: Tooltip,
      positioners,
      afterInit(chart, _args, options) {
        if (options) {
          chart.tooltip = new Tooltip({chart, options});
        }
      },
      beforeUpdate(chart, _args, options) {
        if (chart.tooltip) {
          chart.tooltip.initialize(options);
        }
      },
      reset(chart, _args, options) {
        if (chart.tooltip) {
          chart.tooltip.initialize(options);
        }
      },
      afterDraw(chart) {
        const tooltip = chart.tooltip;
        const args = {
          tooltip
        };
        if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {
          return;
        }
        if (tooltip) {
          tooltip.draw(chart.ctx);
        }
        chart.notifyPlugins('afterTooltipDraw', args);
      },
      afterEvent(chart, args) {
        if (chart.tooltip) {
          const useFinalPosition = args.replay;
          if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
            args.changed = true;
          }
        }
      },
      defaults: {
        enabled: true,
        external: null,
        position: 'average',
        backgroundColor: 'rgba(0,0,0,0.8)',
        titleColor: '#fff',
        titleFont: {
          weight: 'bold',
        },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: 'left',
        bodyColor: '#fff',
        bodySpacing: 2,
        bodyFont: {
        },
        bodyAlign: 'left',
        footerColor: '#fff',
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: {
          weight: 'bold',
        },
        footerAlign: 'left',
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (ctx, opts) => opts.bodyFont.size,
        boxWidth: (ctx, opts) => opts.bodyFont.size,
        multiKeyBackground: '#fff',
        displayColors: true,
        boxPadding: 0,
        borderColor: 'rgba(0,0,0,0)',
        borderWidth: 0,
        animation: {
          duration: 400,
          easing: 'easeOutQuart',
        },
        animations: {
          numbers: {
            type: 'number',
            properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],
          },
          opacity: {
            easing: 'linear',
            duration: 200
          }
        },
        callbacks: {
          beforeTitle: noop$1,
          title(tooltipItems) {
            if (tooltipItems.length > 0) {
              const item = tooltipItems[0];
              const labels = item.chart.data.labels;
              const labelCount = labels ? labels.length : 0;
              if (this && this.options && this.options.mode === 'dataset') {
                return item.dataset.label || '';
              } else if (item.label) {
                return item.label;
              } else if (labelCount > 0 && item.dataIndex < labelCount) {
                return labels[item.dataIndex];
              }
            }
            return '';
          },
          afterTitle: noop$1,
          beforeBody: noop$1,
          beforeLabel: noop$1,
          label(tooltipItem) {
            if (this && this.options && this.options.mode === 'dataset') {
              return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
            }
            let label = tooltipItem.dataset.label || '';
            if (label) {
              label += ': ';
            }
            const value = tooltipItem.formattedValue;
            if (!isNullOrUndef(value)) {
              label += value;
            }
            return label;
          },
          labelColor(tooltipItem) {
            const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
            const options = meta.controller.getStyle(tooltipItem.dataIndex);
            return {
              borderColor: options.borderColor,
              backgroundColor: options.backgroundColor,
              borderWidth: options.borderWidth,
              borderDash: options.borderDash,
              borderDashOffset: options.borderDashOffset,
              borderRadius: 0,
            };
          },
          labelTextColor() {
            return this.options.bodyColor;
          },
          labelPointStyle(tooltipItem) {
            const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
            const options = meta.controller.getStyle(tooltipItem.dataIndex);
            return {
              pointStyle: options.pointStyle,
              rotation: options.rotation,
            };
          },
          afterLabel: noop$1,
          afterBody: noop$1,
          beforeFooter: noop$1,
          footer: noop$1,
          afterFooter: noop$1
        }
      },
      defaultRoutes: {
        bodyFont: 'font',
        footerFont: 'font',
        titleFont: 'font'
      },
      descriptors: {
        _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',
        _indexable: false,
        callbacks: {
          _scriptable: false,
          _indexable: false,
        },
        animation: {
          _fallback: false
        },
        animations: {
          _fallback: 'animation'
        }
      },
      additionalOptionScopes: ['interaction']
    };

    var plugins = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Decimation: plugin_decimation,
    Filler: plugin_filler,
    Legend: plugin_legend,
    SubTitle: plugin_subtitle,
    Title: plugin_title,
    Tooltip: plugin_tooltip
    });

    const addIfString = (labels, raw, index, addedLabels) => {
      if (typeof raw === 'string') {
        index = labels.push(raw) - 1;
        addedLabels.unshift({index, label: raw});
      } else if (isNaN(raw)) {
        index = null;
      }
      return index;
    };
    function findOrAddLabel(labels, raw, index, addedLabels) {
      const first = labels.indexOf(raw);
      if (first === -1) {
        return addIfString(labels, raw, index, addedLabels);
      }
      const last = labels.lastIndexOf(raw);
      return first !== last ? index : first;
    }
    const validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);
    class CategoryScale extends Scale {
      constructor(cfg) {
        super(cfg);
        this._startValue = undefined;
        this._valueRange = 0;
        this._addedLabels = [];
      }
      init(scaleOptions) {
        const added = this._addedLabels;
        if (added.length) {
          const labels = this.getLabels();
          for (const {index, label} of added) {
            if (labels[index] === label) {
              labels.splice(index, 1);
            }
          }
          this._addedLabels = [];
        }
        super.init(scaleOptions);
      }
      parse(raw, index) {
        if (isNullOrUndef(raw)) {
          return null;
        }
        const labels = this.getLabels();
        index = isFinite(index) && labels[index] === raw ? index
          : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);
        return validIndex(index, labels.length - 1);
      }
      determineDataLimits() {
        const {minDefined, maxDefined} = this.getUserBounds();
        let {min, max} = this.getMinMax(true);
        if (this.options.bounds === 'ticks') {
          if (!minDefined) {
            min = 0;
          }
          if (!maxDefined) {
            max = this.getLabels().length - 1;
          }
        }
        this.min = min;
        this.max = max;
      }
      buildTicks() {
        const min = this.min;
        const max = this.max;
        const offset = this.options.offset;
        const ticks = [];
        let labels = this.getLabels();
        labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);
        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
        this._startValue = this.min - (offset ? 0.5 : 0);
        for (let value = min; value <= max; value++) {
          ticks.push({value});
        }
        return ticks;
      }
      getLabelForValue(value) {
        const labels = this.getLabels();
        if (value >= 0 && value < labels.length) {
          return labels[value];
        }
        return value;
      }
      configure() {
        super.configure();
        if (!this.isHorizontal()) {
          this._reversePixels = !this._reversePixels;
        }
      }
      getPixelForValue(value) {
        if (typeof value !== 'number') {
          value = this.parse(value);
        }
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
      }
      getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) {
          return null;
        }
        return this.getPixelForValue(ticks[index].value);
      }
      getValueForPixel(pixel) {
        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
      }
      getBasePixel() {
        return this.bottom;
      }
    }
    CategoryScale.id = 'category';
    CategoryScale.defaults = {
      ticks: {
        callback: CategoryScale.prototype.getLabelForValue
      }
    };

    function generateTicks$1(generationOptions, dataRange) {
      const ticks = [];
      const MIN_SPACING = 1e-14;
      const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;
      const unit = step || 1;
      const maxSpaces = maxTicks - 1;
      const {min: rmin, max: rmax} = dataRange;
      const minDefined = !isNullOrUndef(min);
      const maxDefined = !isNullOrUndef(max);
      const countDefined = !isNullOrUndef(count);
      const minSpacing = (rmax - rmin) / (maxDigits + 1);
      let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
      let factor, niceMin, niceMax, numSpaces;
      if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
        return [{value: rmin}, {value: rmax}];
      }
      numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
      if (numSpaces > maxSpaces) {
        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
      }
      if (!isNullOrUndef(precision)) {
        factor = Math.pow(10, precision);
        spacing = Math.ceil(spacing * factor) / factor;
      }
      if (bounds === 'ticks') {
        niceMin = Math.floor(rmin / spacing) * spacing;
        niceMax = Math.ceil(rmax / spacing) * spacing;
      } else {
        niceMin = rmin;
        niceMax = rmax;
      }
      if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {
        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
        spacing = (max - min) / numSpaces;
        niceMin = min;
        niceMax = max;
      } else if (countDefined) {
        niceMin = minDefined ? min : niceMin;
        niceMax = maxDefined ? max : niceMax;
        numSpaces = count - 1;
        spacing = (niceMax - niceMin) / numSpaces;
      } else {
        numSpaces = (niceMax - niceMin) / spacing;
        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
          numSpaces = Math.round(numSpaces);
        } else {
          numSpaces = Math.ceil(numSpaces);
        }
      }
      const decimalPlaces = Math.max(
        _decimalPlaces(spacing),
        _decimalPlaces(niceMin)
      );
      factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
      niceMin = Math.round(niceMin * factor) / factor;
      niceMax = Math.round(niceMax * factor) / factor;
      let j = 0;
      if (minDefined) {
        if (includeBounds && niceMin !== min) {
          ticks.push({value: min});
          if (niceMin < min) {
            j++;
          }
          if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
            j++;
          }
        } else if (niceMin < min) {
          j++;
        }
      }
      for (; j < numSpaces; ++j) {
        ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});
      }
      if (maxDefined && includeBounds && niceMax !== max) {
        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
          ticks[ticks.length - 1].value = max;
        } else {
          ticks.push({value: max});
        }
      } else if (!maxDefined || niceMax === max) {
        ticks.push({value: niceMax});
      }
      return ticks;
    }
    function relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {
      const rad = toRadians(minRotation);
      const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
      const length = 0.75 * minSpacing * ('' + value).length;
      return Math.min(minSpacing / ratio, length);
    }
    class LinearScaleBase extends Scale {
      constructor(cfg) {
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._endValue = undefined;
        this._valueRange = 0;
      }
      parse(raw, index) {
        if (isNullOrUndef(raw)) {
          return null;
        }
        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
          return null;
        }
        return +raw;
      }
      handleTickRangeOptions() {
        const {beginAtZero} = this.options;
        const {minDefined, maxDefined} = this.getUserBounds();
        let {min, max} = this;
        const setMin = v => (min = minDefined ? min : v);
        const setMax = v => (max = maxDefined ? max : v);
        if (beginAtZero) {
          const minSign = sign(min);
          const maxSign = sign(max);
          if (minSign < 0 && maxSign < 0) {
            setMax(0);
          } else if (minSign > 0 && maxSign > 0) {
            setMin(0);
          }
        }
        if (min === max) {
          let offset = 1;
          if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {
            offset = Math.abs(max * 0.05);
          }
          setMax(max + offset);
          if (!beginAtZero) {
            setMin(min - offset);
          }
        }
        this.min = min;
        this.max = max;
      }
      getTickLimit() {
        const tickOpts = this.options.ticks;
        let {maxTicksLimit, stepSize} = tickOpts;
        let maxTicks;
        if (stepSize) {
          maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
          if (maxTicks > 1000) {
            console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
            maxTicks = 1000;
          }
        } else {
          maxTicks = this.computeTickLimit();
          maxTicksLimit = maxTicksLimit || 11;
        }
        if (maxTicksLimit) {
          maxTicks = Math.min(maxTicksLimit, maxTicks);
        }
        return maxTicks;
      }
      computeTickLimit() {
        return Number.POSITIVE_INFINITY;
      }
      buildTicks() {
        const opts = this.options;
        const tickOpts = opts.ticks;
        let maxTicks = this.getTickLimit();
        maxTicks = Math.max(2, maxTicks);
        const numericGeneratorOptions = {
          maxTicks,
          bounds: opts.bounds,
          min: opts.min,
          max: opts.max,
          precision: tickOpts.precision,
          step: tickOpts.stepSize,
          count: tickOpts.count,
          maxDigits: this._maxDigits(),
          horizontal: this.isHorizontal(),
          minRotation: tickOpts.minRotation || 0,
          includeBounds: tickOpts.includeBounds !== false
        };
        const dataRange = this._range || this;
        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
        if (opts.bounds === 'ticks') {
          _setMinAndMaxByKey(ticks, this, 'value');
        }
        if (opts.reverse) {
          ticks.reverse();
          this.start = this.max;
          this.end = this.min;
        } else {
          this.start = this.min;
          this.end = this.max;
        }
        return ticks;
      }
      configure() {
        const ticks = this.ticks;
        let start = this.min;
        let end = this.max;
        super.configure();
        if (this.options.offset && ticks.length) {
          const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
          start -= offset;
          end += offset;
        }
        this._startValue = start;
        this._endValue = end;
        this._valueRange = end - start;
      }
      getLabelForValue(value) {
        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
      }
    }

    class LinearScale extends LinearScaleBase {
      determineDataLimits() {
        const {min, max} = this.getMinMax(true);
        this.min = isNumberFinite(min) ? min : 0;
        this.max = isNumberFinite(max) ? max : 1;
        this.handleTickRangeOptions();
      }
      computeTickLimit() {
        const horizontal = this.isHorizontal();
        const length = horizontal ? this.width : this.height;
        const minRotation = toRadians(this.options.ticks.minRotation);
        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
        const tickFont = this._resolveTickFontOptions(0);
        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
      }
      getPixelForValue(value) {
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
      }
      getValueForPixel(pixel) {
        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
      }
    }
    LinearScale.id = 'linear';
    LinearScale.defaults = {
      ticks: {
        callback: Ticks.formatters.numeric
      }
    };

    function isMajor(tickVal) {
      const remain = tickVal / (Math.pow(10, Math.floor(log10(tickVal))));
      return remain === 1;
    }
    function generateTicks(generationOptions, dataRange) {
      const endExp = Math.floor(log10(dataRange.max));
      const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
      const ticks = [];
      let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));
      let exp = Math.floor(log10(tickVal));
      let significand = Math.floor(tickVal / Math.pow(10, exp));
      let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
      do {
        ticks.push({value: tickVal, major: isMajor(tickVal)});
        ++significand;
        if (significand === 10) {
          significand = 1;
          ++exp;
          precision = exp >= 0 ? 1 : precision;
        }
        tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
      } while (exp < endExp || (exp === endExp && significand < endSignificand));
      const lastTick = finiteOrDefault(generationOptions.max, tickVal);
      ticks.push({value: lastTick, major: isMajor(tickVal)});
      return ticks;
    }
    class LogarithmicScale extends Scale {
      constructor(cfg) {
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._valueRange = 0;
      }
      parse(raw, index) {
        const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);
        if (value === 0) {
          this._zero = true;
          return undefined;
        }
        return isNumberFinite(value) && value > 0 ? value : null;
      }
      determineDataLimits() {
        const {min, max} = this.getMinMax(true);
        this.min = isNumberFinite(min) ? Math.max(0, min) : null;
        this.max = isNumberFinite(max) ? Math.max(0, max) : null;
        if (this.options.beginAtZero) {
          this._zero = true;
        }
        this.handleTickRangeOptions();
      }
      handleTickRangeOptions() {
        const {minDefined, maxDefined} = this.getUserBounds();
        let min = this.min;
        let max = this.max;
        const setMin = v => (min = minDefined ? min : v);
        const setMax = v => (max = maxDefined ? max : v);
        const exp = (v, m) => Math.pow(10, Math.floor(log10(v)) + m);
        if (min === max) {
          if (min <= 0) {
            setMin(1);
            setMax(10);
          } else {
            setMin(exp(min, -1));
            setMax(exp(max, +1));
          }
        }
        if (min <= 0) {
          setMin(exp(max, -1));
        }
        if (max <= 0) {
          setMax(exp(min, +1));
        }
        if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) {
          setMin(exp(min, -1));
        }
        this.min = min;
        this.max = max;
      }
      buildTicks() {
        const opts = this.options;
        const generationOptions = {
          min: this._userMin,
          max: this._userMax
        };
        const ticks = generateTicks(generationOptions, this);
        if (opts.bounds === 'ticks') {
          _setMinAndMaxByKey(ticks, this, 'value');
        }
        if (opts.reverse) {
          ticks.reverse();
          this.start = this.max;
          this.end = this.min;
        } else {
          this.start = this.min;
          this.end = this.max;
        }
        return ticks;
      }
      getLabelForValue(value) {
        return value === undefined
          ? '0'
          : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
      }
      configure() {
        const start = this.min;
        super.configure();
        this._startValue = log10(start);
        this._valueRange = log10(this.max) - log10(start);
      }
      getPixelForValue(value) {
        if (value === undefined || value === 0) {
          value = this.min;
        }
        if (value === null || isNaN(value)) {
          return NaN;
        }
        return this.getPixelForDecimal(value === this.min
          ? 0
          : (log10(value) - this._startValue) / this._valueRange);
      }
      getValueForPixel(pixel) {
        const decimal = this.getDecimalForPixel(pixel);
        return Math.pow(10, this._startValue + decimal * this._valueRange);
      }
    }
    LogarithmicScale.id = 'logarithmic';
    LogarithmicScale.defaults = {
      ticks: {
        callback: Ticks.formatters.logarithmic,
        major: {
          enabled: true
        }
      }
    };

    function getTickBackdropHeight(opts) {
      const tickOpts = opts.ticks;
      if (tickOpts.display && opts.display) {
        const padding = toPadding(tickOpts.backdropPadding);
        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
      }
      return 0;
    }
    function measureLabelSize(ctx, font, label) {
      label = isArray(label) ? label : [label];
      return {
        w: _longestText(ctx, font.string, label),
        h: label.length * font.lineHeight
      };
    }
    function determineLimits(angle, pos, size, min, max) {
      if (angle === min || angle === max) {
        return {
          start: pos - (size / 2),
          end: pos + (size / 2)
        };
      } else if (angle < min || angle > max) {
        return {
          start: pos - size,
          end: pos
        };
      }
      return {
        start: pos,
        end: pos + size
      };
    }
    function fitWithPointLabels(scale) {
      const orig = {
        l: scale.left + scale._padding.left,
        r: scale.right - scale._padding.right,
        t: scale.top + scale._padding.top,
        b: scale.bottom - scale._padding.bottom
      };
      const limits = Object.assign({}, orig);
      const labelSizes = [];
      const padding = [];
      const valueCount = scale._pointLabels.length;
      const pointLabelOpts = scale.options.pointLabels;
      const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
      for (let i = 0; i < valueCount; i++) {
        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
        padding[i] = opts.padding;
        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
        const plFont = toFont(opts.font);
        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
        labelSizes[i] = textSize;
        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);
        const angle = Math.round(toDegrees(angleRadians));
        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
        updateLimits(limits, orig, angleRadians, hLimits, vLimits);
      }
      scale.setCenterPoint(
        orig.l - limits.l,
        limits.r - orig.r,
        orig.t - limits.t,
        limits.b - orig.b
      );
      scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
    }
    function updateLimits(limits, orig, angle, hLimits, vLimits) {
      const sin = Math.abs(Math.sin(angle));
      const cos = Math.abs(Math.cos(angle));
      let x = 0;
      let y = 0;
      if (hLimits.start < orig.l) {
        x = (orig.l - hLimits.start) / sin;
        limits.l = Math.min(limits.l, orig.l - x);
      } else if (hLimits.end > orig.r) {
        x = (hLimits.end - orig.r) / sin;
        limits.r = Math.max(limits.r, orig.r + x);
      }
      if (vLimits.start < orig.t) {
        y = (orig.t - vLimits.start) / cos;
        limits.t = Math.min(limits.t, orig.t - y);
      } else if (vLimits.end > orig.b) {
        y = (vLimits.end - orig.b) / cos;
        limits.b = Math.max(limits.b, orig.b + y);
      }
    }
    function buildPointLabelItems(scale, labelSizes, padding) {
      const items = [];
      const valueCount = scale._pointLabels.length;
      const opts = scale.options;
      const extra = getTickBackdropHeight(opts) / 2;
      const outerDistance = scale.drawingArea;
      const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;
      for (let i = 0; i < valueCount; i++) {
        const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);
        const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
        const size = labelSizes[i];
        const y = yForAngle(pointLabelPosition.y, size.h, angle);
        const textAlign = getTextAlignForAngle(angle);
        const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
        items.push({
          x: pointLabelPosition.x,
          y,
          textAlign,
          left,
          top: y,
          right: left + size.w,
          bottom: y + size.h
        });
      }
      return items;
    }
    function getTextAlignForAngle(angle) {
      if (angle === 0 || angle === 180) {
        return 'center';
      } else if (angle < 180) {
        return 'left';
      }
      return 'right';
    }
    function leftForTextAlign(x, w, align) {
      if (align === 'right') {
        x -= w;
      } else if (align === 'center') {
        x -= (w / 2);
      }
      return x;
    }
    function yForAngle(y, h, angle) {
      if (angle === 90 || angle === 270) {
        y -= (h / 2);
      } else if (angle > 270 || angle < 90) {
        y -= h;
      }
      return y;
    }
    function drawPointLabels(scale, labelCount) {
      const {ctx, options: {pointLabels}} = scale;
      for (let i = labelCount - 1; i >= 0; i--) {
        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
        const plFont = toFont(optsAtIndex.font);
        const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];
        const {backdropColor} = optsAtIndex;
        if (!isNullOrUndef(backdropColor)) {
          const padding = toPadding(optsAtIndex.backdropPadding);
          ctx.fillStyle = backdropColor;
          ctx.fillRect(left - padding.left, top - padding.top, right - left + padding.width, bottom - top + padding.height);
        }
        renderText(
          ctx,
          scale._pointLabels[i],
          x,
          y + (plFont.lineHeight / 2),
          plFont,
          {
            color: optsAtIndex.color,
            textAlign: textAlign,
            textBaseline: 'middle'
          }
        );
      }
    }
    function pathRadiusLine(scale, radius, circular, labelCount) {
      const {ctx} = scale;
      if (circular) {
        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
      } else {
        let pointPosition = scale.getPointPosition(0, radius);
        ctx.moveTo(pointPosition.x, pointPosition.y);
        for (let i = 1; i < labelCount; i++) {
          pointPosition = scale.getPointPosition(i, radius);
          ctx.lineTo(pointPosition.x, pointPosition.y);
        }
      }
    }
    function drawRadiusLine(scale, gridLineOpts, radius, labelCount) {
      const ctx = scale.ctx;
      const circular = gridLineOpts.circular;
      const {color, lineWidth} = gridLineOpts;
      if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {
        return;
      }
      ctx.save();
      ctx.strokeStyle = color;
      ctx.lineWidth = lineWidth;
      ctx.setLineDash(gridLineOpts.borderDash);
      ctx.lineDashOffset = gridLineOpts.borderDashOffset;
      ctx.beginPath();
      pathRadiusLine(scale, radius, circular, labelCount);
      ctx.closePath();
      ctx.stroke();
      ctx.restore();
    }
    function createPointLabelContext(parent, index, label) {
      return createContext(parent, {
        label,
        index,
        type: 'pointLabel'
      });
    }
    class RadialLinearScale extends LinearScaleBase {
      constructor(cfg) {
        super(cfg);
        this.xCenter = undefined;
        this.yCenter = undefined;
        this.drawingArea = undefined;
        this._pointLabels = [];
        this._pointLabelItems = [];
      }
      setDimensions() {
        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
        const w = this.width = this.maxWidth - padding.width;
        const h = this.height = this.maxHeight - padding.height;
        this.xCenter = Math.floor(this.left + w / 2 + padding.left);
        this.yCenter = Math.floor(this.top + h / 2 + padding.top);
        this.drawingArea = Math.floor(Math.min(w, h) / 2);
      }
      determineDataLimits() {
        const {min, max} = this.getMinMax(false);
        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
        this.handleTickRangeOptions();
      }
      computeTickLimit() {
        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
      }
      generateTickLabels(ticks) {
        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
        this._pointLabels = this.getLabels()
          .map((value, index) => {
            const label = callback(this.options.pointLabels.callback, [value, index], this);
            return label || label === 0 ? label : '';
          })
          .filter((v, i) => this.chart.getDataVisibility(i));
      }
      fit() {
        const opts = this.options;
        if (opts.display && opts.pointLabels.display) {
          fitWithPointLabels(this);
        } else {
          this.setCenterPoint(0, 0, 0, 0);
        }
      }
      setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
      }
      getIndexAngle(index) {
        const angleMultiplier = TAU / (this._pointLabels.length || 1);
        const startAngle = this.options.startAngle || 0;
        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));
      }
      getDistanceFromCenterForValue(value) {
        if (isNullOrUndef(value)) {
          return NaN;
        }
        const scalingFactor = this.drawingArea / (this.max - this.min);
        if (this.options.reverse) {
          return (this.max - value) * scalingFactor;
        }
        return (value - this.min) * scalingFactor;
      }
      getValueForDistanceFromCenter(distance) {
        if (isNullOrUndef(distance)) {
          return NaN;
        }
        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
      }
      getPointLabelContext(index) {
        const pointLabels = this._pointLabels || [];
        if (index >= 0 && index < pointLabels.length) {
          const pointLabel = pointLabels[index];
          return createPointLabelContext(this.getContext(), index, pointLabel);
        }
      }
      getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;
        return {
          x: Math.cos(angle) * distanceFromCenter + this.xCenter,
          y: Math.sin(angle) * distanceFromCenter + this.yCenter,
          angle
        };
      }
      getPointPositionForValue(index, value) {
        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
      }
      getBasePosition(index) {
        return this.getPointPositionForValue(index || 0, this.getBaseValue());
      }
      getPointLabelPosition(index) {
        const {left, top, right, bottom} = this._pointLabelItems[index];
        return {
          left,
          top,
          right,
          bottom,
        };
      }
      drawBackground() {
        const {backgroundColor, grid: {circular}} = this.options;
        if (backgroundColor) {
          const ctx = this.ctx;
          ctx.save();
          ctx.beginPath();
          pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
          ctx.closePath();
          ctx.fillStyle = backgroundColor;
          ctx.fill();
          ctx.restore();
        }
      }
      drawGrid() {
        const ctx = this.ctx;
        const opts = this.options;
        const {angleLines, grid} = opts;
        const labelCount = this._pointLabels.length;
        let i, offset, position;
        if (opts.pointLabels.display) {
          drawPointLabels(this, labelCount);
        }
        if (grid.display) {
          this.ticks.forEach((tick, index) => {
            if (index !== 0) {
              offset = this.getDistanceFromCenterForValue(tick.value);
              const optsAtIndex = grid.setContext(this.getContext(index - 1));
              drawRadiusLine(this, optsAtIndex, offset, labelCount);
            }
          });
        }
        if (angleLines.display) {
          ctx.save();
          for (i = labelCount - 1; i >= 0; i--) {
            const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
            const {color, lineWidth} = optsAtIndex;
            if (!lineWidth || !color) {
              continue;
            }
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = color;
            ctx.setLineDash(optsAtIndex.borderDash);
            ctx.lineDashOffset = optsAtIndex.borderDashOffset;
            offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
            position = this.getPointPosition(i, offset);
            ctx.beginPath();
            ctx.moveTo(this.xCenter, this.yCenter);
            ctx.lineTo(position.x, position.y);
            ctx.stroke();
          }
          ctx.restore();
        }
      }
      drawBorder() {}
      drawLabels() {
        const ctx = this.ctx;
        const opts = this.options;
        const tickOpts = opts.ticks;
        if (!tickOpts.display) {
          return;
        }
        const startAngle = this.getIndexAngle(0);
        let offset, width;
        ctx.save();
        ctx.translate(this.xCenter, this.yCenter);
        ctx.rotate(startAngle);
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        this.ticks.forEach((tick, index) => {
          if (index === 0 && !opts.reverse) {
            return;
          }
          const optsAtIndex = tickOpts.setContext(this.getContext(index));
          const tickFont = toFont(optsAtIndex.font);
          offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
          if (optsAtIndex.showLabelBackdrop) {
            ctx.font = tickFont.string;
            width = ctx.measureText(tick.label).width;
            ctx.fillStyle = optsAtIndex.backdropColor;
            const padding = toPadding(optsAtIndex.backdropPadding);
            ctx.fillRect(
              -width / 2 - padding.left,
              -offset - tickFont.size / 2 - padding.top,
              width + padding.width,
              tickFont.size + padding.height
            );
          }
          renderText(ctx, tick.label, 0, -offset, tickFont, {
            color: optsAtIndex.color,
          });
        });
        ctx.restore();
      }
      drawTitle() {}
    }
    RadialLinearScale.id = 'radialLinear';
    RadialLinearScale.defaults = {
      display: true,
      animate: true,
      position: 'chartArea',
      angleLines: {
        display: true,
        lineWidth: 1,
        borderDash: [],
        borderDashOffset: 0.0
      },
      grid: {
        circular: false
      },
      startAngle: 0,
      ticks: {
        showLabelBackdrop: true,
        callback: Ticks.formatters.numeric
      },
      pointLabels: {
        backdropColor: undefined,
        backdropPadding: 2,
        display: true,
        font: {
          size: 10
        },
        callback(label) {
          return label;
        },
        padding: 5,
        centerPointLabels: false
      }
    };
    RadialLinearScale.defaultRoutes = {
      'angleLines.color': 'borderColor',
      'pointLabels.color': 'color',
      'ticks.color': 'color'
    };
    RadialLinearScale.descriptors = {
      angleLines: {
        _fallback: 'grid'
      }
    };

    const INTERVALS = {
      millisecond: {common: true, size: 1, steps: 1000},
      second: {common: true, size: 1000, steps: 60},
      minute: {common: true, size: 60000, steps: 60},
      hour: {common: true, size: 3600000, steps: 24},
      day: {common: true, size: 86400000, steps: 30},
      week: {common: false, size: 604800000, steps: 4},
      month: {common: true, size: 2.628e9, steps: 12},
      quarter: {common: false, size: 7.884e9, steps: 4},
      year: {common: true, size: 3.154e10}
    };
    const UNITS = (Object.keys(INTERVALS));
    function sorter(a, b) {
      return a - b;
    }
    function parse(scale, input) {
      if (isNullOrUndef(input)) {
        return null;
      }
      const adapter = scale._adapter;
      const {parser, round, isoWeekday} = scale._parseOpts;
      let value = input;
      if (typeof parser === 'function') {
        value = parser(value);
      }
      if (!isNumberFinite(value)) {
        value = typeof parser === 'string'
          ? adapter.parse(value, parser)
          : adapter.parse(value);
      }
      if (value === null) {
        return null;
      }
      if (round) {
        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)
          ? adapter.startOf(value, 'isoWeek', isoWeekday)
          : adapter.startOf(value, round);
      }
      return +value;
    }
    function determineUnitForAutoTicks(minUnit, min, max, capacity) {
      const ilen = UNITS.length;
      for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
        const interval = INTERVALS[UNITS[i]];
        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
          return UNITS[i];
        }
      }
      return UNITS[ilen - 1];
    }
    function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
      for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
        const unit = UNITS[i];
        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
          return unit;
        }
      }
      return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
    }
    function determineMajorUnit(unit) {
      for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
        if (INTERVALS[UNITS[i]].common) {
          return UNITS[i];
        }
      }
    }
    function addTick(ticks, time, timestamps) {
      if (!timestamps) {
        ticks[time] = true;
      } else if (timestamps.length) {
        const {lo, hi} = _lookup(timestamps, time);
        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
        ticks[timestamp] = true;
      }
    }
    function setMajorTicks(scale, ticks, map, majorUnit) {
      const adapter = scale._adapter;
      const first = +adapter.startOf(ticks[0].value, majorUnit);
      const last = ticks[ticks.length - 1].value;
      let major, index;
      for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
        index = map[major];
        if (index >= 0) {
          ticks[index].major = true;
        }
      }
      return ticks;
    }
    function ticksFromTimestamps(scale, values, majorUnit) {
      const ticks = [];
      const map = {};
      const ilen = values.length;
      let i, value;
      for (i = 0; i < ilen; ++i) {
        value = values[i];
        map[value] = i;
        ticks.push({
          value,
          major: false
        });
      }
      return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
    }
    class TimeScale extends Scale {
      constructor(props) {
        super(props);
        this._cache = {
          data: [],
          labels: [],
          all: []
        };
        this._unit = 'day';
        this._majorUnit = undefined;
        this._offsets = {};
        this._normalized = false;
        this._parseOpts = undefined;
      }
      init(scaleOpts, opts) {
        const time = scaleOpts.time || (scaleOpts.time = {});
        const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
        mergeIf(time.displayFormats, adapter.formats());
        this._parseOpts = {
          parser: time.parser,
          round: time.round,
          isoWeekday: time.isoWeekday
        };
        super.init(scaleOpts);
        this._normalized = opts.normalized;
      }
      parse(raw, index) {
        if (raw === undefined) {
          return null;
        }
        return parse(this, raw);
      }
      beforeLayout() {
        super.beforeLayout();
        this._cache = {
          data: [],
          labels: [],
          all: []
        };
      }
      determineDataLimits() {
        const options = this.options;
        const adapter = this._adapter;
        const unit = options.time.unit || 'day';
        let {min, max, minDefined, maxDefined} = this.getUserBounds();
        function _applyBounds(bounds) {
          if (!minDefined && !isNaN(bounds.min)) {
            min = Math.min(min, bounds.min);
          }
          if (!maxDefined && !isNaN(bounds.max)) {
            max = Math.max(max, bounds.max);
          }
        }
        if (!minDefined || !maxDefined) {
          _applyBounds(this._getLabelBounds());
          if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
            _applyBounds(this.getMinMax(false));
          }
        }
        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
        this.min = Math.min(min, max - 1);
        this.max = Math.max(min + 1, max);
      }
      _getLabelBounds() {
        const arr = this.getLabelTimestamps();
        let min = Number.POSITIVE_INFINITY;
        let max = Number.NEGATIVE_INFINITY;
        if (arr.length) {
          min = arr[0];
          max = arr[arr.length - 1];
        }
        return {min, max};
      }
      buildTicks() {
        const options = this.options;
        const timeOpts = options.time;
        const tickOpts = options.ticks;
        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();
        if (options.bounds === 'ticks' && timestamps.length) {
          this.min = this._userMin || timestamps[0];
          this.max = this._userMax || timestamps[timestamps.length - 1];
        }
        const min = this.min;
        const max = this.max;
        const ticks = _filterBetween(timestamps, min, max);
        this._unit = timeOpts.unit || (tickOpts.autoSkip
          ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))
          : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined
          : determineMajorUnit(this._unit);
        this.initOffsets(timestamps);
        if (options.reverse) {
          ticks.reverse();
        }
        return ticksFromTimestamps(this, ticks, this._majorUnit);
      }
      initOffsets(timestamps) {
        let start = 0;
        let end = 0;
        let first, last;
        if (this.options.offset && timestamps.length) {
          first = this.getDecimalForValue(timestamps[0]);
          if (timestamps.length === 1) {
            start = 1 - first;
          } else {
            start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
          }
          last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
          if (timestamps.length === 1) {
            end = last;
          } else {
            end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
          }
        }
        const limit = timestamps.length < 3 ? 0.5 : 0.25;
        start = _limitValue(start, 0, limit);
        end = _limitValue(end, 0, limit);
        this._offsets = {start, end, factor: 1 / (start + 1 + end)};
      }
      _generate() {
        const adapter = this._adapter;
        const min = this.min;
        const max = this.max;
        const options = this.options;
        const timeOpts = options.time;
        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
        const stepSize = valueOrDefault(timeOpts.stepSize, 1);
        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;
        const hasWeekday = isNumber(weekday) || weekday === true;
        const ticks = {};
        let first = min;
        let time, count;
        if (hasWeekday) {
          first = +adapter.startOf(first, 'isoWeek', weekday);
        }
        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);
        if (adapter.diff(max, min, minor) > 100000 * stepSize) {
          throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
        }
        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();
        for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {
          addTick(ticks, time, timestamps);
        }
        if (time === max || options.bounds === 'ticks' || count === 1) {
          addTick(ticks, time, timestamps);
        }
        return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);
      }
      getLabelForValue(value) {
        const adapter = this._adapter;
        const timeOpts = this.options.time;
        if (timeOpts.tooltipFormat) {
          return adapter.format(value, timeOpts.tooltipFormat);
        }
        return adapter.format(value, timeOpts.displayFormats.datetime);
      }
      _tickFormatFunction(time, index, ticks, format) {
        const options = this.options;
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const majorUnit = this._majorUnit;
        const minorFormat = unit && formats[unit];
        const majorFormat = majorUnit && formats[majorUnit];
        const tick = ticks[index];
        const major = majorUnit && majorFormat && tick && tick.major;
        const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));
        const formatter = options.ticks.callback;
        return formatter ? callback(formatter, [label, index, ticks], this) : label;
      }
      generateTickLabels(ticks) {
        let i, ilen, tick;
        for (i = 0, ilen = ticks.length; i < ilen; ++i) {
          tick = ticks[i];
          tick.label = this._tickFormatFunction(tick.value, i, ticks);
        }
      }
      getDecimalForValue(value) {
        return value === null ? NaN : (value - this.min) / (this.max - this.min);
      }
      getPixelForValue(value) {
        const offsets = this._offsets;
        const pos = this.getDecimalForValue(value);
        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
      }
      getValueForPixel(pixel) {
        const offsets = this._offsets;
        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return this.min + pos * (this.max - this.min);
      }
      _getLabelSize(label) {
        const ticksOpts = this.options.ticks;
        const tickLabelWidth = this.ctx.measureText(label).width;
        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
        const cosRotation = Math.cos(angle);
        const sinRotation = Math.sin(angle);
        const tickFontSize = this._resolveTickFontOptions(0).size;
        return {
          w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
          h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
        };
      }
      _getLabelCapacity(exampleTime) {
        const timeOpts = this.options.time;
        const displayFormats = timeOpts.displayFormats;
        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);
        const size = this._getLabelSize(exampleLabel);
        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
        return capacity > 0 ? capacity : 1;
      }
      getDataTimestamps() {
        let timestamps = this._cache.data || [];
        let i, ilen;
        if (timestamps.length) {
          return timestamps;
        }
        const metas = this.getMatchingVisibleMetas();
        if (this._normalized && metas.length) {
          return (this._cache.data = metas[0].controller.getAllParsedValues(this));
        }
        for (i = 0, ilen = metas.length; i < ilen; ++i) {
          timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
        }
        return (this._cache.data = this.normalize(timestamps));
      }
      getLabelTimestamps() {
        const timestamps = this._cache.labels || [];
        let i, ilen;
        if (timestamps.length) {
          return timestamps;
        }
        const labels = this.getLabels();
        for (i = 0, ilen = labels.length; i < ilen; ++i) {
          timestamps.push(parse(this, labels[i]));
        }
        return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));
      }
      normalize(values) {
        return _arrayUnique(values.sort(sorter));
      }
    }
    TimeScale.id = 'time';
    TimeScale.defaults = {
      bounds: 'data',
      adapters: {},
      time: {
        parser: false,
        unit: false,
        round: false,
        isoWeekday: false,
        minUnit: 'millisecond',
        displayFormats: {}
      },
      ticks: {
        source: 'auto',
        major: {
          enabled: false
        }
      }
    };

    function interpolate(table, val, reverse) {
      let lo = 0;
      let hi = table.length - 1;
      let prevSource, nextSource, prevTarget, nextTarget;
      if (reverse) {
        if (val >= table[lo].pos && val <= table[hi].pos) {
          ({lo, hi} = _lookupByKey(table, 'pos', val));
        }
        ({pos: prevSource, time: prevTarget} = table[lo]);
        ({pos: nextSource, time: nextTarget} = table[hi]);
      } else {
        if (val >= table[lo].time && val <= table[hi].time) {
          ({lo, hi} = _lookupByKey(table, 'time', val));
        }
        ({time: prevSource, pos: prevTarget} = table[lo]);
        ({time: nextSource, pos: nextTarget} = table[hi]);
      }
      const span = nextSource - prevSource;
      return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
    }
    class TimeSeriesScale extends TimeScale {
      constructor(props) {
        super(props);
        this._table = [];
        this._minPos = undefined;
        this._tableRange = undefined;
      }
      initOffsets() {
        const timestamps = this._getTimestampsForTable();
        const table = this._table = this.buildLookupTable(timestamps);
        this._minPos = interpolate(table, this.min);
        this._tableRange = interpolate(table, this.max) - this._minPos;
        super.initOffsets(timestamps);
      }
      buildLookupTable(timestamps) {
        const {min, max} = this;
        const items = [];
        const table = [];
        let i, ilen, prev, curr, next;
        for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
          curr = timestamps[i];
          if (curr >= min && curr <= max) {
            items.push(curr);
          }
        }
        if (items.length < 2) {
          return [
            {time: min, pos: 0},
            {time: max, pos: 1}
          ];
        }
        for (i = 0, ilen = items.length; i < ilen; ++i) {
          next = items[i + 1];
          prev = items[i - 1];
          curr = items[i];
          if (Math.round((next + prev) / 2) !== curr) {
            table.push({time: curr, pos: i / (ilen - 1)});
          }
        }
        return table;
      }
      _getTimestampsForTable() {
        let timestamps = this._cache.all || [];
        if (timestamps.length) {
          return timestamps;
        }
        const data = this.getDataTimestamps();
        const label = this.getLabelTimestamps();
        if (data.length && label.length) {
          timestamps = this.normalize(data.concat(label));
        } else {
          timestamps = data.length ? data : label;
        }
        timestamps = this._cache.all = timestamps;
        return timestamps;
      }
      getDecimalForValue(value) {
        return (interpolate(this._table, value) - this._minPos) / this._tableRange;
      }
      getValueForPixel(pixel) {
        const offsets = this._offsets;
        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
      }
    }
    TimeSeriesScale.id = 'timeseries';
    TimeSeriesScale.defaults = TimeScale.defaults;

    var scales = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CategoryScale: CategoryScale,
    LinearScale: LinearScale,
    LogarithmicScale: LogarithmicScale,
    RadialLinearScale: RadialLinearScale,
    TimeScale: TimeScale,
    TimeSeriesScale: TimeSeriesScale
    });

    const registerables = [
      controllers,
      elements,
      plugins,
      scales,
    ];

    /* components/partials/Doughnut.svelte generated by Svelte v3.44.3 */
    const file$b = "components/partials/Doughnut.svelte";

    function create_fragment$b(ctx) {
    	let canvas_1;

    	const block = {
    		c: function create() {
    			canvas_1 = element("canvas");
    			add_location(canvas_1, file$b, 57, 0, 1126);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, canvas_1, anchor);
    			/*canvas_1_binding*/ ctx[2](canvas_1);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(canvas_1);
    			/*canvas_1_binding*/ ctx[2](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let data;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Doughnut', slots, []);
    	Chart.register(...registerables);
    	let { ballRate = {} } = $$props;
    	let canvas;
    	let myChart;

    	let config = {
    		type: "doughnut",
    		data: {
    			circumference: 90,
    			datasets: [
    				{
    					circumference: 270,
    					rotation: 225,
    					data,
    					backgroundColor: ["#fb1d46", "#e5465b", "#ce6e70", "#b6ac9f", "#7effba"]
    				}
    			]
    		},
    		options: {
    			layout: { padding: 10 },
    			elements: {
    				arc: { borderWidth: 1, borderColor: "#333844" }
    			},
    			plugins: {
    				legend: { display: false },
    				tooltip: { enabled: false }
    			},
    			cutout: "80%"
    		}
    	};

    	onMount(() => {
    		myChart = new Chart(canvas, config);
    	});

    	afterUpdate(() => {
    		myChart.data.datasets[0].data = [...data];
    		myChart.update();
    	});

    	const writable_props = ['ballRate'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Doughnut> was created with unknown prop '${key}'`);
    	});

    	function canvas_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			canvas = $$value;
    			$$invalidate(0, canvas);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('ballRate' in $$props) $$invalidate(1, ballRate = $$props.ballRate);
    	};

    	$$self.$capture_state = () => ({
    		Chart,
    		registerables,
    		onMount,
    		afterUpdate,
    		ballRate,
    		canvas,
    		myChart,
    		config,
    		data
    	});

    	$$self.$inject_state = $$props => {
    		if ('ballRate' in $$props) $$invalidate(1, ballRate = $$props.ballRate);
    		if ('canvas' in $$props) $$invalidate(0, canvas = $$props.canvas);
    		if ('myChart' in $$props) myChart = $$props.myChart;
    		if ('config' in $$props) config = $$props.config;
    		if ('data' in $$props) data = $$props.data;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*ballRate*/ 2) {
    			 data = [...ballRate.wobbles_percent, ballRate.success_percent];
    		}
    	};

    	return [canvas, ballRate, canvas_1_binding];
    }

    class Doughnut extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { ballRate: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Doughnut",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get ballRate() {
    		throw new Error("<Doughnut>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ballRate(value) {
    		throw new Error("<Doughnut>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/partials/Arrow.svelte generated by Svelte v3.44.3 */

    const file$c = "components/partials/Arrow.svelte";

    function create_fragment$c(ctx) {
    	let span;
    	let svg;
    	let defs;
    	let linearGradient;
    	let stop0;
    	let stop1;
    	let path0;
    	let path1;
    	let path2;

    	const block = {
    		c: function create() {
    			span = element("span");
    			svg = svg_element("svg");
    			defs = svg_element("defs");
    			linearGradient = svg_element("linearGradient");
    			stop0 = svg_element("stop");
    			stop1 = svg_element("stop");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(stop0, "offset", "0");
    			attr_dev(stop0, "stop-color", "#eee");
    			add_location(stop0, file$c, 4, 4, 196);
    			attr_dev(stop1, "offset", "1");
    			attr_dev(stop1, "stop-color", "#888");
    			add_location(stop1, file$c, 5, 4, 239);
    			attr_dev(linearGradient, "id", "arrow-gradient");
    			attr_dev(linearGradient, "x1", "157.02");
    			attr_dev(linearGradient, "y1", "90.68");
    			attr_dev(linearGradient, "x2", "157.02");
    			attr_dev(linearGradient, "y2", "246.27");
    			attr_dev(linearGradient, "gradientUnits", "userSpaceOnUse");
    			add_location(linearGradient, file$c, 3, 3, 76);
    			add_location(defs, file$c, 2, 2, 65);
    			attr_dev(path0, "data-name", "Outer Stroke");
    			attr_dev(path0, "d", "M66.42,284.52a23.47,23.47,0,0,1-5-.55A22.91,22.91,0,0,1,47,273.77a22,22,0,0,1-2.7-17L66,168.44,44.56,80.21A22.17,22.17,0,0,1,45.84,66a22.82,22.82,0,0,1,20.9-13.45,23.06,23.06,0,0,1,8.56,1.64c20.44,8.05,56.57,23.67,90.92,41.11,38.22,19.41,80.64,43.46,98.4,54.06a22.74,22.74,0,0,1,7.13,6.71,22.27,22.27,0,0,1,3.35,17.17,22.54,22.54,0,0,1-10.3,14.4c-17.12,10.45-61.08,36.68-99.07,54.38l-12.88,6c-32.36,15.09-62.93,29.34-78.37,35.08A23,23,0,0,1,66.42,284.52Z");
    			attr_dev(path0, "transform", "translate(-43.6 -52.52)");
    			set_style(path0, "fill", "#4f5456");
    			add_location(path0, file$c, 8, 2, 313);
    			attr_dev(path1, "data-name", "Inner Stroke");
    			attr_dev(path1, "d", "M159,109.53C124.09,91.82,87.87,76.3,69.38,69a7,7,0,0,0-8.92,3.45,6.14,6.14,0,0,0-.36,4L82,166.63a6.3,6.3,0,0,1,0,3.65L59.78,260.6a6.45,6.45,0,0,0,5.08,7.75,7.17,7.17,0,0,0,4-.28c16.89-6.27,55.14-24.33,90.06-40.58,37.65-17.55,81.41-43.73,97.51-53.55a6.24,6.24,0,0,0,2-8.9,6.6,6.6,0,0,0-2.1-2C238.55,152.4,196.37,128.53,159,109.53Z");
    			attr_dev(path1, "transform", "translate(-43.6 -52.52)");
    			set_style(path1, "fill", "#fff");
    			add_location(path1, file$c, 10, 2, 871);
    			attr_dev(path2, "d", "M97.51,174.36a22.32,22.32,0,0,0,0-11.78L80,90.68c18.69,7.87,45.44,19.78,71.7,33.12,29.6,15,61.74,32.88,82.52,44.84-20.71,12.3-53.29,31-82,44.34l-12.89,6c-21.48,10-43.47,20.27-59.54,27.28Z");
    			attr_dev(path2, "transform", "translate(-43.6 -52.52)");
    			set_style(path2, "fill", "url(#arrow-gradient)");
    			add_location(path2, file$c, 12, 2, 1301);
    			attr_dev(svg, "id", "Arrow");
    			attr_dev(svg, "viewBox", "0 0 232 232");
    			attr_dev(svg, "class", "svelte-dld832");
    			add_location(svg, file$c, 1, 1, 23);
    			attr_dev(span, "class", "arrow svelte-dld832");
    			add_location(span, file$c, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, svg);
    			append_dev(svg, defs);
    			append_dev(defs, linearGradient);
    			append_dev(linearGradient, stop0);
    			append_dev(linearGradient, stop1);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Arrow', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Arrow> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Arrow extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Arrow",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    let balls = [
      {
        name: "Poke Ball",
        type: "poke",
        rate: 1,
        flavour:
          "A device for catching wild Pokémon. It's thrown like a ball at a Pokémon, comfortably encapsulating its target."
      },
      {
        name: "Premier Ball",
        type: "premier",
        rate: 1,
        flavour:
          "A somewhat rare Poké Ball that was made as a commemorative item used to celebrate an event of some sort."
      },
      {
        name: "Great Ball",
        type: "great",
        rate: 1.5,
        flavour:
          "A good, high-performance Poké Ball that provides a higher success rate for catching Pokémon than a standard Poké Ball."
      },
      {
        name: "Ultra Ball",
        type: "ultra",
        rate: 2,
        flavour:
          "An ultra-high-performance Poké Ball that provides a higher success rate for catching Pokémon than a Great Ball."
      },
      {
        name: "Heal Ball",
        type: "heal",
        rate: 1,
        flavour:
          "A remedial Poké Ball that restores the HP of a Pokémon caught with it and eliminates any status conditions."
      },
      {
        name: "Nest Ball",
        type: "nest",
        rate: 9,
        flavour:
          "A somewhat different Poké Ball that becomes more effective the lower the level of the wild Pokémon."
      },
      {
        name: "Net Ball",
        type: "net",
        rate: 3.5,
        flavour:
          "A somewhat different Poké Ball that is more effective when attempting to catch Water- or Bug-type Pokémon."
      },
      {
        name: "Dusk Ball",
        type: "dusk",
        rate: 3,
        flavour:
          "A somewhat different Poké Ball that makes it easier to catch wild Pokémon at night or in dark places such as caves."
      },
      {
        name: "Dive Ball",
        type: "dive",
        rate: 3.5,
        flavour:
          "A somewhat different Poké Ball that works especially well when catching Pokémon that live underwater."
      },
      {
        name: "Quick Ball",
        type: "quick",
        rate: 5,
        flavour:
          "A somewhat different Poké Ball that has a more successful catch rate if used at the start of a wild encounter."
      },
      {
        name: "Safari Ball",
        type: "safari",
        rate: 1.5,
        flavour:
          "A special Poké Ball that was used in the Safari Zone in the Kanto region and in the Great Marsh in the Sinnoh region."
      },
      {
        name: "Luxury Ball",
        type: "luxury",
        rate: 1,
        flavour:
          "A particularly comfortable Poké Ball that makes a wild Pokémon quickly grow friendlier after being caught."
      },
      {
        name: "Repeat Ball",
        type: "repeat",
        rate: 3.5,
        flavour:
          "A somewhat different Poké Ball that works especially well on a Pokémon species that has been caught before."
      },
      {
        name: "Timer Ball",
        type: "timer",
        rate: 1,
        flavour:
          "A somewhat different Poké Ball that becomes progressively more effective at catching Pokémon the more turns that are taken in battle."
      },
      {
        name: "Master Ball",
        type: "master",
        rate: 99,
        flavour:
          "The best Poké Ball with the ultimate level of performance. With it, you will catch any wild Pokémon without fail."
      }
    ];

    const BASE = 4096;
    const PROB = 65536;

    const round$1 = (n) => {
      return Math.round(n * BASE) / BASE;
    };

    const floor = (n) => {
      return Math.floor(round$1(n));
    };

    const power = (n, ex) => {
      return Math.pow(n, ex);
    };

    const fixed = (n, d = 3) => {
      return parseFloat(n.toFixed(round$1(d)));
    };

    const clamp = (n, min = 0, max = 100) => {
      return Math.max(min, Math.min(n, max));
    };

    const ball_rate = (ball, lvl) => {
      let rate = 1;
      switch (ball.type) {
        case "master":
          rate = 9999;
          break;
        case "nest":
          if (lvl < 30) {
            rate = (41 - lvl) / 10;
          }
          break;
      }
      return rate;
    };

    const difficulty = (mylvl, lvl) => {
      if (mylvl < lvl) {
        return 410 / BASE;
      }
      return 1;
    };

    const level_check = (lvl) => {
      if (lvl < 21) {
        return (30 - lvl) / 10;
      }
      return 1;
    };

    const catch_check = (pokemon, mod, hp = 100) => {
      const MAX = 100;
      return (
        (((3 * MAX - 2 * hp) * mod.grass * pokemon.catch_rate * mod.ball) /
          (3 * MAX)) *
        mod.low_level *
        mod.status *
        mod.difficulty
      );
    };

    const shake_check = (chance) => {
      return floor(round$1(PROB / round$1(power(round$1(255 / chance), 0.1875))));
    };

    const shakes = (chance) => {
      return [
        1 - chance,
        chance * (1 - chance),
        power(chance, 2) * (1 - chance),
        power(chance, 3) * (1 - chance),
      ];
    };

    const rates = derived(
      [selectedMon, health, level, player, status],
      ([$pokemon, $hp, $lvl, $mylvl, $status]) => {

        const mod = {};
        mod.difficulty = difficulty($mylvl, $lvl);
        mod.low_level = level_check($lvl);
        mod.status = $status;
        mod.grass = 1;

        return balls.map((ball) => {
          mod.ball = ball_rate(ball, $lvl);
          const catch_chance = catch_check($pokemon, mod, $hp);
          const rough_chance = (catch_chance / 255) * 100;
          const shake_prob = shake_check(catch_chance);
          const shake_chance = shake_prob / PROB;
          const catch_percent = power(shake_chance, 4);
          const shakes_percent = shakes(shake_chance);

          return {
            ...ball,
            modifiers: { ...mod },
            rough: rough_chance,
            success: catch_percent,
            success_percent: clamp(fixed(catch_percent * 100)),
            wobbles: shakes_percent.map((v) => clamp(v, 0, 1)),
            wobbles_percent: shakes_percent.map((v) => clamp(fixed(v * 100))),
          };
        });
      }
    );

    /* components/Pokeballs.svelte generated by Svelte v3.44.3 */
    const file$d = "components/Pokeballs.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    // (15:8) {#if ball === ballRate}
    function create_if_block$4(ctx) {
    	let arrow;
    	let current;
    	arrow = new Arrow({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(arrow.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(arrow, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(arrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(arrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(arrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(15:8) {#if ball === ballRate}",
    		ctx
    	});

    	return block;
    }

    // (11:4) {#each $rates as ballRate}
    function create_each_block$4(ctx) {
    	let label;
    	let ball_1;
    	let t0;
    	let input;
    	let input_value_value;
    	let t1;
    	let t2;
    	let div;
    	let doughnut;
    	let t3;
    	let current;
    	let mounted;
    	let dispose;

    	ball_1 = new Ball({
    			props: {
    				ball: /*ballRate*/ ctx[4],
    				anim: /*ball*/ ctx[0] === /*ballRate*/ ctx[4]
    				? 'open'
    				: 'side'
    			},
    			$$inline: true
    		});

    	let if_block = /*ball*/ ctx[0] === /*ballRate*/ ctx[4] && create_if_block$4(ctx);

    	doughnut = new Doughnut({
    			props: { ballRate: /*ballRate*/ ctx[4] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			label = element("label");
    			create_component(ball_1.$$.fragment);
    			t0 = space();
    			input = element("input");
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			div = element("div");
    			create_component(doughnut.$$.fragment);
    			t3 = space();
    			attr_dev(input, "type", "radio");
    			attr_dev(input, "name", "selectedBall");
    			input.__value = input_value_value = /*ballRate*/ ctx[4];
    			input.value = input.__value;
    			attr_dev(input, "class", "svelte-1gml3ss");
    			/*$$binding_groups*/ ctx[3][0].push(input);
    			add_location(input, file$d, 13, 8, 501);
    			attr_dev(div, "class", "chart svelte-1gml3ss");
    			add_location(div, file$d, 17, 8, 657);
    			attr_dev(label, "class", "svelte-1gml3ss");
    			toggle_class(label, "selected", /*ball*/ ctx[0] === /*ballRate*/ ctx[4]);
    			add_location(label, file$d, 11, 6, 370);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			mount_component(ball_1, label, null);
    			append_dev(label, t0);
    			append_dev(label, input);
    			input.checked = input.__value === /*ball*/ ctx[0];
    			append_dev(label, t1);
    			if (if_block) if_block.m(label, null);
    			append_dev(label, t2);
    			append_dev(label, div);
    			mount_component(doughnut, div, null);
    			append_dev(label, t3);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(input, "change", /*input_change_handler*/ ctx[2]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const ball_1_changes = {};
    			if (dirty & /*$rates*/ 2) ball_1_changes.ball = /*ballRate*/ ctx[4];

    			if (dirty & /*ball, $rates*/ 3) ball_1_changes.anim = /*ball*/ ctx[0] === /*ballRate*/ ctx[4]
    			? 'open'
    			: 'side';

    			ball_1.$set(ball_1_changes);

    			if (!current || dirty & /*$rates*/ 2 && input_value_value !== (input_value_value = /*ballRate*/ ctx[4])) {
    				prop_dev(input, "__value", input_value_value);
    				input.value = input.__value;
    			}

    			if (dirty & /*ball*/ 1) {
    				input.checked = input.__value === /*ball*/ ctx[0];
    			}

    			if (/*ball*/ ctx[0] === /*ballRate*/ ctx[4]) {
    				if (if_block) {
    					if (dirty & /*ball, $rates*/ 3) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(label, t2);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const doughnut_changes = {};
    			if (dirty & /*$rates*/ 2) doughnut_changes.ballRate = /*ballRate*/ ctx[4];
    			doughnut.$set(doughnut_changes);

    			if (dirty & /*ball, $rates*/ 3) {
    				toggle_class(label, "selected", /*ball*/ ctx[0] === /*ballRate*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ball_1.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(doughnut.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ball_1.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(doughnut.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			destroy_component(ball_1);
    			/*$$binding_groups*/ ctx[3][0].splice(/*$$binding_groups*/ ctx[3][0].indexOf(input), 1);
    			if (if_block) if_block.d();
    			destroy_component(doughnut);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(11:4) {#each $rates as ballRate}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let section;
    	let current;
    	let each_value = /*$rates*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			section = element("section");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(section, "class", "balls svelte-1gml3ss");
    			add_location(section, file$d, 9, 2, 307);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ball, $rates*/ 3) {
    				each_value = /*$rates*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(section, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $rates;
    	validate_store(rates, 'rates');
    	component_subscribe($$self, rates, $$value => $$invalidate(1, $rates = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Pokeballs', slots, []);
    	let { ball = balls[0] } = $$props;
    	const writable_props = ['ball'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Pokeballs> was created with unknown prop '${key}'`);
    	});

    	const $$binding_groups = [[]];

    	function input_change_handler() {
    		ball = this.__value;
    		$$invalidate(0, ball);
    	}

    	$$self.$$set = $$props => {
    		if ('ball' in $$props) $$invalidate(0, ball = $$props.ball);
    	};

    	$$self.$capture_state = () => ({
    		Ball,
    		Doughnut,
    		Arrow,
    		pokeballs: balls,
    		rates,
    		ball,
    		$rates
    	});

    	$$self.$inject_state = $$props => {
    		if ('ball' in $$props) $$invalidate(0, ball = $$props.ball);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [ball, $rates, input_change_handler, $$binding_groups];
    }

    class Pokeballs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { ball: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Pokeballs",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get ball() {
    		throw new Error("<Pokeballs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ball(value) {
    		throw new Error("<Pokeballs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/CatchStats.svelte generated by Svelte v3.44.3 */
    const file$e = "components/CatchStats.svelte";

    function create_fragment$e(ctx) {
    	let footer;
    	let h1;
    	let span0;
    	let t0_value = /*rate*/ ctx[2].success_percent + "";
    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = /*pokemon*/ ctx[0].name + "";
    	let t3;
    	let t4;
    	let span2;
    	let t5;
    	let t6;
    	let t7;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			h1 = element("h1");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text("%");
    			t2 = text(" chance to capture ");
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = text(" @ ");
    			span2 = element("span");
    			t5 = text(/*health*/ ctx[1]);
    			t6 = text("%");
    			t7 = text(" health!");
    			attr_dev(span0, "class", "svelte-3e9z7p");
    			add_location(span0, file$e, 17, 8, 404);
    			attr_dev(span1, "class", "svelte-3e9z7p");
    			add_location(span1, file$e, 17, 63, 459);
    			attr_dev(span2, "class", "svelte-3e9z7p");
    			add_location(span2, file$e, 17, 93, 489);
    			attr_dev(h1, "class", "svelte-3e9z7p");
    			add_location(h1, file$e, 16, 4, 391);
    			attr_dev(footer, "class", "svelte-3e9z7p");
    			toggle_class(footer, "isOpen", /*isOpen*/ ctx[3]);
    			add_location(footer, file$e, 15, 0, 331);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			append_dev(footer, h1);
    			append_dev(h1, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(h1, t2);
    			append_dev(h1, span1);
    			append_dev(span1, t3);
    			append_dev(h1, t4);
    			append_dev(h1, span2);
    			append_dev(span2, t5);
    			append_dev(span2, t6);
    			append_dev(h1, t7);

    			if (!mounted) {
    				dispose = listen_dev(footer, "click", /*click_handler*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*rate*/ 4 && t0_value !== (t0_value = /*rate*/ ctx[2].success_percent + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*pokemon*/ 1 && t3_value !== (t3_value = /*pokemon*/ ctx[0].name + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*health*/ 2) set_data_dev(t5, /*health*/ ctx[1]);

    			if (dirty & /*isOpen*/ 8) {
    				toggle_class(footer, "isOpen", /*isOpen*/ ctx[3]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let rateArray;
    	let rate;
    	let isOpen;
    	let $rates;
    	validate_store(rates, 'rates');
    	component_subscribe($$self, rates, $$value => $$invalidate(6, $rates = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CatchStats', slots, []);
    	let { ball = {} } = $$props;
    	let { pokemon = {} } = $$props;
    	let { health = 50 } = $$props;
    	const writable_props = ['ball', 'pokemon', 'health'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CatchStats> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		$$invalidate(3, isOpen = !isOpen);
    	};

    	$$self.$$set = $$props => {
    		if ('ball' in $$props) $$invalidate(4, ball = $$props.ball);
    		if ('pokemon' in $$props) $$invalidate(0, pokemon = $$props.pokemon);
    		if ('health' in $$props) $$invalidate(1, health = $$props.health);
    	};

    	$$self.$capture_state = () => ({
    		rates,
    		ball,
    		pokemon,
    		health,
    		rate,
    		isOpen,
    		rateArray,
    		$rates
    	});

    	$$self.$inject_state = $$props => {
    		if ('ball' in $$props) $$invalidate(4, ball = $$props.ball);
    		if ('pokemon' in $$props) $$invalidate(0, pokemon = $$props.pokemon);
    		if ('health' in $$props) $$invalidate(1, health = $$props.health);
    		if ('rate' in $$props) $$invalidate(2, rate = $$props.rate);
    		if ('isOpen' in $$props) $$invalidate(3, isOpen = $$props.isOpen);
    		if ('rateArray' in $$props) $$invalidate(5, rateArray = $$props.rateArray);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$rates, ball*/ 80) {
    			 $$invalidate(5, rateArray = $rates.filter(v => v.type === ball.type));
    		}

    		if ($$self.$$.dirty & /*rateArray*/ 32) {
    			 $$invalidate(2, rate = rateArray.length ? rateArray.at(0) : {});
    		}

    		if ($$self.$$.dirty & /*ball, pokemon, rate*/ 21) {
    			 $$invalidate(3, isOpen = !!ball.name && !!pokemon.name && !!rate);
    		}
    	};

    	return [pokemon, health, rate, isOpen, ball, rateArray, $rates, click_handler];
    }

    class CatchStats extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { ball: 4, pokemon: 0, health: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CatchStats",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get ball() {
    		throw new Error("<CatchStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ball(value) {
    		throw new Error("<CatchStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pokemon() {
    		throw new Error("<CatchStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pokemon(value) {
    		throw new Error("<CatchStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get health() {
    		throw new Error("<CatchStats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set health(value) {
    		throw new Error("<CatchStats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* App.svelte generated by Svelte v3.44.3 */
    const file$f = "App.svelte";

    function create_fragment$f(ctx) {
    	let main;
    	let pokemon;
    	let updating_pokemon;
    	let t0;
    	let input0;
    	let input0_min_value;
    	let input0_max_value;
    	let t1;
    	let input1;
    	let input1_min_value;
    	let input1_max_value;
    	let t2;
    	let pokeballs;
    	let updating_ball;
    	let t3;
    	let catchstats;
    	let current;
    	let mounted;
    	let dispose;

    	function pokemon_pokemon_binding(value) {
    		/*pokemon_pokemon_binding*/ ctx[4](value);
    	}

    	let pokemon_props = {};

    	if (/*$selectedMon*/ ctx[0] !== void 0) {
    		pokemon_props.pokemon = /*$selectedMon*/ ctx[0];
    	}

    	pokemon = new Pokemon({ props: pokemon_props, $$inline: true });
    	binding_callbacks.push(() => bind(pokemon, 'pokemon', pokemon_pokemon_binding));

    	function pokeballs_ball_binding(value) {
    		/*pokeballs_ball_binding*/ ctx[7](value);
    	}

    	let pokeballs_props = {};

    	if (/*$selectedBall*/ ctx[3] !== void 0) {
    		pokeballs_props.ball = /*$selectedBall*/ ctx[3];
    	}

    	pokeballs = new Pokeballs({ props: pokeballs_props, $$inline: true });
    	binding_callbacks.push(() => bind(pokeballs, 'ball', pokeballs_ball_binding));

    	catchstats = new CatchStats({
    			props: {
    				ball: /*$selectedBall*/ ctx[3],
    				pokemon: /*$selectedMon*/ ctx[0],
    				health: /*$health*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(pokemon.$$.fragment);
    			t0 = space();
    			input0 = element("input");
    			t1 = space();
    			input1 = element("input");
    			t2 = space();
    			create_component(pokeballs.$$.fragment);
    			t3 = space();
    			create_component(catchstats.$$.fragment);
    			attr_dev(input0, "type", "range");
    			attr_dev(input0, "min", input0_min_value = 1);
    			attr_dev(input0, "max", input0_max_value = 100);
    			add_location(input0, file$f, 13, 2, 407);
    			attr_dev(input1, "type", "range");
    			attr_dev(input1, "min", input1_min_value = 1);
    			attr_dev(input1, "max", input1_max_value = 100);
    			add_location(input1, file$f, 14, 2, 471);
    			attr_dev(main, "class", "svelte-1lmgayj");
    			add_location(main, file$f, 11, 0, 356);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(pokemon, main, null);
    			append_dev(main, t0);
    			append_dev(main, input0);
    			set_input_value(input0, /*$health*/ ctx[1]);
    			append_dev(main, t1);
    			append_dev(main, input1);
    			set_input_value(input1, /*$level*/ ctx[2]);
    			append_dev(main, t2);
    			mount_component(pokeballs, main, null);
    			append_dev(main, t3);
    			mount_component(catchstats, main, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*input0_change_input_handler*/ ctx[5]),
    					listen_dev(input0, "input", /*input0_change_input_handler*/ ctx[5]),
    					listen_dev(input1, "change", /*input1_change_input_handler*/ ctx[6]),
    					listen_dev(input1, "input", /*input1_change_input_handler*/ ctx[6])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const pokemon_changes = {};

    			if (!updating_pokemon && dirty & /*$selectedMon*/ 1) {
    				updating_pokemon = true;
    				pokemon_changes.pokemon = /*$selectedMon*/ ctx[0];
    				add_flush_callback(() => updating_pokemon = false);
    			}

    			pokemon.$set(pokemon_changes);

    			if (dirty & /*$health*/ 2) {
    				set_input_value(input0, /*$health*/ ctx[1]);
    			}

    			if (dirty & /*$level*/ 4) {
    				set_input_value(input1, /*$level*/ ctx[2]);
    			}

    			const pokeballs_changes = {};

    			if (!updating_ball && dirty & /*$selectedBall*/ 8) {
    				updating_ball = true;
    				pokeballs_changes.ball = /*$selectedBall*/ ctx[3];
    				add_flush_callback(() => updating_ball = false);
    			}

    			pokeballs.$set(pokeballs_changes);
    			const catchstats_changes = {};
    			if (dirty & /*$selectedBall*/ 8) catchstats_changes.ball = /*$selectedBall*/ ctx[3];
    			if (dirty & /*$selectedMon*/ 1) catchstats_changes.pokemon = /*$selectedMon*/ ctx[0];
    			if (dirty & /*$health*/ 2) catchstats_changes.health = /*$health*/ ctx[1];
    			catchstats.$set(catchstats_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(pokemon.$$.fragment, local);
    			transition_in(pokeballs.$$.fragment, local);
    			transition_in(catchstats.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(pokemon.$$.fragment, local);
    			transition_out(pokeballs.$$.fragment, local);
    			transition_out(catchstats.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(pokemon);
    			destroy_component(pokeballs);
    			destroy_component(catchstats);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let $selectedMon;
    	let $health;
    	let $level;
    	let $selectedBall;
    	validate_store(selectedMon, 'selectedMon');
    	component_subscribe($$self, selectedMon, $$value => $$invalidate(0, $selectedMon = $$value));
    	validate_store(health, 'health');
    	component_subscribe($$self, health, $$value => $$invalidate(1, $health = $$value));
    	validate_store(level, 'level');
    	component_subscribe($$self, level, $$value => $$invalidate(2, $level = $$value));
    	validate_store(selectedBall, 'selectedBall');
    	component_subscribe($$self, selectedBall, $$value => $$invalidate(3, $selectedBall = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	function pokemon_pokemon_binding(value) {
    		$selectedMon = value;
    		selectedMon.set($selectedMon);
    	}

    	function input0_change_input_handler() {
    		$health = to_number(this.value);
    		health.set($health);
    	}

    	function input1_change_input_handler() {
    		$level = to_number(this.value);
    		level.set($level);
    	}

    	function pokeballs_ball_binding(value) {
    		$selectedBall = value;
    		selectedBall.set($selectedBall);
    	}

    	$$self.$capture_state = () => ({
    		selectedMon,
    		selectedBall,
    		health,
    		level,
    		Pokemon,
    		Pokeballs,
    		CatchStats,
    		$selectedMon,
    		$health,
    		$level,
    		$selectedBall
    	});

    	return [
    		$selectedMon,
    		$health,
    		$level,
    		$selectedBall,
    		pokemon_pokemon_binding,
    		input0_change_input_handler,
    		input1_change_input_handler,
    		pokeballs_ball_binding
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    const app = new App({
      target: document.body
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
